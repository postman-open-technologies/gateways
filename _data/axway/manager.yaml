openapi: 3.0.1
info:
  title: API Manager API v1.3
  description: Version 1.3 of the API Manager Rest API
  contact:
    email: support@axway.com
  license:
    name: Copyright Axway 2020. All rights reserved.
  version: '1.3'
servers:
  - url: https://localhost:8075/api/portal/v1.3
paths:
  /applications/oauthclient/{clientId}:
    get:
      tags:
        - Applications
      summary: Get an application associated with an OAuth Client ID
      description: Retrieves the application associated with an OAuth Client ID
      operationId: appFromOAuthClient_1
      parameters:
        - name: clientId
          in: path
          description: The OAuth Client ID associated with the Application.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application'
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /applications/{id}/apis/{apiAccessId}/approve:
    post:
      tags:
        - Applications
      summary: Creates an API access request to an API for an application.
      description: Approving user must be API Manager Administrator or an Organization Administrator of the application's organization with the correct privileges to approve API access requests.
      operationId: approveApiAccess_1
      parameters:
        - name: id
          in: path
          description: The application ID.
          required: true
          schema:
            type: string
        - name: apiAccessId
          in: path
          description: The API access ID.
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /applications/{id}/approve:
    post:
      tags:
        - Applications
      summary: Approves a pending application request
      description: Approving user must be API Manager Administrator or an Organization Administrator of the application's organization with the correct privileges to approve new application requests.
      operationId: approveApp_1
      parameters:
        - name: id
          in: path
          description: The application request ID.
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /applications/{id}/apikeys:
    get:
      tags:
        - Applications
      summary: Returns the API Keys associated with an application
      description: Returns the API Keys associated with an application.
      operationId: getApiKeysForAppID_1
      parameters:
        - name: id
          in: path
          description: The ID of application whose API Keys are to be returned.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/APIKey'
        '204':
          description: No Content
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      tags:
        - Applications
      summary: Creates a new API Key and secret for the application
      description: Creates a new API Key and secret for the application.
      operationId: createAPIKey_1
      parameters:
        - name: id
          in: path
          description: The ID of application requiring an API Key.
          required: true
          schema:
            type: string
      requestBody:
        description: The APIKey to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/APIKey'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIKey'
        '204':
          description: No Content
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '409':
          description: Conflict
        '500':
          description: Internal Server Error
  /applications:
    get:
      tags:
        - Applications
      summary: Get the list of applications
      description: |-
        Get the list of applications that are visible to the authenticated user.  The list of applications can be filtered using the expression: field=__field__&op=__op__&value=__value__.  Optionally, you can add a logical operation for all expressions, using the form: &lop=AND|OR.  By default, the logical operation is AND.  Multiple expression filters can be used, specifying field, op, and value for each filter. The __field__ is one of:

        apiid
        :    Matches the application if the application is using the API, specified by ID

        userid
        :    Matches the application if the user has explicit access to the application, specified by ID

        description
        :    The application's description

        email
        :    The application's contact email address

        enabled
        :     The enabled state of the application, one of: enabled, disabled

        createdOn
        :    The date the application was created on, time in ms, e.g.: 1372755998542

        name
        :    The name of the application

        orgid
        :    Matches the application if the application is part of the organization, specified by ID

        phone
        :    The application's contact phone

        state
        :    The application's current state, one of: approved, pending

        The __op__ is an operation and is one of:

        eq
        :    Equal

        ne
        :    Not equal

        gt
        :     Greater than

        lt
        :     Less than

        ge
        :     Greater than or equal

        le
        :     Less than or equal

        like
        :    Like

        gele
        :     Greater than or equal to, and less than or equal to; the __value__ should be a lower-minimum and upper-maximum separated by comma, e.g: value=5,10

        The __value__ will be compared against the __field__, according to the supplied __op__. 
      operationId: getAllApplications_1
      parameters:
        - name: field
          in: query
          description: Filter field name.
          schema:
            type: array
            items:
              type: string
        - name: op
          in: query
          description: Filter operation.
          schema:
            type: array
            items:
              type: string
        - name: value
          in: query
          description: Filter value
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Application'
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
    post:
      tags:
        - Applications
      summary: Creates a new application.
      description: Creates a new application. New applications may need to be approved using [/approve](#APIApplicationsapproveApp). Data posted in this request may include custom properties defined in app.config
      operationId: createApp_1
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application'
        '400':
          description: Bad Request
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /applications/{id}/extclients:
    get:
      tags:
        - Applications
      summary: Returns the external clients associated with an application
      description: Returns the external clients associated with an application. External clients are used when authenticating the application through a 3rd party OAuth service
      operationId: getExternalClientsForAppID_1
      parameters:
        - name: id
          in: path
          description: The ID of application whose external clients are to be returned.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExternalClient'
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
    post:
      tags:
        - Applications
      summary: Maps a new external client to the application
      description: Maps a new external client to the application. External clients are used when authenticating the application through a 3rd party OAuth service
      operationId: createExternalClient_1
      parameters:
        - name: id
          in: path
          description: The ID of application to map to an external client.
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalClient'
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
  /applications/{id}/oauth:
    get:
      tags:
        - Applications
      summary: Returns the OAuth Credentials associated with an application
      description: Returns the OAuth Credentials associated with an application.
      operationId: getOAuthInfoForAppID_1
      parameters:
        - name: id
          in: path
          description: The ID of application whose OAuth Credentials are to be returned.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OAuthClient'
        '204':
          description: No Content
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      tags:
        - Applications
      summary: Creates a new OAuth client ID and secret for the application
      description: Creates a new OAuth client ID and secret for the application.
      operationId: createOAuthCred_1
      parameters:
        - name: id
          in: path
          description: The ID of application requiring an OAuth client ID and secret.
          required: true
          schema:
            type: string
      requestBody:
        description: The OAuth credential to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OAuthClient'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuthClient'
        '204':
          description: No Content
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /applications/{id}/permissions:
    get:
      tags:
        - Applications
      summary: Get the list of permissions.
      description: Get the access-control list (ACL) for the application. Callers with view-only privilege can only access their own permission.
      operationId: getPermission_1
      parameters:
        - name: id
          in: path
          description: The application ID.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PermissionDTO'
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    post:
      tags:
        - Applications
      summary: Create a new permission.
      description: Add a new access-control entry to the application's ACL. Management privilege required.
      operationId: createPermission_1
      parameters:
        - name: id
          in: path
          description: The application ID.
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PermissionDTO'
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /applications/{id}/oauthresource:
    get:
      tags:
        - Applications
      summary: Returns the OAuth protected resources (scopes) associated with an application
      description: Returns the OAuth protected resources (scopes) associated with an application.
      operationId: getResourcesForAppID_1
      parameters:
        - name: id
          in: path
          description: The ID of application whose OAuth protected resources (Scopes) are to be returned.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OAuthResource'
        '204':
          description: No Content
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      tags:
        - Applications
      summary: Adds an OAuth protected resource to an application
      description: An application must define which OAuth Protected resources it wants to access. These resources will define the scope of the application.
      operationId: createProtectedResource_1
      parameters:
        - name: id
          in: path
          description: The ID of application requiring an OAuth protected resource.
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuthResource'
        '204':
          description: No Content
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /applications/{id}/quota:
    get:
      tags:
        - Applications
      summary: Returns the quota associated with an application.
      description: Returns the quota associated with an application.
      operationId: getQuota_2
      parameters:
        - name: id
          in: path
          description: The ID of application who's quota constraints are to be returned.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuotaDTO'
        '500':
          description: Internal Server Error
    put:
      tags:
        - Applications
      summary: Updates a quota contraint for an application
      description: Updates a quota contraint for the given application.
      operationId: updateQuota_2
      parameters:
        - name: id
          in: path
          description: The ID of application who's quota is to be updated.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuotaDTO'
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      tags:
        - Applications
      summary: Creates a new quota constraint for the application
      description: Creates a new quota constraint for the application.
      operationId: createQuota_2
      parameters:
        - name: id
          in: path
          description: The ID of application for the quota contraint.
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuotaDTO'
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      tags:
        - Applications
      summary: Deletes a quota from an application
      description: Deletes a quota from an application
      operationId: deleteQuota_2
      parameters:
        - name: id
          in: path
          description: The ID of application who's quota constraint is to be deleted.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /applications/{id}/scope:
    get:
      tags:
        - Applications
      summary: Returns the scopes associated with an application
      description: Returns the OAuth scopes associated with an application.
      operationId: getScopesForAppID_1
      parameters:
        - name: id
          in: path
          description: The ID of application whose OAuth protected resources (Scopes) are to be returned.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OAuthAppScope'
        '204':
          description: No Content
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      tags:
        - Applications
      summary: Adds an OAuth protected resource to an application
      description: An application must define which scopes it wants to access. These define the scope of the application.
      operationId: createScope_1
      parameters:
        - name: id
          in: path
          description: The ID of application requiring an OAuth scope.
          required: true
          schema:
            type: string
      requestBody:
        description: The OAuth Scope to add to the application
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OAuthAppScope'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuthAppScope'
        '204':
          description: No Content
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /applications/{id}/apikeys/{apikeyid}:
    put:
      tags:
        - Applications
      summary: Updates an API Key
      description: Updates the secret, enabled and Cors origin field.  The fields __id__, __createdBy__, __createdOn__ are read only.
      operationId: updateAPIKey_1
      parameters:
        - name: id
          in: path
          description: The ID of application whose API Key is to be updated.
          required: true
          schema:
            type: string
        - name: apikeyid
          in: path
          description: The ID of the API Key to be updated.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIKey'
        '204':
          description: No Content
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      tags:
        - Applications
      summary: Delete an API Key
      description: Deletes an API Key. Deleting an API key means that it will no longer be accepted for application authentication.
      operationId: deleteAPIKey_1
      parameters:
        - name: id
          in: path
          description: The API Key ID to be deleted.
          required: true
          schema:
            type: string
        - name: apikeyid
          in: path
          description: The ID of application whose API Key is to be deleted.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /applications/{id}:
    get:
      tags:
        - Applications
      summary: Get an application
      description: Retrieves the details of an application.
      operationId: getApp_1
      parameters:
        - name: id
          in: path
          description: The ID of the application to be returned.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application'
        '204':
          description: No Content
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      tags:
        - Applications
      summary: Update an application
      description: Only managers of the application, API Manager Administrators, or Organization Administrators with enabled delegated application management privileges, may update an application. Note, if a field is omitted from the payload, or its value is set to null, the existing value for this field will be retained.
      operationId: updateApp_1
      parameters:
        - name: id
          in: path
          description: The ID of the application to be updated
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application'
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      tags:
        - Applications
      summary: Delete an application
      description: Only managers of the application, API Manager Administrators, or Organization Administrators with enabled delegated application management privileges, may delete applications.
      operationId: deleteApp_1
      parameters:
        - name: id
          in: path
          description: The ID of application to delete.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /applications/{id}/extclients/{objectId}:
    put:
      tags:
        - Applications
      summary: Updates an external client for the application
      description: Updates an external client for the application. External clients are used when authenticating the application through a 3rd party OAuth service
      operationId: updateExternalClient_1
      parameters:
        - name: id
          in: path
          description: The ID of application whose external client is to be updated.
          required: true
          schema:
            type: string
        - name: objectId
          in: path
          description: The external client entry to be updated.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalClient'
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
    delete:
      tags:
        - Applications
      summary: Delete an external client
      description: Deletes an external client. Deleting a mapping means that it will no longer be accepted for application authentication.
      operationId: deleteExternalClient_1
      parameters:
        - name: id
          in: path
          description: The ID of application whose external client is to be deleted.
          required: true
          schema:
            type: string
        - name: objectId
          in: path
          description: The ID of the external client entry to be deleted.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
  /applications/{id}/oauth/{clientId}:
    put:
      tags:
        - Applications
      summary: Updates an OAuth Credential for the application
      description: Updates an OAuth Credential for the application.
      operationId: updateOAuthCred_1
      parameters:
        - name: id
          in: path
          description: The ID of application whose OAuth credential is to be updated.
          required: true
          schema:
            type: string
        - name: clientId
          in: path
          description: The OAuth Credential ID to be updated.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      tags:
        - Applications
      summary: Delete an OAuth client ID and secret
      description: Deletes an OAuth client ID and secret. Deleting an OAuth client ID and secret means that it will no longer be accepted for OAuth application authentication.
      operationId: deleteOAuthKey_1
      parameters:
        - name: id
          in: path
          description: The ID of application whose OAuth Credential is to be deleted.
          required: true
          schema:
            type: string
        - name: clientId
          in: path
          description: The OAuth Client ID to be deleted.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /applications/{id}/permissions/{permId}:
    put:
      tags:
        - Applications
      summary: Modify a permission
      description: Add a new access-control entry to the application's ACL. Management privilege required.
      operationId: updatePermission_1
      parameters:
        - name: id
          in: path
          description: The application ID.
          required: true
          schema:
            type: string
        - name: permId
          in: path
          description: The permission ID.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PermissionDTO'
        '400':
          description: Bad Request
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      tags:
        - Applications
      summary: Remove a permission
      description: Remove an existing access-control entry from the application's ACL. Management privilege required.
      operationId: deletePermission_1
      parameters:
        - name: id
          in: path
          description: The application ID.
          required: true
          schema:
            type: string
        - name: permId
          in: path
          description: The permission ID.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /applications/{id}/oauthresource/{resourceId}:
    put:
      tags:
        - Applications
      summary: Updates a protected resource associate with an application, sets enabled to true/false
      description: An OAuth Protected resource associated with an application can be enabled or disabled with this method.
      operationId: updateProtectedResource_1
      parameters:
        - name: id
          in: path
          description: The ID of application requiring an updated OAuth protected resource.
          required: true
          schema:
            type: string
        - name: resourceId
          in: path
          description: The ID of the OAuth protected resource to update
          required: true
          schema:
            type: string
      requestBody:
        description: The updated OAuth protected resource
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OAuthResource'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuthResource'
        '204':
          description: No Content
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      tags:
        - Applications
      summary: Remove an OAuth protected resource from an application
      description: Removes the association between an application and an OAuth protected resource on the API Server. The application will no longer have the scope associated with the resource. Tokens issued prior to the removal will still be scoped for the resource.
      operationId: deleteProtectedResource_1
      parameters:
        - name: id
          in: path
          description: The ID of application whose protected resource is to be removed.
          required: true
          schema:
            type: string
        - name: resourceId
          in: path
          description: The uri of the OAuth protected resource to be disassociated from the application.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /applications/{id}/scope/{scopeId}:
    put:
      tags:
        - Applications
      summary: Updates a scope associated with an application, sets default to true/false
      description: An OAuth Scope associated with an application can be set or unset as a default scope with this method.
      operationId: updateAppScope_1
      parameters:
        - name: id
          in: path
          description: The ID of application requiring an updated OAuth protected resource.
          required: true
          schema:
            type: string
        - name: scopeId
          in: path
          description: The ID of the Application Scope to update
          required: true
          schema:
            type: string
      requestBody:
        description: The updated OAuth protected resource
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OAuthAppScope'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuthAppScope'
        '204':
          description: No Content
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      tags:
        - Applications
      summary: Remove an OAuth protected resource from an application
      description: Removes the association between an application and an OAuth protected resource on the API Server. The application will no longer have the scope associated with the resource. Tokens issued prior to the removal will still be scoped for the resource.
      operationId: deleteScope_1
      parameters:
        - name: id
          in: path
          description: The ID of application whose protected resource is to be removed.
          required: true
          schema:
            type: string
        - name: scopeId
          in: path
          description: The id of the Scope to be disassociated from the application.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /applications/{id}/oauth/{clientid}/newsecret:
    put:
      tags:
        - Applications
      summary: Updates an OAuth Credential for an application by generating a new secret
      description: Updates an OAuth Credential for an application by generating a new client secret.
      operationId: generateNewOAuthSecret_1
      parameters:
        - name: id
          in: path
          description: The ID of application whose OAuth credential is to be updated with a new secret
          required: true
          schema:
            type: string
        - name: clientid
          in: path
          description: The OAuth Credential ID to be updated with a new secret
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /applications/{id}/apis:
    get:
      tags:
        - Applications
      summary: Get the list of APIs that the application can access
      description: Get the list of APIs that the application can access.
      operationId: getApisAccess_1
      parameters:
        - name: id
          in: path
          description: The application ID.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/APIAccess'
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      tags:
        - Applications
      summary: Create a request for an application to access an API.
      description: Only API Manager Administrator, or an Organization Administrator of the application's organization with the correct privileges, or the application manager may create API access requests.
      operationId: requestApiAccess_2
      parameters:
        - name: id
          in: path
          description: The application ID.
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIAccess'
        '204':
          description: No Content
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
  /applications/{id}/availablescopes:
    get:
      tags:
        - Applications
      summary: Returns the scopes available to an application
      description: Returns the OAuth scopes available to  an application.
      operationId: getAvailableScopesForAppID_1
      parameters:
        - name: id
          in: path
          description: The ID of application whose OAuth scopes are to be returned.
          required: true
          schema:
            type: string
        - name: apiScope
          in: query
          description: The api scope
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: No Content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuthScope'
        '204':
          description: No Content
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /applications/{id}/image:
    get:
      tags:
        - Applications
      summary: Get the image for an application
      description: Get the JPEG image associated with an application.
      operationId: getImage_4
      parameters:
        - name: id
          in: path
          description: The ID of the application whose image is to be return
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      tags:
        - Applications
      summary: Adds a JPEG image to an application
      description: Adds a JPEG image to an application with a MultiPart POST
      operationId: postImage_4
      parameters:
        - name: id
          in: path
          description: The ID of the application whose image is being added
          required: true
          schema:
            type: string
        - name: type
          in: query
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '409':
          description: Conflict
        '413':
          description: Request Entity Too Large
        '500':
          description: Internal Server Error
  /applications/{id}/apis/{apiAccessId}:
    put:
      tags:
        - Applications
      summary: Updates access to an API for an application
      description: Updates access to an API for an application.  Only __enabled__ may be modified.
      operationId: updateApiAccess_2
      parameters:
        - name: id
          in: path
          description: The application ID.
          required: true
          schema:
            type: string
        - name: apiAccessId
          in: path
          description: The API access ID.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIAccess'
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      tags:
        - Applications
      summary: Deletes access to an API for an application
      description: Permanently deletes access to an API for an application.
      operationId: removeApiAccess_1
      parameters:
        - name: id
          in: path
          description: The application ID.
          required: true
          schema:
            type: string
        - name: apiAccessId
          in: path
          description: The API access ID.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /authorizations/{authzid}:
    delete:
      tags:
        - OAuth Authorizations
      summary: Delete the OAuth Authorization for the given authorization id.
      description: Admin or Resource Owner task to delete the given authorization id.
      operationId: deleteAuthorization_2
      parameters:
        - name: authzid
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /authorizations/owner/{subjectid}/application/{appid}:
    delete:
      tags:
        - OAuth Authorizations
      operationId: deleteAuthorization
      parameters:
        - name: subjectid
          in: path
          required: true
          schema:
            type: string
        - name: appid
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /authorizations:
    get:
      tags:
        - OAuth Authorizations
      summary: Retrieve all stored OAuth Authorizations for the logged in user.
      description: If user is a member of the admin group then all authorizations are returned. If not, then the logged in user's authorizations are returned.
      operationId: getAuthorizations_1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OAuthAuthorization'
        '400':
          description: Bad Request
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /metrics/fields:
    get:
      tags:
        - Metrics
      summary: Gets a list of metric field names available for summary and timeline queries.
      description: Retrieves a set of metric fields that may be used when querying or interpreting the summary and timeline reports.  The __metricType__ is the metric name.  The __aggreggateName__ is the metric name for the aggregated __metricType__.
      operationId: getMetricFields_1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricField'
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /metrics/reports/{type}/summary/{level}:
    get:
      tags:
        - Metrics
      summary: Gets a summary report for application usage
      operationId: getMetricSummaryPortal_1
      parameters:
        - name: type
          in: path
          description: The report type, either 'app' or 'api'
          required: true
          schema:
            type: string
        - name: level
          in: path
          description: The report level (0 or 1 for drill-through)
          required: true
          schema:
            type: integer
            format: int32
        - name: from
          in: query
          description: The starting date/time for the report.
          required: true
          schema:
            type: string
        - name: to
          in: query
          description: The end date/time for the report.
          required: true
          schema:
            type: string
        - name: client
          in: query
          description: Filter a specific client ID (multiple permitted).
          schema:
            type: array
            items:
              type: string
        - name: service
          in: query
          description: Filter a specific service name (multiple permitted).
          schema:
            type: array
            items:
              type: string
        - name: method
          in: query
          description: Filter a specific method.
          schema:
            type: string
        - name: organization
          in: query
          description: Filter a specific organziation.
          schema:
            type: string
        - name: reportsubtype
          in: query
          description: 'Define the report subtype. Allowed values are : ''original'', ''trafficAll'' or ''trafficSubset''. Defaults to ''original'' if absent'
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /metrics/reports/{type}/timeline/{level}/{metricType}:
    get:
      tags:
        - Metrics
      summary: Gets a timeline report for application usage
      description: Produces a timeline report for a __metricType__ over a specified time range.  The __from__ and __two__ parameters should be a URL encoded ISO-8601 combined date and time format (e.g. 2013-03-13T00%3A00%3A00Z).  The __metricType__ name is one of the types returned from [fields](#APIMetricsgetMetricFields).
      operationId: getMetricsTimeline_1
      parameters:
        - name: type
          in: path
          description: The report type, either 'app' or 'api'
          required: true
          schema:
            type: string
        - name: level
          in: path
          description: The report level (0 or 1 for drill-through)
          required: true
          schema:
            type: integer
            format: int32
        - name: from
          in: query
          description: The starting date/time for the report.
          required: true
          schema:
            type: string
        - name: to
          in: query
          description: The end date/time for the report.
          required: true
          schema:
            type: string
        - name: client
          in: query
          description: Filter a specific client ID (multiple permitted).
          schema:
            type: array
            items:
              type: string
        - name: service
          in: query
          description: Filter a specific service name (multiple permitted).
          schema:
            type: array
            items:
              type: string
        - name: method
          in: query
          description: Filter a specific method.
          schema:
            type: string
        - name: organization
          in: query
          description: Filter a specific organziation.
          schema:
            type: string
        - name: metricType
          in: path
          description: The metric type to query.
          required: true
          schema:
            type: string
        - name: reportsubtype
          in: query
          description: 'Define the report subtype. Allowed values are : ''original'', ''trafficAll'' or ''trafficSubset''. Defaults to ''original'' if absent'
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricTimeline'
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /migrate/applications/export/create:
    post:
      tags:
        - Migrate
      summary: Creates a set of export options associated with the current http session
      description: 'Creates a set of export options associated with the current http session. Options include the password used to encrypt the resulting export, export elements: apikeys, oauth & quotas, the filename of the export, and the list of application ids for inclusion in the export. The exported data can be retrieved subsequently with a GET request'
      operationId: exportCreate_1
      parameters:
        - name: CSRF-Token
          in: header
          description: CSRF Token Header
          required: true
          schema:
            type: string
        - name: APIMANAGERSESSION
          in: cookie
          description: API Manager Session Cookie
          required: true
          schema:
            type: string
        - name: APIMANAGERSTATIC
          in: cookie
          description: API Manager Static Cookie
          schema:
            type: string
      requestBody:
        description: The options for creating an application export file
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExportOptions'
        required: true
      responses:
        '204':
          description: No Content
        '403':
          description: It will return 403 Forbidden if the caller is not an ADMIN
        '500':
          description: Internal Server Error
  /migrate/applications/export/json:
    post:
      tags:
        - Migrate
      summary: Creates an export of applications based on the export options posted as a JSON object
      description: 'Creates an export file based on options including the password used to encrypt the resulting export, export elements: apikeys, oauth & quotas, the filename of the export, and the list of application ids for inclusion in the export. The exported data is returned as part of the response body'
      operationId: exportJson_1
      requestBody:
        description: Export options
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExportOptions'
        required: true
      responses:
        '200':
          description: OK
        '403':
          description: It will return 403 Forbidden if the caller is not an ADMIN
        '500':
          description: Internal Server Error
  /migrate/applications/export/download:
    get:
      tags:
        - Migrate
      summary: Exports Application data for migration to other API Gateways
      description: Retrieves the export options associated with the current user HTTP session and creates a stream or returns the exported data in response body.
      operationId: exportSelected_2
      parameters:
        - name: CSRF-Token
          in: header
          description: CSRF Token Header
          required: true
          schema:
            type: string
        - name: APIMANAGERSESSION
          in: cookie
          description: API Manager Session Cookie
          required: true
          schema:
            type: string
        - name: APIMANAGERSTATIC
          in: cookie
          description: API Manager Static Cookie
          schema:
            type: string
        - name: filename
          in: query
          description: Optional. If present this method will return an octet stream with an file attachment of the same name
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '403':
          description: It will return 403 Forbidden if the caller is not an ADMIN
        '500':
          description: Internal Server Error
  /migrate/applications/export:
    post:
      tags:
        - Migrate
      summary: Creates an export of applications based on the export options posted in a form data
      description: 'Creates an export file based on options including the password used to encrypt the resulting export, export elements: apikeys, oauth & quotas, the filename of the export, and the list of application ids for inclusion in the export. The exported data is returned as part of the response body'
      operationId: exportSelected
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
                - apikeys
                - oauth
                - quota
              type: object
              properties:
                apikeys:
                  type: string
                  description: True/False. Include/Exclude api keys
                oauth:
                  type: string
                  description: True/False. Include/Exclude oauth credentials
                quota:
                  type: string
                  description: True/False. Include/Exclude quotas, if available
                filename:
                  type: string
                  description: The name of the export file
                password:
                  type: string
                  description: The password used to encrypt the exported file
                appIds:
                  type: array
                  items:
                    type: string
                    description: The list of identifiers for the applications to be exported
      responses:
        '200':
          description: OK
        '403':
          description: It will return 403 Forbidden if the caller is not an ADMIN
        '500':
          description: Internal Server Error
  /migrate/applications/import:
    post:
      tags:
        - Migrate
      summary: Imports applications to the API Gateway
      description: Imports a set of applications and assocated API Keys and OAuth credentials, encrypted files require a decryption password
      operationId: importApplications_1
      parameters:
        - name: type
          in: query
          description: This value should be unset
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
                - file
                - userId
              type: object
              properties:
                file:
                  type: string
                  description: The file containing application data to be imported
                  format: binary
                password:
                  type: string
                  description: Password to be used for decryption
                organizationId:
                  type: string
                  description: The Organization to associate the imported applications with. If applicable, for Core OAuth this parameter will be ignored
                userId:
                  type: string
                  description: The user to associate the applications with. Default is the API Admin
      responses:
        '200':
          description: OK
        '403':
          description: It will return 403 Forbidden if the caller is not an ADMIN
        '500':
          description: Internal Server Error
  /organizations:
    get:
      tags:
        - Organizations
      summary: List all organizations
      description: |-
        Get the list of organizations that are visible to the authenticated user.  Only API Administrators may list all organizations, all other users will see their organization.  The list of organizations can be filtered using the expression: field=__field__&op=__op__&value=__value__.  Optionally, you can add a logical operation for all expressions, using the form: &lop=AND|OR.  By default, the logical operation is AND.  Multiple expression filters can be used, specifying field, op, and value for each filter. The __field__ is one of:

        apiid
        :  Matches the organization if the organization is using the API, specified by ID

        description
        :  The organization's description

        email
        :  The organization's contact email address

        enabled
        :  The enabled state of the organization, one of: enabled, disabled

        createdOn
        :  The date the organization was created on, time in ms, e.g.: 1372755998542

        name
        :  The name of the organization

        phone
        :  The organization's contact phone

        The __op__ is an operation and is one of:

        eq
        :  Equal

        ne
        :  Not equal

        gt
        :  Greater than

        lt
        :  Less than

        ge
        :  Greater than or equal

        le
        :  Less than or equal

        like
        :  Like

        gele
        :  Greater than or equal to, and less than or equal to; the __value__ should be a lower-minimum and upper-maximum separated by comma, e.g: value=5,10

        The __value__ will be compared against the __field__, according to the supplied __op__. 
      operationId: getOrganizations_1
      parameters:
        - name: field
          in: query
          description: Filter field name.
          schema:
            type: array
            items:
              type: string
        - name: op
          in: query
          description: Filter operation.
          schema:
            type: array
            items:
              type: string
        - name: value
          in: query
          description: Filter value
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Organization'
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
    post:
      tags:
        - Organizations
      summary: Creates a new organization
      description: Creates a new organization.  Only API Administrators may create organizations. Data posted in this request may include custom properties defined in app.config
      operationId: createOrganization_1
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        '400':
          description: Bad Request
        '413':
          description: Request Entity Too Large
        '500':
          description: Internal Server Error
  /organizations/{id}/tokens:
    get:
      tags:
        - Organizations
      summary: Get registration codes for an organization
      description: Retrieves the registration codes for an organization.
      operationId: getRegistrationTokens_1
      parameters:
        - name: id
          in: path
          description: The organization ID whos tokens are to be returned.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationToken'
        '500':
          description: Internal Server Error
    post:
      tags:
        - Organizations
      summary: Create a registration code
      description: Create a registration code for self service onboarding of users to the organization
      operationId: createRegistrationToken_1
      parameters:
        - name: id
          in: path
          description: The organization ID to be associated with the registration code.
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationToken'
        '500':
          description: Internal Server Error
  /organizations/{id}/apis/{apiAccessId}:
    put:
      tags:
        - Organizations
      summary: Updates access to an API for an organization
      description: Updates access to an API for an organization.  Only __enabled__ may be modified, and disabling access will also disable access to all applications that may be using it.
      operationId: updateApiAccess
      parameters:
        - name: id
          in: path
          description: The organization ID.
          required: true
          schema:
            type: string
        - name: apiAccessId
          in: path
          description: The API access ID.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIAccess'
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      tags:
        - Organizations
      summary: Deletes access to an API for an organization
      description: Permanently deletes access to an API for an organization.  Deleting API access will also delete API access to any application.
      operationId: deleteApiAccess_1
      parameters:
        - name: id
          in: path
          description: The organization ID.
          required: true
          schema:
            type: string
        - name: apiAccessId
          in: path
          description: The API access ID.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /organizations/{id}:
    get:
      tags:
        - Organizations
      summary: Get an organization
      description: Retrieves the details of an organization.
      operationId: getOrganization_1
      parameters:
        - name: id
          in: path
          description: The organization ID to be returned.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      tags:
        - Organizations
      summary: Update the details of an organization
      description: Updates an organization.
      operationId: updateOrganization_1
      parameters:
        - name: id
          in: path
          description: The organization ID to update.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        '400':
          description: Bad Request
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      tags:
        - Organizations
      summary: Delete an organization
      description: Deletes an organization. Deleting an organization will result in all users and associated applications being deleted.
      operationId: deleteOrganization_1
      parameters:
        - name: id
          in: path
          description: The organization ID to delete.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /organizations/{id}/tokens/{token}:
    get:
      tags:
        - Organizations
      summary: Get registration code
      description: Retrieves the registration code.
      operationId: getRegistrationToken_1
      parameters:
        - name: id
          in: path
          description: The organization ID associated with the registration code.
          required: true
          schema:
            type: string
        - name: token
          in: path
          description: The registration code to be returned.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationToken'
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      tags:
        - Organizations
      summary: Update a registration code
      description: Update a registration code for self service onboarding of users to the organization
      operationId: updateRegistrationToken_1
      parameters:
        - name: id
          in: path
          description: The organization ID to be associated with the registration code.
          required: true
          schema:
            type: string
        - name: token
          in: path
          description: The token to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationToken'
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      tags:
        - Organizations
      summary: Delete the registration code
      description: Delete the registration code.
      operationId: deleteRegistrationToken_1
      parameters:
        - name: id
          in: path
          description: The organization ID associated with the registration code.
          required: true
          schema:
            type: string
        - name: token
          in: path
          description: The registration code to be deleted.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /organizations/{id}/apis:
    get:
      tags:
        - Organizations
      summary: Get the list of approved APIs for the organization
      description: Get the list of aproved APIs for the organization
      operationId: getApprovedApisAccess_1
      parameters:
        - name: id
          in: path
          description: The organization ID who's approved APIs are required.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIAccess'
        '500':
          description: Internal Server Error
    post:
      tags:
        - Organizations
      summary: Grants access to an API for an organization.
      description: Grants access to an API for an organization.  Only the API Admin may call this method.
      operationId: requestApiAccess
      parameters:
        - name: id
          in: path
          description: The organization ID requesting access to an API.
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIAccess'
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /organizations/{id}/image:
    get:
      tags:
        - Organizations
      summary: Get the image for an organization
      description: Returns the jpeg image associated with an organization.
      operationId: getImage
      parameters:
        - name: id
          in: path
          description: The organization ID whos image is to be returned
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      tags:
        - Organizations
      summary: Set the image for an organization
      description: Set the jpeg image to be associated with an organization.
      operationId: postImage
      parameters:
        - name: id
          in: path
          description: The organization ID whos image is to be set
          required: true
          schema:
            type: string
        - name: type
          in: query
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
        '403':
          description: Forbidden
        '413':
          description: Request Entity Too Large
        '500':
          description: Internal Server Error
  /remotehosts:
    get:
      tags:
        - API Manager Services
      summary: Returns a list of remote hosts
      description: Returns a list of API Manager-registered remote hosts.
      operationId: getRemoteHosts_1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RemoteHost'
        '403':
          description: Forbidden
    post:
      tags:
        - API Manager Services
      summary: Creates a new remote host
      description: Creates a new API Manager-regsitered remote host. Dynamically updates the API Gateway runtime so that the remote host is available.
      operationId: addRemoteHost_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoteHost'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteHost'
        '400':
          description: Bad Request
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /license:
    get:
      tags:
        - API Manager Services
      summary: Checks that the API Manager has a valid license
      description: Returns an API Manager license configuration object.  Does not require authentication.
      operationId: checkLicense_1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LicenseConfig'
  /remotehosts/{id}:
    put:
      tags:
        - API Manager Services
      summary: Updates a remote host
      description: Updates an API Manager-registered remote host. Dynamically updates the API Gateway runtime so that the new remote host settings are available.
      operationId: updateRemoteHost_1
      parameters:
        - name: id
          in: path
          description: The remote host identifier.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoteHost'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteHost'
        '400':
          description: Bad Request
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    delete:
      tags:
        - API Manager Services
      summary: Deletes a remote host.
      description: Deletes an API Manager-registered remote host. Dynamically removes the remote host from the API Gateway runtime.
      operationId: deleteRemoteHost_1
      parameters:
        - name: id
          in: path
          description: The remote host identifier.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
        '403':
          description: Forbidden
  /alerts:
    get:
      tags:
        - API Manager Services
      summary: Gets the alerts configured for the API Manager
      description: Gets the alerts configured for the API Manager that shows which alerts are enabled/disabled for the application.  Only the API Administrator may call this method.
      operationId: getAlerts_1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlertConfig'
        '403':
          description: Forbidden
    post:
      tags:
        - API Manager Services
      summary: Updates the API Manager alerts configuration
      description: Updates the API Manager alerts configuration.  Only the API Administrator may call this method.
      operationId: updateAlertConfig_1
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlertConfig'
        '403':
          description: Forbidden
  /appinfo:
    get:
      tags:
        - API Manager Services
      summary: Gets API Manager feature information.
      description: Returns an API Manager configuration object describing the application.
      operationId: getAppInfo_1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Config'
  /certinfo:
    post:
      tags:
        - API Manager Services
      summary: Extracts certificate information from the supplied data
      description: Extracts certificate information from the supplied data.
      operationId: getCertInfo_1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CACert'
        '400':
          description: Bad Request
  /certinfoFromUrl:
    post:
      tags:
        - API Manager Services
      summary: Extracts certificate information from the supplied data
      description: Extracts certificate information from the supplied data.
      operationId: getCertInfoFromUrl_1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CACert'
        '400':
          description: Bad Request
  /config:
    get:
      tags:
        - API Manager Services
      summary: Gets API Manager configuration
      description: Returns an API Manager configuration object.
      operationId: getConfig_1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Config'
        '403':
          description: Forbidden
    put:
      tags:
        - API Manager Services
      summary: Updates the API Manager configuration
      description: Updates the API Manager configuration.  Only the API Administrator may call this method.
      operationId: updateConfig_1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Config'
        '403':
          description: Forbidden
  /filedata:
    post:
      tags:
        - API Manager Services
      summary: Returns the DataURI representation of the uploaded file
      description: Returns the DataURI representation of the uploaded file.
      operationId: getFileData_1
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
  /service-discovery/{instance}/{type}:
    post:
      tags:
        - API Manager Services
      summary: Returns a list of services hosted on the specified Gateway instance
      description: 'Returns a list of services hosted on the specified Gateway instance.  __type__ is one of: rest, wsdl.'
      operationId: getGatewayServices_1
      parameters:
        - name: instance
          in: path
          required: true
          schema:
            type: string
        - name: type
          in: path
          description: 'The type of service to return. Possible values are: ''rest'', ''wsdl'''
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                host:
                  type: string
                port:
                  type: string
                username:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Swagger'
        '400':
          description: Bad Request
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /oauthclientprofiles:
    get:
      tags:
        - API Manager Services
      summary: Get a list of OAuth profiles for use in backend API authorisation
      description: Return a list of OAuth Client Profiles for use in authorising API access to backend APIs.
      operationId: getOAuthClientProfiles_1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReferencedEntity'
        '400':
          description: Bad Request
  /policies:
    get:
      tags:
        - API Manager Services
      summary: Gets a list of the specified policies
      description: 'Returns the list of policies (of the specified type) that are available to Portal-registered APIs.  __type__ is one of: faulthandler, globalrequest, globalresponse, request, routing, response, promotion, authentication or token-info.'
      operationId: getPolicies_1
      parameters:
        - name: type
          in: query
          description: 'The type of policy to return. Possible values are: ''faulthandler'', ''globalrequest'', ''globalresponse'', ''request'', ''routing'', ''response'', ''authentication'', ''oauthtokeninfo'', ''promotion'''
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReferencedEntity'
        '400':
          description: Bad Request
  /listeners:
    get:
      tags:
        - API Manager Services
      summary: Gets the API Manager listeners
      description: Returns a list of API Manager listeners.
      operationId: getPortalListeners_1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PortalTrafficListener'
        '403':
          description: Forbidden
  /sysconfig:
    get:
      tags:
        - API Manager Services
      summary: Gets API Manager system configuration
      description: Returns an API Manager system configuration object.
      operationId: getSystemApiConfig_1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemConfig'
        '403':
          description: Forbidden
    put:
      tags:
        - API Manager Services
      summary: Update API Manager system configuration
      description: Returns an API Manager system configuration object.
      operationId: updateSystemApiConfig_1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemConfig'
        '403':
          description: Forbidden
  /title:
    get:
      tags:
        - API Manager Services
      summary: Gets the API Manager's title
      description: Returns the API Manager title.  Does not require authentication.
      operationId: getTitle_1
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /tokenstores:
    get:
      tags:
        - API Manager Services
      summary: Gets a list of Token Stores
      description: Returns a list of Token Stores to be used by OAuth Security Devices for inbound security on portal-registered APIs.
      operationId: getTokenStores_1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReferencedEntity'
        '400':
          description: Bad Request
  /topology:
    post:
      tags:
        - API Manager Services
      summary: Retrieves the Topology from the specified Admin Node Manager
      description: Retrieves the Topology from the specified Admin Node Manager
      operationId: getTopology_1
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
                - host
                - password
                - port
                - username
              type: object
              properties:
                host:
                  type: string
                  description: The host on which the Admin Node Manager is running
                port:
                  type: string
                  description: The Admin Node Manager management port.
                username:
                  type: string
                  description: Username to use for Admin Node Manager authentication .
                password:
                  type: string
                  description: Password to use for Admin Node Manager authentication.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Topology'
        '400':
          description: Bad Request
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /proxies/{id}:
    get:
      tags:
        - API Proxy Registration
      summary: Gets a frontend API by ID.
      operationId: getApi_2
      parameters:
        - name: id
          in: path
          description: The frontend API identifier.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualizedAPI'
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    put:
      tags:
        - API Proxy Registration
      summary: Updates an API proxy.
      description: Updates an API proxy definition.  Data in this request may include custom properties defined in app.config.
      operationId: updateApi_2
      parameters:
        - name: id
          in: path
          description: The frontend API identifier.
          required: true
          schema:
            type: string
      requestBody:
        description: The virtualized API to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VirtualizedAPI'
        required: true
      responses:
        '204':
          description: No Content
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    delete:
      tags:
        - API Proxy Registration
      summary: Deletes an API proxy.
      description: Deletes an API proxy, removing all API access in the process.
      operationId: deleteApi_2
      parameters:
        - name: id
          in: path
          description: The frontend API identifier.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /proxies/{id}/operations/{operationId}:
    get:
      tags:
        - API Proxy Registration
      summary: Gets an API method by ID.
      operationId: getApiMethod_1
      parameters:
        - name: id
          in: path
          description: The frontend API identifier.
          required: true
          schema:
            type: string
        - name: operationId
          in: path
          description: The frontend API method identifier.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualizedAPIMethod'
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    put:
      tags:
        - API Proxy Registration
      summary: Updates an API proxy operation.
      operationId: updateApiMethod_1
      parameters:
        - name: id
          in: path
          description: The frontend API identifier.
          required: true
          schema:
            type: string
        - name: operationId
          in: path
          description: The frontend API method identifier.
          required: true
          schema:
            type: string
      requestBody:
        description: The virtualized API to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VirtualizedAPIMethod'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualizedAPIMethod'
        '400':
          description: Bad Request
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    delete:
      tags:
        - API Proxy Registration
      summary: Deletes an API method by ID.
      operationId: deleteMethod_2
      parameters:
        - name: id
          in: path
          description: The frontend API identifier.
          required: true
          schema:
            type: string
        - name: operationId
          in: path
          description: The frontend API method identifier.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /proxies/{id}/deprecate:
    post:
      tags:
        - API Proxy Registration
      summary: Deprecates the API.
      description: Deprecates the API.
      operationId: deprecateApi_1
      parameters:
        - name: id
          in: path
          description: The frontend API identifier.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                retirementDate:
                  type: string
                  description: Optional API retirement date specified in supported ISO-8601 format.
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualizedAPI'
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /proxies/export/{id}:
    get:
      tags:
        - API Proxy Registration
      summary: Downloads an API export.
      description: The API export is produced from [/exportApis](APIProxyRegistration.html#APIProxyRegistrationexportApis). If __filename__ is supplied, the download will use it as the `Content-Disposition` filename attachment.
      operationId: exportApi_1
      parameters:
        - name: id
          in: path
          description: The export identifier.
          required: true
          schema:
            type: string
        - name: filename
          in: query
          description: The export will be downloaded using a Content-Dispostion using the supplied filename
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIPromotion'
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /proxies/export:
    post:
      tags:
        - API Proxy Registration
      summary: Creates an API export.
      description: Creates an export for use in promoting the API to a new environment.  The export contains the frontend [VirtualizedAPI](VirtualizedAPI.html), their settings, and all backend [APIDefinition](APIDefinition.html) that are required for the frontend API. If **password** is supplied, the exported file will be encrypted with the password. If successful, returns **201 Created**, and the HTTP `Location` header contain the of the URL of the export. The export is temporary, and may only be downloaded once.
      operationId: exportApis_1
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
                - filename
                - id
                - password
              type: object
              properties:
                id:
                  type: array
                  description: The frontend API identifier(s) to export.
                  items:
                    type: string
                    description: The frontend API identifier(s) to export.
                password:
                  type: string
                  description: Encrypts the list of API using the password.
                filename:
                  type: string
                  description: Optional filename to use in response.
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualizedAPI'
        '400':
          description: Bad Request
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /proxies:
    get:
      tags:
        - API Proxy Registration
      summary: Queries a list of frontend API.
      description: |-
        Returns a list of API that are visible to the authenticated user. The list of API can be filtered using the expression: field=__field__&op=__op__&value=__value__. Optionally, you can add a logical operation for all expressions, using the form: &lop=AND|OR. By default, the logical operation is AND. Multiple expression filters can be used, specifying field, op, and value for each filter. The __field__ is one of:

        name
        :      The name of the API

        apiid
        :      Matches the API if the API is virtualized from the specified backend API

        createdOn
        :      The date the virtualized API was created on, time in ms, e.g.: 1372755998542

        deprecated
        :      The deprecated state of the API, one of: true or false

        retired
        :      The retired state of the API, one of: true or false

        state
        :      The API's state, one of: unpublished, pending, or published

        path
        :      The path that services this virtualized API.

        The __op__ is an operation and is one of:

        eq
        :      Equal

        ne
        :      Not equal

        gt
        :      Greater than

        lt
        :      Less than

        ge
        :      Greater than or equal

        le
        :      Less than or equal

        like
        :      Like

        gele
        :      Greater than or equal to, and less than or equal to; the __value__ should be a lower-minimum and upper-maximum separated by comma, e.g: value=5,10

        The __value__ will be compared against the __field__, according to the supplied __op__.
      operationId: getAllApis_2
      parameters:
        - name: field
          in: query
          description: Filter field name.
          schema:
            type: array
            items:
              type: string
        - name: op
          in: query
          description: Filter operation.
          schema:
            type: array
            items:
              type: string
        - name: value
          in: query
          description: Filter value
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VirtualizedAPI'
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    post:
      tags:
        - API Proxy Registration
      summary: Creates a new API proxy from a backend API.
      description: The [VirtualizedAPI apiId](VirtualizedAPI.html#apiId) is required. Only one [VirtualizedAPI](VirtualizedAPI.html) can be created per [VirtualizedAPI apiId]. If creating the API as an API administrator, the [VirtualizedAPI organizationId](VirtualizedAPI.html#organizationId) must also be specified.
      operationId: virtualizeApi_1
      requestBody:
        description: The frontend API to create.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VirtualizedAPI'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualizedAPI'
        '400':
          description: Bad Request
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /proxies/{id}/operations:
    get:
      tags:
        - API Proxy Registration
      summary: Gets a list of methods that are avilable to the API proxy.
      operationId: getApiMethods_1
      parameters:
        - name: id
          in: path
          description: The frontend API identifier.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualizedAPIMethod'
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /proxies/{id}/image:
    get:
      tags:
        - API Proxy Registration
      summary: Gets the image for the API.
      description: Returns the jpeg image associated with the API.
      operationId: getImage_1
      parameters:
        - name: id
          in: path
          description: The frontend API identifier.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    post:
      tags:
        - API Proxy Registration
      summary: Set the image for the frontend API.
      description: Set the jpeg image to be associated with the API.
      operationId: postImage_1
      parameters:
        - name: id
          in: path
          description: The frontend API identifier.
          required: true
          schema:
            type: string
        - name: type
          in: query
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
        '403':
          description: Forbidden
        '413':
          description: Request Entity Too Large
        '500':
          description: Internal Server Error
  /proxies/grantaccess:
    post:
      tags:
        - API Proxy Registration
      summary: Macro function to grant API access.
      description: Function to macro-apply access to selected API. The access can be granted to organizations or entities having access to specified API. If **action** is _all_orgs_, access will be granted to all organizations; if **action** is _orgs_, access will be granted to the organization(s) specified by **grantOrganizations**; if **action** is _orgs\_with\_apis_, access will be granted to the organizations with access to the apis specified by **grantApis**.
      operationId: grantAccess_1
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
                - action
                - apiId
                - grantApiId
                - grantOrgId
              type: object
              properties:
                action:
                  type: string
                  description: 'Grant action to perform. Possible values are: all\_orgs, orgs, and orgs\_with\_apis.'
                apiId:
                  type: array
                  description: List of API ID to which access will be granted.
                  items:
                    type: string
                    description: List of API ID to which access will be granted.
                grantOrgId:
                  type: array
                  description: List of target organization ID to which access to _apiId_ will be granted (action is _orgs_)
                  items:
                    type: string
                    description: List of target organization ID to which access to _apiId_ will be granted (action is _orgs_)
                grantApiId:
                  type: array
                  description: List of API ID to which access to to _apiId_ will be granted (action is _orgs\_with\_apis_).
                  items:
                    type: string
                    description: List of API ID to which access to to _apiId_ will be granted (action is _orgs\_with\_apis_).
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /proxies/import:
    post:
      tags:
        - API Proxy Registration
      summary: Imports a previously exported API.
      description: Imports API, previously exported using [/exportApis](APIProxyRegistration.html#APIProxyRegistrationexportApis). If the API was exported using a password, then the file is encrypted, and a **password** argument must be provided to decrypt. The import will create  [VirtualizedAPI](VirtualizedAPI.html), their settings, and all backend [APIDefinition](APIDefinition.html) necessary to support the frontend API. This method is similar to [/importFromUrl](APIProxyRegistration.html#APIProxyRegistrationimportFromUrl), save that this method supports traditional form-based file upload, using `multipart/form-data`.
      operationId: importApisFromFile_2
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
                - file
                - organizationId
                - password
              type: object
              properties:
                organizationId:
                  type: string
                  description: The organization identifier.
                password:
                  type: string
                  description: Optional password to decrypt the import file.
                file:
                  type: object
                  description: The data file to import.
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /proxies/importFromUrl:
    post:
      tags:
        - API Proxy Registration
      summary: Imports a previously exported API.
      description: Imports API, previously exported using [/exportApis](APIProxyRegistration.html#APIProxyRegistrationexportApis). If the API was exported using a password, then the file is encrypted, and a **password** argument must be provided to decrypt. The import will create  [VirtualizedAPI](VirtualizedAPI.html), their settings, and all backend [APIDefinition](APIDefinition.html) necessary to support the frontend API. The **url** should be a [data URI scheme](http://en.wikipedia.org/wiki/Data_URI_scheme).
      operationId: importApisFromUrl_1
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
                - organizationId
                - password
                - url
              type: object
              properties:
                organizationId:
                  type: string
                  description: The organization identifier.
                url:
                  type: string
                  description: The data URI.
                password:
                  type: string
                  description: Optional password to decrypt the import file.
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /proxies/promote:
    post:
      tags:
        - API Proxy Registration
      summary: Invokes the internal API promotion policy for the specified API.
      description: In API Manager, API promotion must first be enabled in Settings. Also, in Policy Studio (Server Settings -> API Manager -> API Promotion) a promotion policy must be selected. By default a sample promotion policy is installed
      operationId: promoteApis_1
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
                - apiId
              type: object
              properties:
                apiId:
                  type: array
                  description: The frontend API identifier(s) to promote
                  items:
                    type: string
                    description: The frontend API identifier(s) to promote
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /proxies/{id}/publish:
    post:
      tags:
        - API Proxy Registration
      summary: Publish the API.
      description: If called by an API Administrator, then the API state will be _published_, otherwise the API state will be _pending_, and an email notification will be sent to the API Administrators, notifying them of the event. Optionally, on publishing, a new **name** for the API may be specified.  Similarly, an optional **vhost** may be specified. The **vhost** is an externally resolvable virtual host from which the API will be accessed.
      operationId: publishApi_1
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            description: The frontend API identifier.
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name on which to publish this API.
                vhost:
                  type: string
                  description: The optional virtual host on which to publish this API.
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualizedAPI'
        '400':
          description: Bad Request
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /proxies/{id}/undeprecate:
    post:
      tags:
        - API Proxy Registration
      summary: Undeprecates the API.
      description: Only an API Administrator may undeprecate an API, and only _published_ API, that are deprecated, may be undeprecated.
      operationId: undeprecateApi_1
      parameters:
        - name: id
          in: path
          description: The frontend API identifier.
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualizedAPI'
        '400':
          description: Bad Request
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /proxies/{id}/unpublish:
    post:
      tags:
        - API Proxy Registration
      summary: Unpublish the API.
      description: Only an API Administrator may unpublish an API.  When an API is _unpublished_, all access to the API is revoked from all applications, and all organizations, save the API development organization that owns the API.
      operationId: unpublishApi_1
      parameters:
        - name: id
          in: path
          description: The frontend API identifier.
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualizedAPI'
        '400':
          description: Bad Request
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /proxies/upgrade/{id}:
    post:
      tags:
        - API Proxy Registration
      summary: Upgrades an existing frontend API to a newer frontend API.
      description: During an API lifecycle, it is necessary to upgrade users to use a newer frontend API. The idea being that the old frontend API should be phased-out, and developers should move their applications to use the newer frontend API. This method assigns all organizations and applications the same access to the new frontend API (identified by **upgradeApiId**) that they have to the old API (identified by **id**). Optionally, the old frontend API may be deprecated or retired using **deprecate**, **retire**, or scheduled to be retired using **retirementDate**. If specified, the **retirementDate** should be in the ISO-8601 format of yyyy-MM-ddTHH:mm:ssZ (e.g. 2015-01-01T12:00:00Z).
      operationId: upgradeApi_1
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
                - deprecate
                - retire
                - retirementDate
                - upgradeApiId
              type: object
              properties:
                upgradeApiId:
                  type: string
                  description: The id of the frontend API which will be used to upgrade this virtualized API
                deprecate:
                  type: boolean
                  description: Specifies whether or not the API being upgraded should be deprecated
                retire:
                  type: boolean
                  description: Specifies whether or not the API being upgraded should be retired
                retirementDate:
                  type: string
                  description: Specifies the retirement date of the the API being upgraded if its being retired
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /quotas:
    get:
      tags:
        - Quotas
      summary: Returns all quotas
      description: This method may be called by any member of the Portal, however only the API Administrator may retrieve the system quota.
      operationId: getAllQuotas_1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/QuotaDTO'
        '204':
          description: No Content
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      tags:
        - Quotas
      summary: Creates a new quota
      description: Creates a new quota.  Only API Administrators may create quotas.
      operationId: createQuota
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuotaDTO'
        '500':
          description: Internal Server Error
  /quotas/{id}:
    get:
      tags:
        - Quotas
      summary: Returns the quota with the given ID
      description: Returns a quota.  This method may be called by any member of the Portal, however, only API Administrators may retrieve the system quota.
      operationId: getQuota
      parameters:
        - name: id
          in: path
          description: The quota ID to retrieve.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuotaDTO'
        '204':
          description: No Content
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      tags:
        - Quotas
      summary: Updates a quota
      description: Updates an existing quota. Only API Administrators may update quotas.
      operationId: updateQuota
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuotaDTO'
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      tags:
        - Quotas
      summary: Deletes a quota
      description: Deletes a quota.  Only API Administrators may update quotas.  Default system and application quotas may not be deleted.
      operationId: deleteQuota
      parameters:
        - name: id
          in: path
          description: The quota ID to delete.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /apirepo:
    get:
      tags:
        - API Repository
      summary: Get the list of API
      description: |+
        Get the list of API from the API repository. The list of API can be filtered using the expression: field=__field__&op=__op__&value=__value__.  Optionally, you can add a logical operation for all expressions, using the form: &lop=AND|OR.  By default, the logical operation is AND.  Multiple expression filters can be used, specifying field, op, and value for each filter. The __field__ is one of:

        id
        :    Matches the API by ID

        name
        :    Matches the API by name

        description
        :    Matches the API by description

        version
        :    Matches the API by version

        createdOn
        :      The date the backend API was created/imported on, time in ms, e.g.: 1372755998542

        resourcePath
        :      Matches the API by resourcePath

        basePath
        :      Matches the API by basePath

        organization
        :      Matches the API by it's organization identifier

        The __op__ is an operation and is one of:

        eq
        :    Equal

        ne
        :    Not equal

        gt
        :     Greater than

        lt
        :     Less than

        ge
        :     Greater than or equal

        le
        :     Less than or equal

        like
        :    Like

        gele
        :     Greater than or equal to, and less than or equal to; the __value__ should be a lower-minimum and upper-maximum separated by comma, e.g: value=5,10

        The __value__ will be compared against the __field__, according to the supplied __op__.

      operationId: getAllApis
      parameters:
        - name: field
          in: query
          description: Filter field name.
          schema:
            type: array
            items:
              type: string
        - name: op
          in: query
          description: Filter operation.
          schema:
            type: array
            items:
              type: string
        - name: value
          in: query
          description: Filter value
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIDefinition'
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/APIDefinition'
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    post:
      tags:
        - API Repository
      summary: Create an API definition
      description: When creating an API, the __name__ and __basePath__ are required.
      operationId: createApi_1
      requestBody:
        description: The API resource to create.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/APIDefinition'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIDefinition'
        '400':
          description: Bad Request
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /apirepo/importFromUrl:
    post:
      tags:
        - API Repository
      summary: Create an API by loading a file from URL.
      description: Imports an API definition from a valid standard Swagger, WSDL or WADL definition from the specified __url__.  It is possible to supply an optional __username__ and __password__ if the __url__ requires HTTP Basic authentication.  On import, the original API definition is retained, but the API is converted to an internal format for processing. The API name currently defaults to the filename but this will be deprecated in a future release. The name parameter should be used to name the API and will be required in a future release.
      operationId: createApiFromUrl_1
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
                - organizationId
                - type
                - url
              type: object
              properties:
                organizationId:
                  type: string
                  description: The API development organization ID that owns the import.
                name:
                  type: string
                  description: The name of the API.
                fileName:
                  type: string
                  description: The file name of the import.
                type:
                  type: string
                  description: 'The type of import, one of: swagger, wadl.'
                url:
                  type: string
                  description: The URL to import.
                username:
                  type: string
                  description: HTTP Basic username to use for connection.
                password:
                  type: string
                  description: HTTP Basic password to use for connection.
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIDefinition'
        '400':
          description: Bad Request
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /apirepo/{id}/methods:
    get:
      tags:
        - API Repository
      summary: Queries the list of API methods
      description: |+
        Get the list of API methods from the API repository.  The list of methods can be filtered using the expression: field=__field__&op=__op__&value=__value__.  Optionally, you can add a logical operation for all expressions, using the form: &lop=AND|OR.  By default, the logical operation is AND.  Multiple expression filters can be used, specifying field, op, and value for each filter. The __field__ is one of:

        id
        :    Matches the API by ID

        name
        :    Matches the API by name

        The __op__ is an operation and is one of:

        eq
        :    Equal

        ne
        :    Not equal

        gt
        :     Greater than

        lt
        :     Less than

        ge
        :     Greater than or equal

        le
        :     Less than or equal

        like
        :    Like

        gele
        :     Greater than or equal to, and less than or equal to; the __value__ should be a lower-minimum and upper-maximum separated by comma, e.g: value=5,10

        The __value__ will be compared against the __field__, according to the supplied __op__.

      operationId: getMethods_1
      parameters:
        - name: field
          in: query
          description: Filter field name.
          schema:
            type: array
            items:
              type: string
        - name: op
          in: query
          description: Filter operation.
          schema:
            type: array
            items:
              type: string
        - name: value
          in: query
          description: Filter value
          schema:
            type: array
            items:
              type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Method'
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    post:
      tags:
        - API Repository
      summary: Create an API method
      operationId: createMethod_1
      parameters:
        - name: id
          in: path
          description: The API identifier to create a method.
          required: true
          schema:
            type: string
      requestBody:
        description: The API identifier to create a method.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Method'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Method'
        '400':
          description: Bad Request
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /apirepo/{id}:
    get:
      tags:
        - API Repository
      summary: Get an API by ID
      operationId: getApi
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIDefinition'
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    put:
      tags:
        - API Repository
      summary: Updates an API
      operationId: updateApi
      parameters:
        - name: id
          in: path
          description: The API identifier.
          required: true
          schema:
            type: string
      requestBody:
        description: The API resource to update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/APIDefinition'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIDefinition'
        '400':
          description: Bad Request
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    delete:
      tags:
        - API Repository
      summary: Deletes an API.
      description: Deletes a backend API.
      operationId: deleteApi
      parameters:
        - name: id
          in: path
          description: The API identifier.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /apirepo/{id}/methods/{methodId}:
    get:
      tags:
        - API Repository
      summary: Get API method by ID.
      description: Retrieves a method for a given API.
      operationId: getMethodById_1
      parameters:
        - name: id
          in: path
          description: The API identifier.
          required: true
          schema:
            type: string
        - name: methodId
          in: path
          description: The API method ID.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Method'
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    put:
      tags:
        - API Repository
      summary: Update an API method
      operationId: updateMethod_1
      parameters:
        - name: id
          in: path
          description: The API identifier to create a method.
          required: true
          schema:
            type: string
        - name: methodId
          in: path
          description: The API identifier.
          required: true
          schema:
            type: string
      requestBody:
        description: The method to update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Method'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Method'
        '400':
          description: Bad Request
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    delete:
      tags:
        - API Repository
      summary: Delete an API method
      description: Deletes a backend API method.
      operationId: deleteMethod
      parameters:
        - name: id
          in: path
          description: The API identifier.
          required: true
          schema:
            type: string
        - name: methodId
          in: path
          description: The method identifier.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /apirepo/{id}/download:
    get:
      tags:
        - API Repository
      summary: Downloads an API by ID.
      description: Downloads an API by ID.  If __filename__ is not supplied, the API name will be used.  If the API was imported using [/import](#importApisFromFile) or [/import](#createApiFromUrl), then it is possible to download the original API definition by setting __original__ to __true__.
      operationId: downloadApi_1
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: filename
          in: query
          description: Override the default filename for download
          required: true
          schema:
            type: string
        - name: original
          in: query
          description: If true, and the API was imported, this will download the original definition
          required: true
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /apirepo/import:
    post:
      tags:
        - API Repository
      summary: Create an API by uploading a file
      description: Imports an API definition from a valid standard Swagger or WADL definition.  On import, the original API definition is retained, but the API is converted to an internal format for processing.
      operationId: importApisFromFile
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
                - file
                - name
                - organizationId
                - type
              type: object
              properties:
                organizationId:
                  type: string
                  description: The API development organization ID that owns the import.
                name:
                  type: string
                  description: The API name.
                type:
                  type: string
                  description: 'The type of import, one of: swagger, wadl.'
                file:
                  type: string
                  description: The API definition file to import
                  format: binary
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIDefinition'
        '400':
          description: Bad Request
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /apirepo/importFromExternal:
    post:
      tags:
        - API Repository
      summary: Create one or more backend APIs for an external service
      description: Create one or more backend APIs for an external service. External APIs are imported via a connector. If the connector configuration specifies that all external APIs should be merged into a single new backend API, the name and description parameters are applied to this new API. Alternatively, if the connector specifies that a separate backend API should be created for each external API, the name and description parameters are ignored, and the names and descriptions of the new backend APIs are taken from the external service definitions.
      operationId: importFromExternal_1
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
                - api
                - connectorId
                - description
                - name
                - organizationId
              type: object
              properties:
                organizationId:
                  type: string
                  description: The API development organization that owns the new APIs
                connectorId:
                  type: string
                  description: The API connector through which new APIs should be created
                name:
                  type: string
                  description: The name of the merged API (see description)
                description:
                  type: string
                  description: A description of the merged API (see description)
                api:
                  type: string
                  description: List of external APIs to be imported
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIDefinition'
        '400':
          description: Bad Request
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /apirepo/importFromGw:
    post:
      tags:
        - API Repository
      summary: Create an API definition by importing a PolicyStudio-registered web service (REST) hosted on the the API Gateway
      description: Imports an API definition from a Policy Studio REST service hosted on the API Gateway. On import, a Swagger representation of the original API definition is retained, but the API is converted to an internal format for processing.
      operationId: importFromGw_1
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
                - id
                - name
                - organizationId
              type: object
              properties:
                id:
                  type: string
                  description: The id of the PolicyStudio-registered service to import.
                name:
                  type: string
                  description: The service name.
                organizationId:
                  type: string
                  description: The API development organization ID that owns the import.
                instance:
                  type: string
                host:
                  type: string
                port:
                  type: string
                username:
                  type: string
                password:
                  type: string
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIDefinition'
        '400':
          description: Bad Request
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /users/{id}/approve:
    post:
      tags:
        - Users
      summary: Grants approval to a request to create a new user on the system.
      description: Approving user must be API Manager Administrator or an Organization Administrator of the user's organization with the correct privileges to approve new user requests.
      operationId: approveUser_1
      parameters:
        - name: id
          in: path
          description: The ID of the user to be approved.
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
        default:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/{id}/changepassword:
    post:
      tags:
        - Users
      summary: Updates the password for a given user.
      description: The authenticated user must be API Manager Administrator or an Organization Administrator of the user's organization with the correct privileges to invoke this method.
      operationId: changePassword_2
      parameters:
        - name: id
          in: path
          description: The ID of the user being updated.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '404':
          description: Not Found
  /users:
    get:
      tags:
        - Users
      summary: Obtains a list of users
      description: |-
        Returns a list of users that are visible to the authenticated user.  The list of users can be filtered using the expression: field=__field__&op=__op__&value=__value__. Optionally, you can add a logical operation for all expressions, using the form: &lop=AND|OR.  By default, the logical operation is AND. Multiple expression filters can be used, specifying field, op, and value for each filter. The __field__ is one of:

        apiid
        :      Matches the user if the user has explicit access to application(s) that are using the API, specified by ID

        appid
        :      Matches the user if the user has explicit access to the application, specified by ID

        description
        :      The user's description

        email
        :      The user's email address

        enabled
        :      The enabled state of the user, one of: enabled, disabled

        createdOn
        :      The date the user was created on, time in ms, e.g.: 1372755998542

        mobile
        :      The user's mobile phone

        name
        :      The name of the user

        loginName
        :      The login name of the user

        orgid
        :      Matches the user if the user is a member of the organization, specified by ID

        phone
        :      The user's phone

        role
        :      The user's role, one of: user or oadmin

        state
        :      The user's current state, one of: approved, pending

        surname
        :      The surname of the user

        The __op__ is an operation and is one of:

        eq
        :      Equal

        ne
        :      Not equal

        gt
        :      Greater than

        lt
        :      Less than

        ge
        :      Greater than or equal

        le
        :      Less than or equal

        like
        :      Like

        gele
        :      Greater than or equal to, and less than or equal to; the __value__ should be a lower-minimum and upper-maximum separated by comma, e.g: value=5,10

        The __value__ will be compared against the __field__, according to the supplied __op__.
      operationId: getUsers_1
      parameters:
        - name: field
          in: query
          description: Filter field name.
          schema:
            type: array
            items:
              type: string
        - name: op
          in: query
          description: Filter operation.
          schema:
            type: array
            items:
              type: string
        - name: value
          in: query
          description: Filter value
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
    post:
      tags:
        - Users
      summary: Admin function to create a new user on the system
      description: Creates a new user on the system. Only Organization Administrators and API Manager Administrators may create users. Data posted in this request may include custom properties defined in app.config.
      operationId: createUser_1
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request
        '403':
          description: Forbidden
        '413':
          description: Request Entity Too Large
        '500':
          description: Internal Server Error
  /users/{id}:
    get:
      tags:
        - Users
      summary: Retrieves the details for a given user.
      description: Retrieves user details, given a user ID.  The API Manager Administrator may access all users, otherwise, the user ID must be a member of the authenticated user's own organization.
      operationId: getUser_1
      parameters:
        - name: id
          in: path
          description: The ID of the user to be retreived.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Not Found
    put:
      tags:
        - Users
      summary: Updates the details for a given user.
      description: Updates user details, given a user ID.  The API Manager Administrator may update all users, otherwise, the user ID must be a member of the authenticated user's own organization and the authenticated user must be an Organization Administrator.
      operationId: updateUser_1
      parameters:
        - name: id
          in: path
          description: The ID of the user being updated.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      tags:
        - Users
      summary: Deletes a user.
      description: Deletes a user with the given user ID.  All the applications and keys associated with the deleted user remain in the organization and can be managed by the Organization Administrator or the API Administrator. The API Administrator can delete any user.  The Organization Administrators can only delete users belonging to their organizations..
      operationId: deleteUser_1
      parameters:
        - name: id
          in: path
          description: The user ID to delete
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /users/forgotpassword:
    post:
      tags:
        - Users
      summary: Allows a user to reset their password.
      description: When this method is invoked, an email is sent to the owner of _email_ to verify that they wish for their password to be reset. The owner of _email_ must click on a link to reset the password. The link should direct the user to [/resetpassword](#APIUsersresetForgottenPassword) with appropriate query paremeters. Redirect URLs may be specified for success and failure conditions. If redirect URLs are specified, they must be a known Static File listener configured in the gateway or the request will be rejected.
      operationId: forgotUserPassword_1
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
                - email
              type: object
              properties:
                email:
                  type: string
                  description: The email address of the user.
                success:
                  type: string
                  description: The redirect success location (e.g. /request-forgotten-pw-success)
                failure:
                  type: string
                  description: The redirect failure location (e.g. /request-forgotten-pw-failed)
      responses:
        '201':
          description: Created
        '303':
          description: See Other
        '400':
          description: Bad Request
  /users/{id}/image:
    get:
      tags:
        - Users
      summary: Get the image for a user
      description: Returns the jpeg image associated with an user.
      operationId: getImage_2
      parameters:
        - name: id
          in: path
          description: The user ID whos image is to be returned
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      tags:
        - Users
      summary: Set the image for a user
      description: Set the jpeg image to be associated with a user.
      operationId: postImage_2
      parameters:
        - name: id
          in: path
          description: The user ID for which an image is to be updated
          required: true
          schema:
            type: string
        - name: type
          in: query
          description: This value should be unset
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
        '413':
          description: Request Entity Too Large
        '500':
          description: Internal Server Error
  /users/register:
    post:
      tags:
        - Users
      summary: Register a new user.
      description: Allows a user to register for an account on the system. A validation email request is sent to the provided email address to confirm ownership. The email should contain a link to [/validateuser](#APIUsersvalidateUser) with appropriate parameters. User properties (including custom properties) may be supplied as form parameters. The method will return JSON, but optionally, redirect URLs may be specified for success and failure conditions. If redirect URLs are specified, they must be a known Static File listener configured in the gateway or the request will be rejected.
      operationId: registerUser_1
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
                - email
                - name
                - password
              type: object
              properties:
                name:
                  type: string
                  description: The name of the user to register.
                email:
                  type: string
                  description: The unique email address of the user to register.
                password:
                  type: string
                  description: The password of the user to register.
                token:
                  type: string
                  description: The registration token to use.
                success:
                  type: string
                  description: The redirect success location (e.g. '/registration-success')
                failure:
                  type: string
                  description: The redirect failure location (e.g. '/registration-failed')
      responses:
        '201':
          description: Created
        '303':
          description: See Other
        '404':
          description: Bad Request
  /users/resetpassword:
    get:
      tags:
        - Users
      summary: Validates the user [/forgotpassword](#APIUsersforgotUserPassword) password request.
      description: User validation code and email address are expected as query string parameters.  When invoked, an email will be sent to the user with their new password.
      operationId: resetForgottenPassword_1
      parameters:
        - name: email
          in: query
          description: The email address of the user being validated.
          required: true
          schema:
            type: string
        - name: validator
          in: query
          description: Validation string for the user entry.
          required: true
          schema:
            type: string
      responses:
        '303':
          description: See Other
        '404':
          description: Not Found
  /users/{id}/resetpassword:
    put:
      tags:
        - Users
      summary: Admin level function to reset the password for a given user.
      description: The authenticated user must be API Manager Administrator or an Organization Administrator of the user's organization with the correct privileges to invoke this method.
      operationId: resetUserPassword_1
      parameters:
        - name: id
          in: path
          description: The ID of the user having password reset administratively.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /users/validateuser:
    get:
      tags:
        - Users
      summary: Validates the user [/register](#APIUsersregisterUser) request.
      description: User validation code and email address are expected as query parameters.
      operationId: validateUser_1
      parameters:
        - name: email
          in: query
          description: The email address of the user being validated.
          required: true
          schema:
            type: string
        - name: validator
          in: query
          description: Validation string for the user entry.
          required: true
          schema:
            type: string
      responses:
        '303':
          description: See Other
        '500':
          description: Bad Request
  /currentuser/changepassword:
    post:
      tags:
        - Current User
      summary: Modify the current user's password
      description: Modify the password of the authenticated user
      operationId: changePassword
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /currentuser:
    get:
      tags:
        - Current User
      summary: Get the current user
      description: Get the account details of the authenticated user
      operationId: getCurrentUser_1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    put:
      tags:
        - Current User
      summary: Modify the current user
      description: Modify the account details of the authenticated user
      operationId: updateCurrentUser_1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /discovery/apis:
    get:
      tags:
        - API Discovery
      summary: Lists all APIs/services virtualised in the API Server.
      description: Lists all APIs/services virtualised in the API Server. API Administrators see all APIs/services. Users see APIs/services for their organization.
      operationId: getAPIs_1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DiscoveryAPI'
        '500':
          description: Internal Server Error
  /discovery/swagger/apis/{id}/image:
    get:
      tags:
        - API Discovery
      summary: Retrieves the API image
      operationId: getApiImage_1
      parameters:
        - name: id
          in: path
          description: The API identifier
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '500':
          description: Internal Server Error
  /discovery/swagger/apis/{id}/service-definition:
    get:
      tags:
        - API Discovery
      summary: Retrieves the service definition of the API.
      operationId: getApiServiceDefinition_1
      parameters:
        - name: id
          in: path
          description: The API identifier
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '500':
          description: Internal Server Error
  /discovery/oauthresources:
    get:
      tags:
        - API Discovery
      summary: Gets a list OAuth protected resources and their associated scopes.
      description: Gets a list OAuth protected resources and their associated scopes.
      operationId: getOAuthResources_1
      responses:
        '200':
          description: OK
  /discovery/scopes:
    get:
      tags:
        - API Discovery
      summary: Retrieves every resource on the API Server that is protected by OAuth, and the scopes that cover those resources
      description: Retrieves every resource on the API Server that is protected by OAuth, and the scopes that cover those resources. Only API Administrators will be able to retrieve information.
      operationId: getScopes_1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OAuthProtectedResource'
        '500':
          description: Internal Server Error
  /discovery/swagger/api/id/{id}:
    get:
      tags:
        - API Discovery
      summary: Retrieves an extended Swagger feed for the specified API.
      description: Retrieves an extended Swagger feed for the specified API. API Administrators will always see the API. Users will only see the API if it is available for their organization.If __filename__ is supplied, the download will use it as the `Content-Disposition` filename attachment.
      operationId: getSwaggerAPI_1
      parameters:
        - name: id
          in: path
          description: The unique ID of the API to return
          required: true
          schema:
            type: string
        - name: filename
          in: query
          description: Override the default filename for download
          schema:
            type: string
        - name: swaggerVersion
          in: query
          description: The Swagger version of the feed, either 1.1 (default), 2.0 or 3.0.
          schema:
            type: string
            default: '1.1'
        - name: extensions
          in: query
          description: If true, extensions such as the x-axway object are returned in the Swagger definitions (default=true)
          schema:
            type: boolean
            default: true
        - name: User-Agent
          in: header
          description: The user agent header sent by the browser (default='')
          schema:
            type: string
            default: ''
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
  /discovery/swagger/apis:
    get:
      tags:
        - API Discovery
      summary: Convenience method for retrieving all Swagger feeds for all virtualised services.
      description: |-
        Convenience method for retrieving all Swagger feeds for all virtualised services that are visible to the authenticated user. The list of APIs can be filtered using the expression: field=__field__&op=__op__&value=__value__.  Optionally, you can add a logical operation for all expressions, using the form: &lop=AND|OR.  By default, the logical operation is AND.  Multiple expression filters can be used, specifying field, op, and value for each filter. The __field__ is one of:

        id
        :        Matches the API by the specified ID

        name
        :        Matches the API by the specified name

        title
        :        Swagger 2.0 only: Matches the API by the specified title/name

        description
        :        Matches the API by the specified description

        summary
        :        Swagger 1.2 only: Matches the API by the specified summary

        version
        :        Matches the API by the specified version

        type
        :        Matches the API by the specified type. Type can be 'rest' or 'wsdl'

        resourcepath
        :        Swagger 1.2 only: Matches the API by the specified inbound path

        basepath
        :        Swagger 2.0 only: Matches the API by the specified inbound path

        taggroup
        :        Matches the API by the specified tag group

        tag
        :        Matches the API by the specified tag value

        methodtaggroup
        :        Matches the API by the specified method tag group, i.e. if the API contains a method that contains a tag group matching that specified

        methodtag
        :        Matches the API by the specified method tag value, i.e. if the API contains a method that contains a tag value matching that specified

        The __op__ is an operation and is one of:

        eq
        :    Equal

        ne
        :    Not equal

        gt
        :     Greater than

        lt
        :     Less than

        ge
        :     Greater than or equal

        le
        :     Less than or equal

        like
        :    Like

        gele
        :     Greater than or equal to, and less than or equal to; the __value__ should be a lower-minimum and upper-maximum separated by comma, e.g: value=5,10

        The __value__ will be compared against the __field__, according to the supplied __op__. 
      operationId: getSwaggerAPIs_1
      parameters:
        - name: field
          in: query
          description: Filter field name.
          schema:
            type: array
            items:
              type: string
        - name: op
          in: query
          description: Filter operation.
          schema:
            type: array
            items:
              type: string
        - name: value
          in: query
          description: Filter value
          schema:
            type: array
            items:
              type: string
        - name: swaggerVersion
          in: query
          description: The Swagger version
          schema:
            type: string
            default: '1.2'
      responses:
        '200':
          description: OK
        '500':
          description: Internal Server Error
  /login:
    post:
      tags:
        - Login
      summary: Login to API Manager
      description: Logs a user, identified by _username_ and _password_, into the API Manager by creating unique a session cookie.  The _success_ parameter defaults to a named URL identified by "/home" and will return a redirect to the portal after login.  The _failure_ parameter is optional.  If _failure_ is not specified, and the login attempt fails, this method returns a JSON error response.  If _failure_ is specified, and the login attempt fails, then this method will redirect to a named URL, identified by "/login-failed".
      operationId: login_1
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
                - password
                - username
              type: object
              properties:
                username:
                  type: string
                  description: The login name of the authenticating user
                password:
                  type: string
                  description: The password of the authenticating user
                success:
                  type: string
                  description: 'The redirect success location (defaults to: /home)'
                failure:
                  type: string
                  description: Optional redirect failure location (e.g. /login-failed
      responses:
        '303':
          description: See Other
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '409':
          description: Conflict
        '500':
          description: Internal Server Error
    delete:
      tags:
        - Login
      summary: Logout from API Manager
      description: Destroys the caller session with the API Manager.
      operationId: logout_1
      responses:
        '204':
          description: No Content
  /connectors:
    get:
      tags:
        - API Manager Services
      summary: Return a list of API connectors
      description: Return a list of API connectors.
      operationId: getConnectors
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Connector'
        '400':
          description: Bad Request
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /config/customproperties:
    get:
      tags:
        - API Manager Services
      summary: Gets API Manager custom property metadata
      description: Returns an API Manager configuration object containing the metadata for the custom properties defined in the API Manager app.config.
      operationId: getCustomPropertiesConfig
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomPropertiesConfig'
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /connectors/{connectorId}:
    get:
      tags:
        - API Manager Services
      summary: Return a list of APIs for the specified connector
      description: Return a list of APIs for the specified connector.
      operationId: getExternalApis
      parameters:
        - name: connectorId
          in: path
          description: ID of the connector for which APIs should be returned. Connector IDs can be retrieved by calling /connectors.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExternalApi'
        '400':
          description: Bad Request
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /connectors/{connectorId}/login:
    post:
      tags:
        - API Manager Services
      summary: Login to an external service from which APIs will be imported
      description: Login to an external service from which APIs will be imported.
      operationId: storeConnectorCredentials
      parameters:
        - name: connectorId
          in: path
          description: ID of the API connector. Connector IDs can be retrieved by calling /connectors.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
                - password
                - username
              type: object
              properties:
                username:
                  type: string
                  description: External service username
                password:
                  type: string
                  description: External service password
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Bad Request
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /proxies/{id}/applications:
    get:
      tags:
        - API Proxy Registration
      summary: Gets a list of Applications that have been granted access to the specified frontend API.
      operationId: getApiApplications
      parameters:
        - name: id
          in: path
          description: The frontend API identifier.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Application'
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /discovery/sdk/{id}/{platform}:
    get:
      tags:
        - API Discovery
      summary: Generates an SDK package for the specified API based on the type of the client requested
      description: Generates a client SDK package for the specified API based on the platform. Supported platform are Android, iOS-swift, NodeJS
      operationId: getClientSDK
      parameters:
        - name: id
          in: path
          description: The name of the API to generate the client SDK package for
          required: true
          schema:
            type: string
        - name: platform
          in: path
          description: 'Generated client type, one of: android, iOS-swift, nodejS'
          required: true
          schema:
            type: string
        - name: packagename
          in: query
          description: Java package name generated only for Android platform. It must be a valid java package name.
          schema:
            type: string
            default: com.axway
      responses:
        '200':
          description: OK
        '500':
          description: Internal Server Error
components:
  schemas:
    Application:
      required:
        - name
        - organizationId
      type: object
      properties:
        id:
          type: string
          description: The unique identifier for the application
          readOnly: true
          example: b76a3e23-deca-49ab-9682-79cd503b7e3a
        name:
          type: string
          description: The display name for the application
          example: My First iPhone App
        description:
          type: string
          description: Descriptive text for the application
          example: My First iPhone App which is a "Hello World" basic application
        organizationId:
          type: string
          description: The organization identifier to which the application belongs
          example: 3e21b76a-defa-49ab-9682-a9cd60387e37
        phone:
          type: string
          description: Contact phone number of the application
          example: +1 877-564-7700
        email:
          type: string
          description: The contact email address associated with the application
          example: support@acmecorp.com
        createdBy:
          type: string
          description: The unique identifier for user that created the application
          readOnly: true
          example: de077cd8-83b7-46d1-b06f-2eaaf1548898
        managedBy:
          type: array
          description: A list of unique identifier for users that manages the application
          example:
            - de077cd8-83b7-46d1-b06f-2eaaf1548898
          items:
            type: string
            description: A list of unique identifier for users that manages the application
            example: '["de077cd8-83b7-46d1-b06f-2eaaf1548898"]'
        createdOn:
          type: integer
          description: Epoch/Unix time stamp when the application was created
          format: int64
          readOnly: true
          example: 1364407145121
        enabled:
          type: boolean
          description: Flag to indicate if this application is enabled or not
          example: false
        image:
          type: string
          description: URI of the image to be used for this application, this field only indicates that the application has an image assigned to it. In order to retrieve the actual image use the following URL /api/portal/applications/{id}/image/
          example: resources/photo.jpg
        state:
          type: string
          description: Flag to indicate if an application has been approved by the API Manager admin or if delegated then the org admin
          example: approved
        tags:
          type: object
          additionalProperties:
            type: string
          writeOnly: true
      description: API Manager application.
    APICookie:
      type: object
      properties:
        name:
          type: string
        value:
          type: string
        version:
          type: integer
          format: int32
        path:
          type: string
        domain:
          type: string
        comment:
          type: string
        maxAge:
          type: integer
          format: int32
        expiry:
          type: string
          format: date-time
        secure:
          type: boolean
        httpOnly:
          type: boolean
        sessionSameSiteRule:
          type: string
          enum:
            - Strict
            - Lax
            - None
    AuthenticatedUserAttributes:
      type: object
      properties:
        firstLogin:
          type: boolean
        isSSOLogin:
          type: boolean
        userDn:
          type: string
        lastSeen:
          type: integer
          format: int64
        passwordSetOn:
          type: integer
          format: int64
        changePassword:
          type: boolean
        changePasswordMessage:
          type: string
    ExportOptions:
      type: object
      properties:
        filename:
          type: string
          description: If specified, the name of the file that the exported applications will be wrote to
          example: export.dat
        password:
          type: string
          description: Password value which, when specified, will be use to encrypt the output stream for the export
          example: '1223425'
        appIds:
          type: array
          description: List of the application ids that was chosen for export
          example: '[c95b7c70-fe01-4e31-8f1f-cdd977812d7d]'
          items:
            type: string
            description: List of the application ids that was chosen for export
            example: '[c95b7c70-fe01-4e31-8f1f-cdd977812d7d]'
        quota:
          type: boolean
          description: Flag to indicate if api quota information is to be included in the export
          example: false
        oauth:
          type: boolean
          description: Flag to indicate if oauth credentials are to be included in the export
          example: true
        apikeys:
          type: boolean
          description: Flag to indicate if api keys are to be included in the export
          example: false
    Session:
      type: object
      properties:
        randomDigest:
          type: array
          items:
            type: string
            format: byte
        expiryTime:
          type: integer
          format: int64
        isSSOLogin:
          type: boolean
        creationTime:
          type: integer
          format: int64
        reqLimitSize:
          type: integer
          format: int64
        reqLimitOffset:
          type: integer
          format: int64
          writeOnly: true
        valueNames:
          type: array
          items:
            type: string
        attributeNames:
          type: object
    SessionData:
      type: object
      properties:
        ssoCookie:
          $ref: '#/components/schemas/APICookie'
        session:
          $ref: '#/components/schemas/Session'
        sessionId:
          type: string
        staticSessionId:
          type: string
        apicookie:
          $ref: '#/components/schemas/APICookie'
        apistaticCookie:
          $ref: '#/components/schemas/APICookie'
        exportOptions:
          $ref: '#/components/schemas/ExportOptions'
    User:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier for the user
          example: 2be9fc6e-1110-474f-8029-bf1577ec3801
        organizationId:
          type: string
          description: The unique identifier for the organization to which the user belongs
          example: 6fb4bd38-199a-4e9f-8c11-43233f530d82
        name:
          type: string
          description: The user's name
          example: New User
        description:
          type: string
          description: A description of the user
          example: Created by admin
        loginName:
          type: string
          description: A unique login name for the user
          example: jbloggs
        email:
          type: string
          description: An email address for the user
          example: jbloggs@acmecorp.com
        phone:
          type: string
          description: The user's phone number
          example: +353 (1) 6742000
        mobile:
          type: string
          description: The user's mobile number
          example: +353 (89) 6742087
        role:
          type: string
          description: 'The user''s role, one of: user, oadmin, or admin'
          example: user
        image:
          type: string
          description: The user's photo. To update the image, please refer to the API.
          example: resources/photo.jpg
        enabled:
          type: boolean
          description: Indicates whether or not the user account is enabled or not
          example: true
        createdOn:
          type: integer
          description: Epoch/Unix time stamp when the organization was created
          format: int64
          example: 1367337125476
        state:
          type: string
          description: 'The current state of the account, one of: approved, pending'
          example: approved
        type:
          type: string
          description: 'Indicates the type of user. Possible values: internal, external'
          example: internal
        orgs2Role:
          type: object
          additionalProperties:
            type: string
            description: Maps the organization Id to the user's role for that organization (optional)
            example: '{"63d434a6-f286-4d0e-9dc9-80b45b0f80f8":"user"}'
          description: Maps the organization Id to the user's role for that organization (optional)
          example:
            63d434a6-f286-4d0e-9dc9-80b45b0f80f8: user
        orgs2Name:
          type: object
          additionalProperties:
            type: string
            description: Maps the organization Id to the organization name (read-only)
            example: '{"63d434a6-f286-4d0e-9dc9-80b45b0f80f8":"Axway Inc."}'
          description: Maps the organization Id to the organization name (read-only)
          example:
            63d434a6-f286-4d0e-9dc9-80b45b0f80f8: Axway Inc.
        authAttrs:
          $ref: '#/components/schemas/AuthenticatedUserAttributes'
        tags:
          type: object
          additionalProperties:
            type: string
          writeOnly: true
        orgName:
          type: string
          writeOnly: true
        dn:
          type: string
      description: The API Manager user is a member of organizations.
    APIKey:
      type: object
      properties:
        id:
          type: string
          description: The ID which is used to identify the API Key. You include it in each request, so it's not a secret.
          example: 19da5d5e-b18a-4217-abec-291033cd939c
        applicationId:
          type: string
          description: The ID which is used to identify an application. You include it in each request, so it's not a secret.
          example: 19da5d5e-b18a-4217-abec-291033cd939c
        secret:
          type: string
          description: Each  API Key ID has a Secret Key associated with it. This key is just a long string of characters that can be used to calculate the digital signature that can be included in requests. Your Secret Key is a secret do not distribute.
          example: 19da5d5e-b18a-4217-abec-291033cd939c
        enabled:
          type: boolean
          description: Flag disables the API key so can't be used in authentication
          example: true
        createdBy:
          type: string
          description: The unique identifier for user that generated the API Key
          readOnly: true
          example: 3e21b76a-defa-49ab-9682-a9cd60387e37
        createdOn:
          type: integer
          description: Epoch/Unix time stamp when the API key was created
          format: int64
          readOnly: true
          example: 1364287486876
        deletedOn:
          type: integer
          description: Epoch/Unix time stamp when the API key was deleted
          format: int64
          readOnly: true
          example: 1364287486876
        corsOrigins:
          type: array
          description: The domains to allow access for browser-based clients
          example: '[example.com]'
          items:
            type: string
            description: The domains to allow access for browser-based clients
            example: '[example.com]'
      description: API Manager API Key for use in authenticating applications
    ApplicationRequest:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier for the application request
          example: b76a3e23-deca-49ab-9682-79cd503b7e3a
        name:
          type: string
          description: The display name for the application
          example: My First iPhone App
        description:
          type: string
          description: Descriptive text for the application
          example: My First iPhone App which is a "Hello World" basic application
        organizationId:
          type: string
          description: The organization identifier to which the application request belongs
          example: 3e21b76a-defa-49ab-9682-a9cd60387e37
        phone:
          type: string
          description: Contact phone number of the application
          example: +1 877-564-7700
        email:
          type: string
          description: The contact email address associated with the application
          example: support@acmecorp.com
        image:
          type: string
          description: URI of the image to be used for this application, this field only indicates that the application has an image assigned to it. In order to retrieve the actual image use the following URL /api/portal/organizations/{uid of org}/image/
          example: resources/photo.jpg
        apis:
          type: array
          description: A list of unqiue API identifiers to which the application wants to use.
          example:
            - c1c63d3b-5283-4755-ade7-e2377bd35049
          items:
            type: string
            description: A list of unqiue API identifiers to which the application wants to use.
            example: '["c1c63d3b-5283-4755-ade7-e2377bd35049"]'
        tags:
          type: object
          additionalProperties:
            type: string
          writeOnly: true
      description: API Manager application request.
    ExternalClient:
      type: object
      properties:
        id:
          type: string
          description: The ID of the external client
          readOnly: true
          example: 19da5d5e-b18a-4217-abec-291033cd939c
        clientId:
          type: string
          description: The 3rd party client ID. This client ID is provided by a 3rd party OAuth service and is used to map an application to an external client. This value is unique, i.e. no other application can specify the same client ID.
          example: 296ec1ae-3fc7-4470-8d90-a6cc1482797f
        enabled:
          type: boolean
          description: Flag disables the external client so it can't be used in authentication
          example: true
        createdBy:
          type: string
          description: The unique identifier of the user that created the mapping
          readOnly: true
          example: 3e21b76a-defa-49ab-9682-a9cd60387e37
        createdOn:
          type: integer
          description: Epoch/Unix time stamp when the mapping was created
          format: int64
          readOnly: true
          example: 1364287486876
        corsOrigins:
          type: array
          description: The domains to allow access for browser-based clients
          example: '[example.com]'
          items:
            type: string
            description: The domains to allow access for browser-based clients
            example: '[example.com]'
      description: API Manager external client
    OAuthClient:
      type: object
      properties:
        id:
          type: string
          description: The client ID to be used in OAuth flows
          example: 7b32f6c9-9e27-4def-87e2-247aadf7f583
        cert:
          type: string
          description: The PEM encodeded certificate used in JWT flow
          example: '-----BEGIN CERTIFICATE-----MIICUTC..............-----END CERTIFICATE-----'
        secret:
          type: string
          description: The client application secret to be used in OAuth flows
          example: ddf27559-ace0-4c4f-b5e4-ecf2086fddc5
        type:
          type: string
          description: OAuth defines two client types, based on their ability to authenticate securely with the authorization server. Possible values public or confidential
          example: public
        enabled:
          type: boolean
          description: Flag disables the OAuth credentials so they can't be used in authentication
          example: true
        redirectUrls:
          type: array
          description: The URL where the server will redirect the to present authorization codes or access tokens depending on the OAuth flow being executed
          example: '[https://example.com/callback]'
          items:
            type: string
            description: The URL where the server will redirect the to present authorization codes or access tokens depending on the OAuth flow being executed
            example: '[https://example.com/callback]'
        corsOrigins:
          type: array
          description: The domains to allow access for browser-based clients
          example: '[example.com]'
          items:
            type: string
            description: The domains to allow access for browser-based clients
            example: '[example.com]'
        createdBy:
          type: string
          description: The unique identifier for user that generated the OAuth credentials
          readOnly: true
          example: 3e21b76a-defa-49ab-9682-a9cd60387e37
        createdOn:
          type: integer
          description: Epoch/Unix time stamp when the OAuth credentials was created
          format: int64
          readOnly: true
          example: 1364287486876
        applicationId:
          type: string
          description: The application identifier associated with the OAuth credential
      description: API Manager OAuth Credentials.
    PermissionDTO:
      type: object
      properties:
        id:
          type: string
          description: The permission identifier
          readOnly: true
          example: 46a6e874-a341-4c2d-870e-55e4c6ec27dc
        userId:
          type: string
          description: The user identifier
          example: 46a6e874-a341-4c2d-870e-55e4c6ec27dc
        permission:
          type: string
          description: The privilege
          example: manage
        createdBy:
          type: string
          description: The unique identifier for user that create the permission
          readOnly: true
          example: de077cd8-83b7-46d1-b06f-2eaaf1548898
        createdOn:
          type: integer
          description: Epoch/Unix time stamp when the permission was created
          format: int64
          readOnly: true
          example: 1364407145121
      description: API Manager application permission.
    OAuthResource:
      required:
        - applicationId
        - id
      type: object
      properties:
        id:
          type: string
          description: The unique identifier for the oauth protected resource
          example: 1e71b76a-defa-49ab-96s2-a9cd60387f31
        applicationId:
          type: string
          description: The unique identifier for the application who has access to this resource
          example: 3e21b76a-defa-49ab-9682-a9cd60387e37
        uriprefix:
          type: string
          description: The uri prefix which this oauth protected resource relates to
          example: /api/oauth/protected
        scopes:
          uniqueItems: true
          type: array
          description: Set of scope strings that have been resolved from querying the OAuth Resource Service at the uri prefix
          example: email
          items:
            type: string
            description: Set of scope strings that have been resolved from querying the OAuth Resource Service at the uri prefix
            example: email
        enabled:
          type: boolean
          description: Flag to indicate if this oauth protected resource is enabled or not
          example: false
        scope:
          type: string
        isDefault:
          type: boolean
      description: OAuth protected resource.
    QuotaApiConstraintDTO:
      required:
        - type
      type: object
      properties:
        api:
          type: string
          description: The API identifier from API discovery, or '\*' for all API
          example: 60d1c7da-9e2e-4f57-948a-eeb1da71beca
        method:
          type: string
          description: The API method identifier from API discovery, or '\*' for all methods
          example: 0c5f8a4a-0e74-4e66-ad7b-e21962940e02
        type:
          type: string
          description: 'The restriction type, one of: throttle, throttlemb'
          example: throttle
        config:
          type: object
          additionalProperties:
            type: string
            description: The restriction configuration
            example: '{"messages":"10","per":"1","period":"seconds"}'
          description: The restriction configuration
          example:
            messages: '10'
            per: '1'
            period: seconds
      description: The APIConstraint is restriction that applies to API(s) and API method(s).
    QuotaDTO:
      required:
        - id
        - name
        - type
      type: object
      properties:
        id:
          type: string
          description: The quota identifier
          example: a1c70859-702b-4f3a-a1ad-a61067fdc4c7
        type:
          type: string
          description: API quota types
          example: APPLICATION
          enum:
            - API
            - APPLICATION
        name:
          type: string
          description: The name of the quota
          example: MyApplication Quota
        description:
          type: string
          description: The quota for MyApplication the overrides default Application quota
          example: A set of restrictions to MyApplication
        restrictions:
          type: array
          description: An array of restrictions imposed on the quota
          items:
            $ref: '#/components/schemas/QuotaApiConstraintDTO'
        system:
          type: boolean
          description: Indicates if the quota is system (protected)
          example: false
      description: The Quota is a set of restrictions that apply to applications in the Portal.
    OAuthAppScope:
      required:
        - applicationId
        - id
      type: object
      properties:
        id:
          type: string
          description: The unique identifier for the oauth protected resource
          example: 1e71b76a-defa-49ab-96s2-a9cd60387f31
        applicationId:
          type: string
          description: The unique identifier for the application that has this scope
          example: 3e21b76a-defa-49ab-9682-a9cd60387e37
        scope:
          type: string
          description: The scope string
          example: /api/oauth/protected
        isDefault:
          type: boolean
          description: Flag to indicate if this scope is one of the applications default scopes
          example: false
      description: OAuth Application Scope
    APIAccess:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for approval decisions (includes pending approvals)
          example: 19da5d5e-b18a-4217-abec-291033cd939c
        apiId:
          type: string
          description: Virtualised REST API unique id
          example: c1c63d3b-5283-4755-ade7-e2377bd35049
        createdBy:
          type: string
          description: The unique identifier for user that requested access
          readOnly: true
          example: 3e21b76a-defa-49ab-9682-a9cd60387e37
        state:
          type: string
          description: Pending or approved state
          example: approved
        createdOn:
          type: integer
          description: 'Epoch/Unix time stamp when the approval decision was created '
          format: int64
          readOnly: true
          example: 1364287486876
        enabled:
          type: boolean
          description: Flag disables access to an API for organization or application
          example: true
      description: API Access indicates whether access to an API is available
    OAuthScope:
      type: object
      properties:
        scope:
          type: string
          description: Oauth Scope
          example: Read
        description:
          type: string
          description: Scope Description
          example: Read access to resource
      description: OAuth Scope information.
    FormDataContentDisposition:
      type: object
      properties:
        type:
          type: string
        parameters:
          type: object
          additionalProperties:
            type: string
        fileName:
          type: string
        creationDate:
          type: string
          format: date-time
        modificationDate:
          type: string
          format: date-time
        readDate:
          type: string
          format: date-time
        size:
          type: integer
          format: int64
        name:
          type: string
    BodyPart:
      type: object
      properties:
        contentDisposition:
          $ref: '#/components/schemas/ContentDisposition'
        entity:
          type: object
        headers:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
        mediaType:
          type: object
          properties:
            type:
              type: string
            subtype:
              type: string
            parameters:
              type: object
              additionalProperties:
                type: string
            wildcardType:
              type: boolean
            wildcardSubtype:
              type: boolean
        messageBodyWorkers:
          $ref: '#/components/schemas/MessageBodyWorkers'
        parent:
          $ref: '#/components/schemas/MultiPart'
        providers:
          type: object
        parameterizedHeaders:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/ParameterizedHeader'
    ContentDisposition:
      type: object
      properties:
        type:
          type: string
        parameters:
          type: object
          additionalProperties:
            type: string
        fileName:
          type: string
        creationDate:
          type: string
          format: date-time
        modificationDate:
          type: string
          format: date-time
        readDate:
          type: string
          format: date-time
        size:
          type: integer
          format: int64
    FormDataBodyPart:
      type: object
      properties:
        contentDisposition:
          $ref: '#/components/schemas/ContentDisposition'
        entity:
          type: object
        headers:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
        mediaType:
          type: object
          properties:
            type:
              type: string
            subtype:
              type: string
            parameters:
              type: object
              additionalProperties:
                type: string
            wildcardType:
              type: boolean
            wildcardSubtype:
              type: boolean
        messageBodyWorkers:
          $ref: '#/components/schemas/MessageBodyWorkers'
        parent:
          $ref: '#/components/schemas/MultiPart'
        providers:
          type: object
        simple:
          type: boolean
        formDataContentDisposition:
          $ref: '#/components/schemas/FormDataContentDisposition'
        name:
          type: string
        value:
          type: string
        parameterizedHeaders:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/ParameterizedHeader'
    MessageBodyWorkers:
      type: object
    MultiPart:
      type: object
      properties:
        contentDisposition:
          $ref: '#/components/schemas/ContentDisposition'
        entity:
          type: object
        headers:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
        mediaType:
          type: object
          properties:
            type:
              type: string
            subtype:
              type: string
            parameters:
              type: object
              additionalProperties:
                type: string
            wildcardType:
              type: boolean
            wildcardSubtype:
              type: boolean
        messageBodyWorkers:
          $ref: '#/components/schemas/MessageBodyWorkers'
        parent:
          $ref: '#/components/schemas/MultiPart'
        providers:
          type: object
        bodyParts:
          type: array
          items:
            $ref: '#/components/schemas/BodyPart'
        parameterizedHeaders:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/ParameterizedHeader'
    ParameterizedHeader:
      type: object
      properties:
        value:
          type: string
        parameters:
          type: object
          additionalProperties:
            type: string
    OAuthAuthorization:
      type: object
      properties:
        scopes:
          uniqueItems: true
          type: array
          description: A list of scopes that a resource owner has authorized access to.
          items:
            type: string
            description: A list of scopes that a resource owner has authorized access to.
        created:
          type: string
          description: The Date that the resource owner granted access to the scope(s).
          format: date-time
        applicationID:
          type: string
          description: The application requesting authorization.
          example: 3c82acfc-26c2-11e4-a149-a6c5e4d22fb7
        subject:
          type: string
          description: The unique identifier representing the resource owner who granted authorization to the client.
          example: sampleuser
        id:
          type: string
          description: The unique identifier for the authorization
          example: b76a3e23-deca-49ab-9682-79cd503b7e3a
      description: An OAuth Authorization
    MetricField:
      type: object
      properties:
        metricType:
          type: string
          description: The metric type name
          readOnly: true
          example: numMessages
        aggregateName:
          type: string
          description: The metric aggregate name
          readOnly: true
          example: totalNumMessages
    MetricTimeline:
      type: object
      properties:
        name:
          type: string
          description: The metric name.
          readOnly: true
          example: numMessages
        id:
          type: string
          writeOnly: true
        series:
          type: array
          description: The metric name.
          items:
            $ref: '#/components/schemas/Series'
    Series:
      type: object
      properties:
        name:
          type: string
          description: The metric type name
          readOnly: true
          example: numMessages
        pointInterval:
          type: integer
          description: The amount of time, in milliseconds, between data points
          format: int64
          example: 300000
        pointStart:
          type: integer
          description: The time of the first data point in milliseconds
          format: int64
          example: 1363737600000
        data:
          type: array
          description: The a metric measurement at a specific time interval
          example:
            - 0
            - 0
            - 1
            - 0
            - 2
            - 0
            - 3
            - 0
            - 4
          items:
            type: number
            description: The a metric measurement at a specific time interval
            format: float
      description: The metric name.
    Organization:
      required:
        - name
      type: object
      properties:
        id:
          type: string
          description: The unique identifier for the organization
          readOnly: true
          example: 3e21b76a-defa-49ab-9682-a9cd60387e37
        name:
          type: string
          description: The name of the organization
          example: Acme Corporation
        description:
          type: string
          description: The description of the organization
          example: Acme Corporation is a fictional corporation in Road Runner/Wile E. Coyote cartoons
        email:
          type: string
          description: The contact email address associated with the organization
          example: support@acmecorp.com
        image:
          type: string
          description: URI of the image to be used for this organization. To update the image, please refer to the API.
          example: resources/photo.jpg
        restricted:
          type: boolean
          description: Indicates that the organization is restricted.  Users in a restricted organization cannot see other users, and users cannot register for the organization using tokens.  Default is 'false'.
          example: false
        virtualHost:
          type: string
          description: The virtual host associated with the organization
          example: acme.api.axway.com
        tags:
          type: object
          additionalProperties:
            type: string
          writeOnly: true
        phone:
          type: string
          description: Contact phone number of the organization
          example: +1 877-564-7700
        enabled:
          type: boolean
          description: Flag to indicate if this organization is enabled or not
          example: false
        development:
          type: boolean
          description: Flag to indicate if this organization is enabled or not for API development.
          example: false
          default: false
        dn:
          type: string
        createdOn:
          type: integer
          description: Epoch/Unix time stamp when the organization was created
          format: int64
          readOnly: true
          example: 1364287486876
        startTrialDate:
          type: integer
          description: Epoch/Unix time stamp when the trial starts
          format: int64
          example: 1364287486876
        endTrialDate:
          type: integer
          description: Epoch/Unix time stamp when the trial expires
          format: int64
          example: 1364287486876
        trialDuration:
          type: integer
          description: Length of the trial in days
          format: int32
          example: 365
        isTrial:
          type: boolean
          description: Indicates if this Org is a trial or not
          example: true
      description: API Manager organization
    RegistrationToken:
      type: object
      properties:
        token:
          type: string
          description: The registration code
          example: '257690'
        organizationId:
          type: string
          description: Unique identifier for the organization who the registration code applies to
          readOnly: true
          example: 3e21b76a-defa-49ab-9682-a9cd60387e37
        expiry:
          type: integer
          description: Epoch/Unix time stamp when the registration code will expire
          format: int64
          example: 1366930800000
        createdOn:
          type: integer
          description: Epoch/Unix time stamp when the registration code was created
          format: int64
          readOnly: true
          example: 1364407145121
        createdBy:
          type: string
          description: The unique identifier for user that created the registration code
          readOnly: true
          example: de077cd8-83b7-46d1-b06f-2eaaf1548898
        userQuota:
          type: integer
          description: The remaining number of users that can use the registration code for self registration to an organization
          format: int32
          example: 10
        maxUsers:
          type: integer
          description: The total number of users that can use the registration code for self registration to an organization since the code has been created
          format: int32
          example: 10
        enabled:
          type: boolean
          description: Flag disables registration code so that it can no longer be used for registration
          example: true
      description: Organization Registration Token.
    RemoteHost:
      required:
        - alias
        - name
        - port
      type: object
      properties:
        id:
          type: string
          description: The unique identifier for the remote host
          readOnly: true
          example: 3e21b76a-defa-49ab-9682-a9cd60387e37
        alias:
          type: string
          description: A human readable alias name for the remote host
          example: Acme Remote Server
        name:
          type: string
          description: The host name of the remote host
          example: www.google.com
        port:
          type: integer
          description: The host port of the remote host
          format: int32
          example: 80
        createdOn:
          type: integer
          description: Epoch/Unix time stamp when the remote host was created
          format: int64
          readOnly: true
          example: 1364287486876
        createdBy:
          type: string
          description: The unique identifier for user that created the remote host
          readOnly: true
          example: de077cd8-83b7-46d1-b06f-2eaaf1548898
        organizationId:
          type: string
          description: The organization identifier to which the remote host belongs
          example: 3e21b76a-defa-49ab-9682-a9cd60387e37
        maxConnections:
          type: integer
          description: The maximum number of connections to open to a Remote Host. If the maximum number of connections has already been established, the API Gateway instance waits for a connection to drop or become idle before making another request. The default value is -1, meaning there is no limit
          format: int32
          example: 128
          default: -1
        allowHTTP11:
          type: boolean
          description: Enables the API Gateway to use HTTP 1.1 when connecting to the remote host. Default value is false, meaning HTTP 1.0 is used
          example: false
          default: false
        includeContentLengthRequest:
          type: boolean
          description: If this option is set, the API Gateway will include the Content-Length HTTP header in all requests to this Remote Host. Default value is false.
          example: false
          default: false
        includeContentLengthResponse:
          type: boolean
          description: If this option is set, if the API Gateway receives a response from this Remote Host that contains a Content-Length HTTP header, it returns this length to the client. Default value is false.
          example: false
          default: false
        offerTLSServerName:
          type: boolean
          description: Adds a field to outbound TLS/SSL calls that shows the name that the client used to connect. Default value is false.
          example: false
          default: false
        verifyServerHostname:
          type: boolean
          description: Ensures that the certificate presented by the server matches the name of the remote host being connected to. This prevents host spoofing and man-in-the-middle attacks. Default value is false.
          example: false
          default: true
        connectionTimeout:
          type: integer
          description: If a connection to this remote host is not established within the time set in this field, the connection times out and the connection fails. Default value is 30000 milliseconds (30 seconds).
          format: int64
          example: 30000
          default: 30000
        activeTimeout:
          type: integer
          description: The maximum amount of time permitted between reading successive blocks of data. If the Active Timeout is exceeded, the API Gateway closes the connection. This prevents a Remote Host from closing the connection while sending data. Default value is 30000 milliseconds (30 seconds).
          format: int64
          example: 30000
          default: 30000
        transactionTimeout:
          type: integer
          description: The maximum amount of time permitted to complete the transaction. Default value is 240000 milliseconds (4 minutes).
          format: int64
          example: 240000
          default: 240000
        idleTimeout:
          type: integer
          description: The maximum amount of time that API Gateway waits after sending a message over a persistent connection to the Remote Host before it closes the connection. Default value is 15000 milliseconds (15 seconds).
          format: int64
          example: 15000
          default: 15000
        maxReceiveBytes:
          type: integer
          description: The maximum amount of data the API Gateway can receive per transaction. Default value is 20971520 bytes (20MiB).
          format: int64
          example: 20971520
          default: 20971520
        maxSendBytes:
          type: integer
          description: The maximum amount of data the API Gateway can transmit per transaction. Default value is 20971520 bytes (20MiB).
          format: int64
          example: 20971520
          default: 20971520
        inputBufferSize:
          type: integer
          description: The maximum amount of memory allocated to each request. Default value is 8192 bytes.
          format: int64
          example: 8192
          default: 8192
        outputBufferSize:
          type: integer
          description: The maximum amount of memory allocated to each response. Default value is 8192 bytes.
          format: int64
          example: 8192
          default: 8192
        addressCacheTimeout:
          type: integer
          description: The period of time to cache addressing information after it has been received from the naming service. Default value is 300000 milliseconds (5 minutes)
          format: int64
          example: 300000
          default: 300000
        sslSessionCacheSize:
          type: integer
          description: Specifies the size of the SSL session cache for connections to the remote host, which controls the number of idle SSL sessions that can be kept in memory. Default value is 32.
          format: int32
          example: 32
          default: 32
        inputEncodings:
          type: array
          description: 'Specifies the HTTP content encodings that the API Gateway can accept from peers. Supported encodings: *deflate*, *gzip*. If no encodings are specified the default encoding is applied.'
          example:
            - deflate
            - gzip
          items:
            type: string
            description: 'Specifies the HTTP content encodings that the API Gateway can accept from peers. Supported encodings: *deflate*, *gzip*. If no encodings are specified the default encoding is applied.'
            example: '["deflate","gzip"]'
        outputEncodings:
          type: array
          description: 'Specifies the HTTP content encodings that the API Gateway can apply to outgoing messages. Supported encodings: *deflate*, *gzip*. If no encodings are specified the default encoding is applied.'
          example:
            - deflate
            - gzip
          items:
            type: string
            description: 'Specifies the HTTP content encodings that the API Gateway can apply to outgoing messages. Supported encodings: *deflate*, *gzip*. If no encodings are specified the default encoding is applied.'
            example: '["deflate","gzip"]'
        exportCorrelationId:
          type: boolean
          description: Specifies whether to add the X-CorrelationID header to outbound messages
          example: true
          default: true
        loadBalancing:
          type: string
          description: 'Specifies the load balancing algorithm that is performed on connection attempts made to listed host addresses. Supported values: ''roundRobin'', ''responseTime''. Default value: ''roundRobin''.'
          example: roundRobin
          enum:
            - roundRobin
            - responseTime
        responseTimeDecay:
          type: integer
          description: 'Specifies the rate of exponential decline of response times used by the ''Weighted response time'' load-balancing algorthim. Default value: 10000 (ms)'
          format: int64
          example: 10000
          default: 10000
        addressing:
          $ref: '#/components/schemas/VApiRemoteHostAddressing'
        watchdog:
          $ref: '#/components/schemas/VApiWatchdog'
      description: An API Manager-registered remote host.
    VApiRemoteHostAddressing:
      type: object
      properties:
        highestPriority:
          type: array
          description: Highest priority IP addresses
          example:
            - 5.5.5.5:8080
          items:
            type: string
            description: Highest priority IP addresses
            example: '["5.5.5.5:8080"]'
        highPriority:
          type: array
          description: High priority IP addresses
          example:
            - 4.4.4.4:8443
          items:
            type: string
            description: High priority IP addresses
            example: '["4.4.4.4:8443"]'
        mediumPriority:
          type: array
          description: Medium priority IP addresses
          example:
            - 3.3.3.3
          items:
            type: string
            description: Medium priority IP addresses
            example: '["3.3.3.3"]'
        lowestPriority:
          type: array
          description: Low priority IP addresses
          example:
            - 2.2.2.2
          items:
            type: string
            description: Low priority IP addresses
            example: '["2.2.2.2"]'
      description: Specifies a list of IP addresses that the API Gateway can use instead of attempting a DNS lookup on the host name of the remote host provided
      example: '{ "highestPriority": [ "5.5.5.5:8080"], "highPriority": [ "2.2.2.2" ], "mediumPriority": [ "3.3.3.3" ], , "lowestPriority": [ "1.2.3.4:8080" ] }'
    VApiWatchdog:
      type: object
      properties:
        responseCodes:
          type: array
          description: Specifies the HTTP response code ranges that indicate that the Remote Host is available.
          example:
            - start: 200
              end: 200
            - start: 300
              end: 999
          items:
            $ref: '#/components/schemas/VApiWatchdogResponseCodeInterval'
        httpRequest:
          $ref: '#/components/schemas/VApiWatchdogRequest'
        pollTimeout:
          type: integer
          description: Specifies how often the Watchdog is to send the a polling request to the Remote Host.
          format: int64
          example: 60000
        pollIfUp:
          type: boolean
          description: Configures the Watchdog to send poll requests during periods when it is not sending requests to and receiving responses from the Remote Host
          example: true
      description: Specifies a watchdog that can periodically poll the Remote Host to check its availability
      example:
        responseCodes:
          - start: 100
            end: 999
        httpRequest:
          method: OPTIONS
          uri: '*'
        pollTimeout: 60000
        pollIfUp: true
    VApiWatchdogRequest:
      type: object
      properties:
        method:
          type: string
          description: 'Specifies the HTTP method to be used when sending the polling request to the remote host. Possible values: [ ''GET'', ''OPTIONS'', ''POST'', ''PUT'' ]. Default value: OPTIONS'
          example: OPTIONS
          enum:
            - GET
            - PUT
            - POST
            - OPTIONS
          default: OPTIONS
        uri:
          type: string
          description: 'Specifies the HTTP URI to be used when sending the polling request to the remote host. Default value: ''*''.'
          example: '*'
          default: '*'
      description: ' Specifies the the HTTP request to poll the Remote Host with. Defaults to OPTIONS *, which is typically used to retrieve status information about a HTTP server.'
      example: {}
    VApiWatchdogResponseCodeInterval:
      type: object
      properties:
        start:
          type: integer
          description: Specifies the start value of the response code range.
          format: int32
          example: 200
        end:
          type: integer
          description: Specifies the end value of the response code range.
          format: int32
          example: 299
      description: Specifies the HTTP response code ranges that indicate that the Remote Host is available.
      example:
        - start: 200
          end: 200
        - start: 300
          end: 999
    LicenseConfig:
      type: object
      properties:
        license:
          type: boolean
          description: Indicates whether or not a valid license is available
          example: true
      description: API Manager license configuration
    AlertConfig:
      type: object
      properties:
        runSysquotaExceeded:
          type: boolean
          example: false
          default: false
        runSysquotaWarning:
          type: boolean
          example: false
          default: false
        runAppquotaExceeded:
          type: boolean
          example: false
          default: false
        runAppquotaWarning:
          type: boolean
          example: false
          default: false
        quotaOverrideChanged:
          type: boolean
          example: false
          default: false
        quotaOverrideDeleted:
          type: boolean
          example: false
          default: false
        quotaDefaultChanged:
          type: boolean
          example: false
          default: false
        quotaSystemChanged:
          type: boolean
          example: false
          default: false
        organizationCreate:
          type: boolean
          example: false
          default: false
        organizationDelete:
          type: boolean
          example: false
          default: false
        organizationEnable:
          type: boolean
          example: false
          default: false
        organizationDisable:
          type: boolean
          example: false
          default: false
        organizationAddapi:
          type: boolean
          example: false
          default: false
        organizationRemoveapi:
          type: boolean
          example: false
          default: false
        organizationEnableapi:
          type: boolean
          example: false
          default: false
        organizationDisableapi:
          type: boolean
          example: false
          default: false
        appdevRegister:
          type: boolean
          example: false
          default: false
        appdevApprove:
          type: boolean
          example: false
          default: false
        appdevDelete:
          type: boolean
          example: false
          default: false
        appdevEnable:
          type: boolean
          example: false
          default: false
        appdevDisable:
          type: boolean
          example: false
          default: false
        appdevResetpwd:
          type: boolean
          example: false
          default: false
        applicationRegister:
          type: boolean
          example: false
          default: false
        applicationApprove:
          type: boolean
          example: false
          default: false
        applicationDelete:
          type: boolean
          example: false
          default: false
        applicationEnable:
          type: boolean
          example: false
          default: false
        applicationDisable:
          type: boolean
          example: false
          default: false
        applicationRequestapi:
          type: boolean
          example: false
          default: false
        applicationApproveapi:
          type: boolean
          example: false
          default: false
        applicationRemoveapi:
          type: boolean
          example: false
          default: false
        applicationEnableapi:
          type: boolean
          example: false
          default: false
        applicationDisableapi:
          type: boolean
          example: false
          default: false
        apicatalogEnable:
          type: boolean
          example: false
          default: false
        apicatalogDisable:
          type: boolean
          example: false
          default: false
        apiproxyPublish:
          type: boolean
          example: false
          default: false
        apiproxyDeprecate:
          type: boolean
          example: false
          default: false
        apiproxyUndeprecate:
          type: boolean
          example: false
          default: false
        apiproxyRetire:
          type: boolean
          example: false
          default: false
        apiproxyUnpublish:
          type: boolean
          example: false
          default: false
        applicationcredentialsCreate:
          type: boolean
          description: Specifies whether or not an alert will be generated when an application credential is created
          example: false
          default: false
        applicationcredentialsUpdate:
          type: boolean
          description: Specifies whether or not an alert will be generated when an application credential is updated
          example: false
          default: false
        applicationcredentialsDelete:
          type: boolean
          description: Specifies whether or not an alert will be generated when an application credential is deleted
          example: false
          default: false
        applicationcredentialsEnable:
          type: boolean
          description: Specifies whether or not an alert will be generated when an application credential is enabled
          example: false
          default: false
        applicationcredentialsDisable:
          type: boolean
          description: Specifies whether or not an alert will be generated when an application credential is disabled
          example: false
          default: false
      description: API Access indicates whether access to an API is available
    Config:
      required:
        - sessionIdleTimeout
        - sessionTimeout
      type: object
      properties:
        portalName:
          type: string
          description: The name of the API Manager.
          example: API Manager
        portalHostname:
          type: string
          description: The network hostname or IP Address of the API Manager which will be used in email links.
          example: apimanager.axway.com
        apiPortalName:
          type: string
          description: The name of the API Portal
          example: Axway API Portal
        apiPortalHostname:
          type: string
          description: The network hostname or IP Address of the API Portal which will be used in email links.
          example: apiportal.axway.com
        isApiPortalConfigured:
          type: boolean
          description: Indicates if the API Portal is configured.
          example: true
        registrationEnabled:
          type: boolean
          description: Enables/disables user registration for the API Manager
          example: true
        resetPasswordEnabled:
          type: boolean
          description: Enables/disables support for resetting user passwords for the API Manager
          example: true
        changePasswordOnFirstLogin:
          type: boolean
          description: Enables/disables support for changing user passwords on first login for the API Manager
          example: true
        passwordExpiryEnabled:
          type: boolean
          description: Enables/disables support for user passwords expiration for the API Manager
          example: true
        passwordLifetimeDays:
          type: integer
          description: The number of days before user passwords expire for the API Manager
          format: int32
          example: 90
          default: 90
        minimumPasswordLength:
          type: integer
          description: The minimum password length.
          format: int32
          example: 6
          default: 6
        loginResponseTime:
          type: integer
          description: The login response time in milliseconds to mitigate user accounts enumeration
          format: int32
          example: 1000
          default: 100
        autoApproveUserRegistration:
          type: boolean
          description: Enables/disables auto-approve for user registration whereby API Administrator or Organization Administrator approval is not required.
          example: true
        systemOAuthScopesEnabled:
          type: boolean
          description: Enables/disables the ability to add System scopes to an Application. These scopes represent Gateway OAuth resources that are not covered by APIs.
          example: false
        applicationScopeRestrictions:
          type: boolean
          description: Enables/disables the ability to show Application default enabled scopes only.
          example: false
        autoApproveApplications:
          type: boolean
          description: Enables/disables auto-application approval whereby users do not need API Administrator or Organization Administrator approval.
          example: true
        delegateUserAdministration:
          type: boolean
          description: Enables/disables user administration to the Organization Administrators.
          example: true
        delegateApplicationAdministration:
          type: boolean
          description: Enables/disables application administration to the Organization Administrators.
          example: true
        apiDefaultVirtualHost:
          type: string
          description: The network host and port that serves as the default virtual host from which API Manager registered API will be accessible through.
          example: apimanager.axway.com:443
        apiRoutingKeyEnabled:
          type: boolean
          description: Enable routing to APIs on the same base path.
          example: true
        apiRoutingKeyLocation:
          type: string
          description: An additional routing key is required to support multiple APIs registered on the same base path. This indicates where to look for the value.
          example: query|param
        emailFrom:
          type: string
          description: The 'from' address used in emails.
          example: no-reply@axway.com
        emailBounceAddress:
          type: string
          description: An email address where undeliverable emails will be bounced to.
          example: apiadmin@axway.com
        promoteApiViaPolicy:
          type: boolean
          description: Enables/disables API promotion via policy.
          example: true
        globalPoliciesEnabled:
          type: boolean
          description: Enables/disables Global policies.
          example: true
        globalRequestPolicy:
          type: string
          description: The Global Request Policy to be executed for all Frontend API calls. Must be a valid policy ID. Can be null to indicate no policy
          example: Corporate Security Policy
        globalResponsePolicy:
          type: string
          description: The Global Response Policy to be executed for all Frontend API calls. Must be a valid policy ID. Can be null to indicate no policy
          example: Corporate Response Policy
        faultHandlersEnabled:
          type: boolean
          description: Enables/disables API Manager fault handlers.
          example: true
        globalFaultHandlerPolicy:
          type: string
          description: The Global Fault Handler Policy to be used by all Frontend APIs in the event of an error. Must be a valid policy ID. Can be null to indicate no policy
          example: Corporate Fault Handler Policy
          default: <key type='CircuitContainer'><id field='name' value='Generated Policies'/><key type='CircuitContainer'><id field='name' value='REST API&apos;s'/><key type='CircuitContainer'><id field='name' value='Templates'/><key type='FilterCircuit'><id field='name' value='Default Fault Handler'/></key></key></key></key>
        strictCertificateChecking:
          type: boolean
          description: For API import, strict certificate checking will only allow recognised, valid server certificates when performing API imports from SSL protected endpoints. Default is set to true
          example: true
          default: true
        serverCertificateVerification:
          type: boolean
          description: Fr API import, server certificate verification ensures that the certificate presented by the server matches the name of the remote host being connected to. Default is set to true
          example: true
          default: true
        advisoryBannerEnabled:
          type: boolean
          description: Enables/disables API Manager advisory banner.
          example: true
        advisoryBannerText:
          type: string
          description: Advisory banner text.
          example: Usage of this system constitutes consent to abide by the company's security policies and standards.
          default: Warning - unauthorized use of this tool is strictly prohibited and subject to audit, investigation, and potential prosecution.
        baseOAuth:
          type: boolean
          default: false
        oadminSelfServiceEnabled:
          type: boolean
          default: false
        externalUserName:
          type: string
          description: External user name
          example: ${userinfo.name}
        externalUserDescription:
          type: string
          description: External user description
          example: ${userinfo.description}
        externalUserPhone:
          type: string
          description: External user phone
          example: ${userinfo.phone}
        externalUserEmail:
          type: string
          description: External user email
          example: ${userinfo.email}
        externalUserOrganization:
          type: string
          description: External user organization name
          example: ${userinfo.organization}
        externalUserRole:
          type: string
          description: External user role
          example: ${userinfo.role}
        externalUserEnabled:
          type: string
          description: External user enabled
          example: ${userinfo.enabled}
        sessionIdleTimeout:
          type: integer
          description: Idle session timeout in milliseconds
          format: int64
          example: 360000
        sessionTimeout:
          type: integer
          description: Session timeout in milliseconds
          format: int64
          example: 720000
        isTrial:
          type: boolean
          description: Is trial enabled
          example: false
        defaultTrialDuration:
          type: integer
          description: Default trial duration in days
          format: int32
          example: 30
        loginNameRegex:
          type: string
          description: Login name validation regex
          example: '[^;,\/?#<>&!]{1,}'
        userNameRegex:
          type: string
          description: User name validation regex
          example: ^[\p{L}\d .,'_-]+$
        productVersion:
          type: string
          description: The Version information of API Manager.
          example: 7.7.0
          default: 7.7.20220830
        os:
          type: string
          description: The operating system on which API Manager server is running.
          example: Windows 7
        architecture:
          type: string
          description: 'The architecture of the operating system on which the API Manager server is running. Supported values: [ win-x86-32, linux-x86-64 ]'
          example: win-x86-32
        apiImportTimeout:
          type: integer
          description: API Import timeout in seconds. Defaults to 60 seconds
          format: int64
          example: 60
          default: 60
        apiImportMimeValidation:
          type: boolean
          description: Specifies whether or not mime-type validation is performed during API Import. Currently mime-type validation is implemented for Swagger (1.x and 2.0) and OAS 3.0. This feature is switched on by default
          example: true
          default: true
        apiImportEditable:
          type: boolean
          description: Specifies whether or not backend APIs can be edited post import. This option is switched OFF by default.
          example: false
          default: false
        lockUserAccount:
          $ref: '#/components/schemas/LockUserAccount'
        regTokenEmailEnabled:
          type: boolean
          description: Specifies whether or not to send an email notification when a registration token is generated for an Organization.
          example: true
          default: true
      description: API Manager configuration
    LockUserAccount:
      type: object
      properties:
        enabled:
          type: boolean
        attempts:
          type: integer
          format: int64
        timePeriod:
          type: integer
          format: int64
        timePeriodUnit:
          type: string
          enum:
            - week
            - day
            - hour
            - minute
            - second
        lockTimePeriod:
          type: integer
          format: int64
        lockTimePeriodUnit:
          type: string
          enum:
            - week
            - day
            - hour
            - minute
            - second
      description: Specifies whether or not to lock a user account when invalid login attempts are encountered; settings include, how many times authentication can be attempted, and what happens after this limit is crossed
      example:
        enabled: false
        interval: 30
        intervalUnit: minute
        attempts: 6
        timePeriod: 5
        timePeriodUnit: minute
      default:
        enabled: true
        interval: 30
        intervalUnit: minute
        attempts: 6
        timePeriod: 5
        timePeriodUnit: minute
    CACert:
      type: object
      properties:
        certBlob:
          type: string
          description: Raw certificate data
          example: YmxvYg==
        name:
          type: string
          description: Name of the certificate
          example: CN=Equifax Secure eBusiness CA-1, O=Equifax Secure Inc., C=US
        alias:
          type: string
          description: Certificate alias
          example: CN=Equifax Secure eBusiness CA-1, O=Equifax Secure Inc., C=US
        subject:
          type: string
          description: Certificate subject
          example: CN=Equifax Secure eBusiness CA-1, O=Equifax Secure Inc., C=US
        issuer:
          type: string
          description: Certificate issuer
          example: CN=Equifax Secure eBusiness CA-1, O=Equifax Secure Inc., C=US
        version:
          type: integer
          description: Version of the certificate
          format: int32
          example: 3
        notValidBefore:
          type: integer
          description: Start date of the certificate
          format: int64
          example: 1364287486876
        notValidAfter:
          type: integer
          description: Expiry date of the certificate
          format: int64
          example: 1364287486876
        signatureAlgorithm:
          type: string
          description: The algorithm used to sign the certificate.
          example: RSA (2048 bits)
        sha1Fingerprint:
          type: string
          description: SHA1 fingerprint.
          example: BC:5C:0D:3E:47:58:DF:E8:42:A4:D2:34:C5:D4:97:14:DA:54:F4:CD
        md5Fingerprint:
          type: string
          description: MD5 fingerprint.
          example: 89:DD:C1:6C:C0:6E:1D:B1:75:0C:48:E5:E6:AC:76:B0
        expired:
          type: boolean
          description: Flag indicating whether or not the certificate is expired.
          example: true
          default: false
        notYetValid:
          type: boolean
          description: Flag indicating whether or not the certificate is valid yet.
          example: false
          default: false
        inbound:
          type: boolean
          description: Flag indicating whether this certificate is used for inbound SSL connections when invoking the virtualized API.
          example: false
          default: false
        outbound:
          type: boolean
          description: Flag indicating whether this certificate is used for outbound SSL connections when invoking the virtualized API.
          example: true
          default: true
      description: The trsuted CA certificates apply to inbound and/or outbound SSL connections and are used as part of the [VirtualizedAPI](VirtualizedAPI.html).
    API:
      type: object
      properties:
        id:
          type: string
          description: An identifier
          readOnly: true
        title:
          type: string
          description: Schema title
        description:
          type: string
          description: Description of the Schema
        format:
          type: string
          description: 'The format ex: int32, int64, float, double, byte, binary, date, date-time or password'
        required:
          type: array
          description: Specifies if the parameter is required
          items:
            type: string
            description: Specifies if the parameter is required
        properties:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/SchemaObject'
          description: Not used because our model does not support inline nested types
        additionalProperties:
          type: object
          description: Specifies additional schema properties
        items:
          $ref: '#/components/schemas/SchemaObject'
        example:
          type: object
          description: Specifies an example of an instance of this schema
        xml:
          type: object
          description: Specifies metadata to describe the XML representation format of this schema
        maxLength:
          type: integer
          description: Indicates the maximum length of a parameter of type 'string'
          format: int32
          example: 100
        minLength:
          type: integer
          description: Indicates the minimum length of a parameter of type 'string'. If not present, assumed default value is 0.
          format: int32
          example: 3
        pattern:
          type: string
          description: Specifies a valid regular expression against which a parameter of type 'string' is validated.
          example: '3'
        exclusiveMinimum:
          type: boolean
          description: If true, specifies that the value of the number parameter must be greater than the specified minimum value, otherwise the value must be great than, or equal to, the specified minimum value.
          example: true
        exclusiveMaximum:
          type: boolean
          description: If true, specifies that the value of the number parameter must be less than the specified maximum value, otherwise the value must be less than, or equal to, the specified maximum value.
          example: false
        minimum:
          type: object
          description: Specifies the minimum possible value of the number parameter.
          example: 1
        maximum:
          type: object
          description: Specifies the maximum possible value of the number parameter.
          example: 100
        multipleOf:
          type: number
          description: Specifies that the value of the number parameter must be divisible by this value. Must be an integer value > 0
          example: 10
        maxItems:
          type: integer
          description: Specifies the maximum number of items permitted for array parameters. Must be an integer value greater than, or equal to 0
          format: int32
          example: 3
        minItems:
          type: integer
          description: Specifies the minimum number of items permitted for array parameters. Must be an integer value greater than, or equal to 0
          format: int32
          example: 0
        uniqueItems:
          type: boolean
          description: Specifies whether or not all array items should be unique.
          example: true
        allowEmptyValue:
          type: boolean
          description: Specifies whether or not an empty value is permitted.
          example: false
        maxProperties:
          type: integer
          description: Specifies the maximum number of items permitted for object parameters. Must be an integer value greater than, or equal to 0
          format: int32
          example: 3
        minProperties:
          type: integer
          description: Specifies the minimum number of items permitted for object parameters. Must be an integer value greater than, or equal to 0
          format: int32
          example: 0
        not:
          $ref: '#/components/schemas/SchemaObject'
        nullable:
          type: boolean
          description: Specifies whether or not a null value for the defined schema should be allowed
          example: false
        readOnly:
          type: boolean
          description: Specifies whether or not an object property is read only and should not be used as part of the request
          example: false
        writeOnly:
          type: boolean
          description: Specifies whether or not an object property is write only and should not be used as part of the response
          example: false
        deprecated:
          type: boolean
          description: Specifies whether or not the schema is deprecated. It should be transitioned out of usage
          example: false
        externalDocs:
          $ref: '#/components/schemas/ExternalDocs'
        discriminator:
          $ref: '#/components/schemas/Discriminator'
        collectionFormat:
          type: string
        oneOf:
          type: array
          description: Specifies that the schema can be one of those listed
          items:
            $ref: '#/components/schemas/SchemaObject'
        anyOf:
          type: array
          description: Specifies that the schema can be any of those listed
          items:
            $ref: '#/components/schemas/SchemaObject'
        allOf:
          type: array
          description: Specifies that the schema is a combination of all of those listed
          items:
            $ref: '#/components/schemas/SchemaObject'
        path:
          type: string
          description: The API path
          example: /users
        name:
          type: string
          description: The name of the REST API Method. This contains the exposed path.
        operations:
          type: array
          description: The list of operations that can be performed on *path*
          items:
            $ref: '#/components/schemas/Operation'
        $ref:
          type: string
          description: A Reference to a definition on definitions object
          example: '#/definitions/User'
        default:
          type: object
          description: Default value for this schema if it is applicable
        type:
          type: string
          description: 'The type ex: array , boolean, integer , null , number, object, string'
          example: string
        enum:
          type: array
          items:
            type: object
      description: API Access indicates whether access to an API is available
    Authorization:
      type: object
      properties:
        id:
          type: string
          description: An identifier
          readOnly: true
        title:
          type: string
          description: Schema title
        description:
          type: string
          description: Description of the Schema
        format:
          type: string
          description: 'The format ex: int32, int64, float, double, byte, binary, date, date-time or password'
        required:
          type: array
          description: Specifies if the parameter is required
          items:
            type: string
            description: Specifies if the parameter is required
        properties:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/SchemaObject'
          description: Not used because our model does not support inline nested types
        additionalProperties:
          type: object
          description: Specifies additional schema properties
        items:
          $ref: '#/components/schemas/SchemaObject'
        example:
          type: object
          description: Specifies an example of an instance of this schema
        xml:
          type: object
          description: Specifies metadata to describe the XML representation format of this schema
        maxLength:
          type: integer
          description: Indicates the maximum length of a parameter of type 'string'
          format: int32
          example: 100
        minLength:
          type: integer
          description: Indicates the minimum length of a parameter of type 'string'. If not present, assumed default value is 0.
          format: int32
          example: 3
        pattern:
          type: string
          description: Specifies a valid regular expression against which a parameter of type 'string' is validated.
          example: '3'
        exclusiveMinimum:
          type: boolean
          description: If true, specifies that the value of the number parameter must be greater than the specified minimum value, otherwise the value must be great than, or equal to, the specified minimum value.
          example: true
        exclusiveMaximum:
          type: boolean
          description: If true, specifies that the value of the number parameter must be less than the specified maximum value, otherwise the value must be less than, or equal to, the specified maximum value.
          example: false
        minimum:
          type: object
          description: Specifies the minimum possible value of the number parameter.
          example: 1
        maximum:
          type: object
          description: Specifies the maximum possible value of the number parameter.
          example: 100
        multipleOf:
          type: number
          description: Specifies that the value of the number parameter must be divisible by this value. Must be an integer value > 0
          example: 10
        maxItems:
          type: integer
          description: Specifies the maximum number of items permitted for array parameters. Must be an integer value greater than, or equal to 0
          format: int32
          example: 3
        minItems:
          type: integer
          description: Specifies the minimum number of items permitted for array parameters. Must be an integer value greater than, or equal to 0
          format: int32
          example: 0
        uniqueItems:
          type: boolean
          description: Specifies whether or not all array items should be unique.
          example: true
        allowEmptyValue:
          type: boolean
          description: Specifies whether or not an empty value is permitted.
          example: false
        maxProperties:
          type: integer
          description: Specifies the maximum number of items permitted for object parameters. Must be an integer value greater than, or equal to 0
          format: int32
          example: 3
        minProperties:
          type: integer
          description: Specifies the minimum number of items permitted for object parameters. Must be an integer value greater than, or equal to 0
          format: int32
          example: 0
        not:
          $ref: '#/components/schemas/SchemaObject'
        nullable:
          type: boolean
          description: Specifies whether or not a null value for the defined schema should be allowed
          example: false
        readOnly:
          type: boolean
          description: Specifies whether or not an object property is read only and should not be used as part of the request
          example: false
        writeOnly:
          type: boolean
          description: Specifies whether or not an object property is write only and should not be used as part of the response
          example: false
        deprecated:
          type: boolean
          description: Specifies whether or not the schema is deprecated. It should be transitioned out of usage
          example: false
        externalDocs:
          $ref: '#/components/schemas/ExternalDocs'
        discriminator:
          $ref: '#/components/schemas/Discriminator'
        collectionFormat:
          type: string
        oneOf:
          type: array
          description: Specifies that the schema can be one of those listed
          items:
            $ref: '#/components/schemas/SchemaObject'
        anyOf:
          type: array
          description: Specifies that the schema can be any of those listed
          items:
            $ref: '#/components/schemas/SchemaObject'
        allOf:
          type: array
          description: Specifies that the schema is a combination of all of those listed
          items:
            $ref: '#/components/schemas/SchemaObject'
        passAs:
          type: string
          description: Denotes how the API key must be passed. Valid values are 'header' or 'query'.
          example: header
        keyname:
          type: string
          description: The name of the header or query parameter to be used when passing the API key.
          example: apiKey
        scopes:
          type: array
          description: The list of OAuth scopes.
          items:
            $ref: '#/components/schemas/Scope'
        grantTypes:
          $ref: '#/components/schemas/GrantTypes'
        $ref:
          type: string
          description: A Reference to a definition on definitions object
          example: '#/definitions/User'
        default:
          type: object
          description: Default value for this schema if it is applicable
        type:
          type: string
          description: 'The authorization type.  One of: basicAuth, apiKey, oauth2, none'
          example: apiKey
        enum:
          type: array
          items:
            type: object
      description: The Authorization schemes provided for this API
      example: {}
    AuthorizationCode:
      type: object
      properties:
        id:
          type: string
          description: An identifier
          readOnly: true
        title:
          type: string
          description: Schema title
        description:
          type: string
          description: Description of the Schema
        format:
          type: string
          description: 'The format ex: int32, int64, float, double, byte, binary, date, date-time or password'
        required:
          type: array
          description: Specifies if the parameter is required
          items:
            type: string
            description: Specifies if the parameter is required
        properties:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/SchemaObject'
          description: Not used because our model does not support inline nested types
        additionalProperties:
          type: object
          description: Specifies additional schema properties
        items:
          $ref: '#/components/schemas/SchemaObject'
        example:
          type: object
          description: Specifies an example of an instance of this schema
        xml:
          type: object
          description: Specifies metadata to describe the XML representation format of this schema
        maxLength:
          type: integer
          description: Indicates the maximum length of a parameter of type 'string'
          format: int32
          example: 100
        minLength:
          type: integer
          description: Indicates the minimum length of a parameter of type 'string'. If not present, assumed default value is 0.
          format: int32
          example: 3
        pattern:
          type: string
          description: Specifies a valid regular expression against which a parameter of type 'string' is validated.
          example: '3'
        exclusiveMinimum:
          type: boolean
          description: If true, specifies that the value of the number parameter must be greater than the specified minimum value, otherwise the value must be great than, or equal to, the specified minimum value.
          example: true
        exclusiveMaximum:
          type: boolean
          description: If true, specifies that the value of the number parameter must be less than the specified maximum value, otherwise the value must be less than, or equal to, the specified maximum value.
          example: false
        minimum:
          type: object
          description: Specifies the minimum possible value of the number parameter.
          example: 1
        maximum:
          type: object
          description: Specifies the maximum possible value of the number parameter.
          example: 100
        multipleOf:
          type: number
          description: Specifies that the value of the number parameter must be divisible by this value. Must be an integer value > 0
          example: 10
        maxItems:
          type: integer
          description: Specifies the maximum number of items permitted for array parameters. Must be an integer value greater than, or equal to 0
          format: int32
          example: 3
        minItems:
          type: integer
          description: Specifies the minimum number of items permitted for array parameters. Must be an integer value greater than, or equal to 0
          format: int32
          example: 0
        uniqueItems:
          type: boolean
          description: Specifies whether or not all array items should be unique.
          example: true
        allowEmptyValue:
          type: boolean
          description: Specifies whether or not an empty value is permitted.
          example: false
        maxProperties:
          type: integer
          description: Specifies the maximum number of items permitted for object parameters. Must be an integer value greater than, or equal to 0
          format: int32
          example: 3
        minProperties:
          type: integer
          description: Specifies the minimum number of items permitted for object parameters. Must be an integer value greater than, or equal to 0
          format: int32
          example: 0
        not:
          $ref: '#/components/schemas/SchemaObject'
        nullable:
          type: boolean
          description: Specifies whether or not a null value for the defined schema should be allowed
          example: false
        readOnly:
          type: boolean
          description: Specifies whether or not an object property is read only and should not be used as part of the request
          example: false
        writeOnly:
          type: boolean
          description: Specifies whether or not an object property is write only and should not be used as part of the response
          example: false
        deprecated:
          type: boolean
          description: Specifies whether or not the schema is deprecated. It should be transitioned out of usage
          example: false
        externalDocs:
          $ref: '#/components/schemas/ExternalDocs'
        discriminator:
          $ref: '#/components/schemas/Discriminator'
        collectionFormat:
          type: string
        oneOf:
          type: array
          description: Specifies that the schema can be one of those listed
          items:
            $ref: '#/components/schemas/SchemaObject'
        anyOf:
          type: array
          description: Specifies that the schema can be any of those listed
          items:
            $ref: '#/components/schemas/SchemaObject'
        allOf:
          type: array
          description: Specifies that the schema is a combination of all of those listed
          items:
            $ref: '#/components/schemas/SchemaObject'
        tokenRequestEndpoint:
          $ref: '#/components/schemas/TokenRequestEndpoint'
        tokenEndpoint:
          $ref: '#/components/schemas/TokenEndpoint'
        $ref:
          type: string
          description: A Reference to a definition on definitions object
          example: '#/definitions/User'
        default:
          type: object
          description: Default value for this schema if it is applicable
        type:
          type: string
          description: 'The type ex: array , boolean, integer , null , number, object, string'
          example: string
        enum:
          type: array
          items:
            type: object
      description: The Authorization Code Grant flow definition.
    ClientCredentials:
      type: object
      properties:
        id:
          type: string
          description: An identifier
          readOnly: true
        title:
          type: string
          description: Schema title
        description:
          type: string
          description: Description of the Schema
        format:
          type: string
          description: 'The format ex: int32, int64, float, double, byte, binary, date, date-time or password'
        required:
          type: array
          description: Specifies if the parameter is required
          items:
            type: string
            description: Specifies if the parameter is required
        properties:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/SchemaObject'
          description: Not used because our model does not support inline nested types
        additionalProperties:
          type: object
          description: Specifies additional schema properties
        items:
          $ref: '#/components/schemas/SchemaObject'
        example:
          type: object
          description: Specifies an example of an instance of this schema
        xml:
          type: object
          description: Specifies metadata to describe the XML representation format of this schema
        maxLength:
          type: integer
          description: Indicates the maximum length of a parameter of type 'string'
          format: int32
          example: 100
        minLength:
          type: integer
          description: Indicates the minimum length of a parameter of type 'string'. If not present, assumed default value is 0.
          format: int32
          example: 3
        pattern:
          type: string
          description: Specifies a valid regular expression against which a parameter of type 'string' is validated.
          example: '3'
        exclusiveMinimum:
          type: boolean
          description: If true, specifies that the value of the number parameter must be greater than the specified minimum value, otherwise the value must be great than, or equal to, the specified minimum value.
          example: true
        exclusiveMaximum:
          type: boolean
          description: If true, specifies that the value of the number parameter must be less than the specified maximum value, otherwise the value must be less than, or equal to, the specified maximum value.
          example: false
        minimum:
          type: object
          description: Specifies the minimum possible value of the number parameter.
          example: 1
        maximum:
          type: object
          description: Specifies the maximum possible value of the number parameter.
          example: 100
        multipleOf:
          type: number
          description: Specifies that the value of the number parameter must be divisible by this value. Must be an integer value > 0
          example: 10
        maxItems:
          type: integer
          description: Specifies the maximum number of items permitted for array parameters. Must be an integer value greater than, or equal to 0
          format: int32
          example: 3
        minItems:
          type: integer
          description: Specifies the minimum number of items permitted for array parameters. Must be an integer value greater than, or equal to 0
          format: int32
          example: 0
        uniqueItems:
          type: boolean
          description: Specifies whether or not all array items should be unique.
          example: true
        allowEmptyValue:
          type: boolean
          description: Specifies whether or not an empty value is permitted.
          example: false
        maxProperties:
          type: integer
          description: Specifies the maximum number of items permitted for object parameters. Must be an integer value greater than, or equal to 0
          format: int32
          example: 3
        minProperties:
          type: integer
          description: Specifies the minimum number of items permitted for object parameters. Must be an integer value greater than, or equal to 0
          format: int32
          example: 0
        not:
          $ref: '#/components/schemas/SchemaObject'
        nullable:
          type: boolean
          description: Specifies whether or not a null value for the defined schema should be allowed
          example: false
        readOnly:
          type: boolean
          description: Specifies whether or not an object property is read only and should not be used as part of the request
          example: false
        writeOnly:
          type: boolean
          description: Specifies whether or not an object property is write only and should not be used as part of the response
          example: false
        deprecated:
          type: boolean
          description: Specifies whether or not the schema is deprecated. It should be transitioned out of usage
          example: false
        externalDocs:
          $ref: '#/components/schemas/ExternalDocs'
        discriminator:
          $ref: '#/components/schemas/Discriminator'
        collectionFormat:
          type: string
        oneOf:
          type: array
          description: Specifies that the schema can be one of those listed
          items:
            $ref: '#/components/schemas/SchemaObject'
        anyOf:
          type: array
          description: Specifies that the schema can be any of those listed
          items:
            $ref: '#/components/schemas/SchemaObject'
        allOf:
          type: array
          description: Specifies that the schema is a combination of all of those listed
          items:
            $ref: '#/components/schemas/SchemaObject'
        url:
          type: string
          description: The URL of the token endpoint for the client credentials grant flow. The value should be in a URL format.
          example: https://localhost:8089/api/oauth/token
        tokenName:
          type: string
          description: An optional alternative name to standard 'access_token' OAuth2 parameter.
          example: access_token
        $ref:
          type: string
          description: A Reference to a definition on definitions object
          example: '#/definitions/User'
        default:
          type: object
          description: Default value for this schema if it is applicable
        type:
          type: string
          description: 'The type ex: array , boolean, integer , null , number, object, string'
          example: string
        enum:
          type: array
          items:
            type: object
      description: The Client Credentials Grant flow definition.
    Discriminator:
      type: object
      properties:
        propertyName:
          type: string
        mapping:
          type: object
          additionalProperties:
            type: string
      description: Specifies an object name that is used to differentiate between other schemas. It adds support for polymorphism.
    ErrorResponse:
      type: object
      properties:
        id:
          type: string
          description: An identifier
          readOnly: true
        title:
          type: string
          description: Schema title
        description:
          type: string
          description: Description of the Schema
        format:
          type: string
          description: 'The format ex: int32, int64, float, double, byte, binary, date, date-time or password'
        required:
          type: array
          description: Specifies if the parameter is required
          items:
            type: string
            description: Specifies if the parameter is required
        properties:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/SchemaObject'
          description: Not used because our model does not support inline nested types
        additionalProperties:
          type: object
          description: Specifies additional schema properties
        items:
          $ref: '#/components/schemas/SchemaObject'
        example:
          type: object
          description: Specifies an example of an instance of this schema
        xml:
          type: object
          description: Specifies metadata to describe the XML representation format of this schema
        maxLength:
          type: integer
          description: Indicates the maximum length of a parameter of type 'string'
          format: int32
          example: 100
        minLength:
          type: integer
          description: Indicates the minimum length of a parameter of type 'string'. If not present, assumed default value is 0.
          format: int32
          example: 3
        pattern:
          type: string
          description: Specifies a valid regular expression against which a parameter of type 'string' is validated.
          example: '3'
        exclusiveMinimum:
          type: boolean
          description: If true, specifies that the value of the number parameter must be greater than the specified minimum value, otherwise the value must be great than, or equal to, the specified minimum value.
          example: true
        exclusiveMaximum:
          type: boolean
          description: If true, specifies that the value of the number parameter must be less than the specified maximum value, otherwise the value must be less than, or equal to, the specified maximum value.
          example: false
        minimum:
          type: object
          description: Specifies the minimum possible value of the number parameter.
          example: 1
        maximum:
          type: object
          description: Specifies the maximum possible value of the number parameter.
          example: 100
        multipleOf:
          type: number
          description: Specifies that the value of the number parameter must be divisible by this value. Must be an integer value > 0
          example: 10
        maxItems:
          type: integer
          description: Specifies the maximum number of items permitted for array parameters. Must be an integer value greater than, or equal to 0
          format: int32
          example: 3
        minItems:
          type: integer
          description: Specifies the minimum number of items permitted for array parameters. Must be an integer value greater than, or equal to 0
          format: int32
          example: 0
        uniqueItems:
          type: boolean
          description: Specifies whether or not all array items should be unique.
          example: true
        allowEmptyValue:
          type: boolean
          description: Specifies whether or not an empty value is permitted.
          example: false
        maxProperties:
          type: integer
          description: Specifies the maximum number of items permitted for object parameters. Must be an integer value greater than, or equal to 0
          format: int32
          example: 3
        minProperties:
          type: integer
          description: Specifies the minimum number of items permitted for object parameters. Must be an integer value greater than, or equal to 0
          format: int32
          example: 0
        not:
          $ref: '#/components/schemas/SchemaObject'
        nullable:
          type: boolean
          description: Specifies whether or not a null value for the defined schema should be allowed
          example: false
        readOnly:
          type: boolean
          description: Specifies whether or not an object property is read only and should not be used as part of the request
          example: false
        writeOnly:
          type: boolean
          description: Specifies whether or not an object property is write only and should not be used as part of the response
          example: false
        deprecated:
          type: boolean
          description: Specifies whether or not the schema is deprecated. It should be transitioned out of usage
          example: false
        externalDocs:
          $ref: '#/components/schemas/ExternalDocs'
        discriminator:
          $ref: '#/components/schemas/Discriminator'
        collectionFormat:
          type: string
        oneOf:
          type: array
          description: Specifies that the schema can be one of those listed
          items:
            $ref: '#/components/schemas/SchemaObject'
        anyOf:
          type: array
          description: Specifies that the schema can be any of those listed
          items:
            $ref: '#/components/schemas/SchemaObject'
        allOf:
          type: array
          description: Specifies that the schema is a combination of all of those listed
          items:
            $ref: '#/components/schemas/SchemaObject'
        code:
          type: integer
          format: int64
        reason:
          type: string
        schema:
          $ref: '#/components/schemas/SchemaObject'
        $ref:
          type: string
          description: A Reference to a definition on definitions object
          example: '#/definitions/User'
        default:
          type: object
          description: Default value for this schema if it is applicable
        type:
          type: string
          description: 'The type ex: array , boolean, integer , null , number, object, string'
          example: string
        enum:
          type: array
          items:
            type: object
    ExternalDocs:
      type: object
      properties:
        description:
          type: string
        url:
          type: string
      description: Specifies external documentation
    GrantTypes:
      type: object
      properties:
        id:
          type: string
          description: An identifier
          readOnly: true
        title:
          type: string
          description: Schema title
        description:
          type: string
          description: Description of the Schema
        format:
          type: string
          description: 'The format ex: int32, int64, float, double, byte, binary, date, date-time or password'
        required:
          type: array
          description: Specifies if the parameter is required
          items:
            type: string
            description: Specifies if the parameter is required
        properties:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/SchemaObject'
          description: Not used because our model does not support inline nested types
        additionalProperties:
          type: object
          description: Specifies additional schema properties
        items:
          $ref: '#/components/schemas/SchemaObject'
        example:
          type: object
          description: Specifies an example of an instance of this schema
        xml:
          type: object
          description: Specifies metadata to describe the XML representation format of this schema
        maxLength:
          type: integer
          description: Indicates the maximum length of a parameter of type 'string'
          format: int32
          example: 100
        minLength:
          type: integer
          description: Indicates the minimum length of a parameter of type 'string'. If not present, assumed default value is 0.
          format: int32
          example: 3
        pattern:
          type: string
          description: Specifies a valid regular expression against which a parameter of type 'string' is validated.
          example: '3'
        exclusiveMinimum:
          type: boolean
          description: If true, specifies that the value of the number parameter must be greater than the specified minimum value, otherwise the value must be great than, or equal to, the specified minimum value.
          example: true
        exclusiveMaximum:
          type: boolean
          description: If true, specifies that the value of the number parameter must be less than the specified maximum value, otherwise the value must be less than, or equal to, the specified maximum value.
          example: false
        minimum:
          type: object
          description: Specifies the minimum possible value of the number parameter.
          example: 1
        maximum:
          type: object
          description: Specifies the maximum possible value of the number parameter.
          example: 100
        multipleOf:
          type: number
          description: Specifies that the value of the number parameter must be divisible by this value. Must be an integer value > 0
          example: 10
        maxItems:
          type: integer
          description: Specifies the maximum number of items permitted for array parameters. Must be an integer value greater than, or equal to 0
          format: int32
          example: 3
        minItems:
          type: integer
          description: Specifies the minimum number of items permitted for array parameters. Must be an integer value greater than, or equal to 0
          format: int32
          example: 0
        uniqueItems:
          type: boolean
          description: Specifies whether or not all array items should be unique.
          example: true
        allowEmptyValue:
          type: boolean
          description: Specifies whether or not an empty value is permitted.
          example: false
        maxProperties:
          type: integer
          description: Specifies the maximum number of items permitted for object parameters. Must be an integer value greater than, or equal to 0
          format: int32
          example: 3
        minProperties:
          type: integer
          description: Specifies the minimum number of items permitted for object parameters. Must be an integer value greater than, or equal to 0
          format: int32
          example: 0
        not:
          $ref: '#/components/schemas/SchemaObject'
        nullable:
          type: boolean
          description: Specifies whether or not a null value for the defined schema should be allowed
          example: false
        readOnly:
          type: boolean
          description: Specifies whether or not an object property is read only and should not be used as part of the request
          example: false
        writeOnly:
          type: boolean
          description: Specifies whether or not an object property is write only and should not be used as part of the response
          example: false
        deprecated:
          type: boolean
          description: Specifies whether or not the schema is deprecated. It should be transitioned out of usage
          example: false
        externalDocs:
          $ref: '#/components/schemas/ExternalDocs'
        discriminator:
          $ref: '#/components/schemas/Discriminator'
        collectionFormat:
          type: string
        oneOf:
          type: array
          description: Specifies that the schema can be one of those listed
          items:
            $ref: '#/components/schemas/SchemaObject'
        anyOf:
          type: array
          description: Specifies that the schema can be any of those listed
          items:
            $ref: '#/components/schemas/SchemaObject'
        allOf:
          type: array
          description: Specifies that the schema is a combination of all of those listed
          items:
            $ref: '#/components/schemas/SchemaObject'
        implicit:
          $ref: '#/components/schemas/Implicit'
        clientCredentials:
          $ref: '#/components/schemas/ClientCredentials'
        $ref:
          type: string
          description: A Reference to a definition on definitions object
          example: '#/definitions/User'
        default:
          type: object
          description: Default value for this schema if it is applicable
        type:
          type: string
          description: 'The type ex: array , boolean, integer , null , number, object, string'
          example: string
        authorization_code:
          $ref: '#/components/schemas/AuthorizationCode'
        enum:
          type: array
          items:
            type: object
      description: The OAuth grant types.
    Implicit:
      type: object
      properties:
        id:
          type: string
          description: An identifier
          readOnly: true
        title:
          type: string
          description: Schema title
        description:
          type: string
          description: Description of the Schema
        format:
          type: string
          description: 'The format ex: int32, int64, float, double, byte, binary, date, date-time or password'
        required:
          type: array
          description: Specifies if the parameter is required
          items:
            type: string
            description: Specifies if the parameter is required
        properties:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/SchemaObject'
          description: Not used because our model does not support inline nested types
        additionalProperties:
          type: object
          description: Specifies additional schema properties
        items:
          $ref: '#/components/schemas/SchemaObject'
        example:
          type: object
          description: Specifies an example of an instance of this schema
        xml:
          type: object
          description: Specifies metadata to describe the XML representation format of this schema
        maxLength:
          type: integer
          description: Indicates the maximum length of a parameter of type 'string'
          format: int32
          example: 100
        minLength:
          type: integer
          description: Indicates the minimum length of a parameter of type 'string'. If not present, assumed default value is 0.
          format: int32
          example: 3
        pattern:
          type: string
          description: Specifies a valid regular expression against which a parameter of type 'string' is validated.
          example: '3'
        exclusiveMinimum:
          type: boolean
          description: If true, specifies that the value of the number parameter must be greater than the specified minimum value, otherwise the value must be great than, or equal to, the specified minimum value.
          example: true
        exclusiveMaximum:
          type: boolean
          description: If true, specifies that the value of the number parameter must be less than the specified maximum value, otherwise the value must be less than, or equal to, the specified maximum value.
          example: false
        minimum:
          type: object
          description: Specifies the minimum possible value of the number parameter.
          example: 1
        maximum:
          type: object
          description: Specifies the maximum possible value of the number parameter.
          example: 100
        multipleOf:
          type: number
          description: Specifies that the value of the number parameter must be divisible by this value. Must be an integer value > 0
          example: 10
        maxItems:
          type: integer
          description: Specifies the maximum number of items permitted for array parameters. Must be an integer value greater than, or equal to 0
          format: int32
          example: 3
        minItems:
          type: integer
          description: Specifies the minimum number of items permitted for array parameters. Must be an integer value greater than, or equal to 0
          format: int32
          example: 0
        uniqueItems:
          type: boolean
          description: Specifies whether or not all array items should be unique.
          example: true
        allowEmptyValue:
          type: boolean
          description: Specifies whether or not an empty value is permitted.
          example: false
        maxProperties:
          type: integer
          description: Specifies the maximum number of items permitted for object parameters. Must be an integer value greater than, or equal to 0
          format: int32
          example: 3
        minProperties:
          type: integer
          description: Specifies the minimum number of items permitted for object parameters. Must be an integer value greater than, or equal to 0
          format: int32
          example: 0
        not:
          $ref: '#/components/schemas/SchemaObject'
        nullable:
          type: boolean
          description: Specifies whether or not a null value for the defined schema should be allowed
          example: false
        readOnly:
          type: boolean
          description: Specifies whether or not an object property is read only and should not be used as part of the request
          example: false
        writeOnly:
          type: boolean
          description: Specifies whether or not an object property is write only and should not be used as part of the response
          example: false
        deprecated:
          type: boolean
          description: Specifies whether or not the schema is deprecated. It should be transitioned out of usage
          example: false
        externalDocs:
          $ref: '#/components/schemas/ExternalDocs'
        discriminator:
          $ref: '#/components/schemas/Discriminator'
        collectionFormat:
          type: string
        oneOf:
          type: array
          description: Specifies that the schema can be one of those listed
          items:
            $ref: '#/components/schemas/SchemaObject'
        anyOf:
          type: array
          description: Specifies that the schema can be any of those listed
          items:
            $ref: '#/components/schemas/SchemaObject'
        allOf:
          type: array
          description: Specifies that the schema is a combination of all of those listed
          items:
            $ref: '#/components/schemas/SchemaObject'
        loginEndpoint:
          $ref: '#/components/schemas/LoginEndpoint'
        tokenName:
          type: string
          description: An optional alternative name to standard 'access_token' OAuth2 parameter.
          example: access_token
        $ref:
          type: string
          description: A Reference to a definition on definitions object
          example: '#/definitions/User'
        default:
          type: object
          description: Default value for this schema if it is applicable
        type:
          type: string
          description: 'The type ex: array , boolean, integer , null , number, object, string'
          example: string
        enum:
          type: array
          items:
            type: object
      description: The Implicit Grant flow definition.
    LoginEndpoint:
      type: object
      properties:
        id:
          type: string
          description: An identifier
          readOnly: true
        title:
          type: string
          description: Schema title
        description:
          type: string
          description: Description of the Schema
        format:
          type: string
          description: 'The format ex: int32, int64, float, double, byte, binary, date, date-time or password'
        required:
          type: array
          description: Specifies if the parameter is required
          items:
            type: string
            description: Specifies if the parameter is required
        properties:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/SchemaObject'
          description: Not used because our model does not support inline nested types
        additionalProperties:
          type: object
          description: Specifies additional schema properties
        items:
          $ref: '#/components/schemas/SchemaObject'
        example:
          type: object
          description: Specifies an example of an instance of this schema
        xml:
          type: object
          description: Specifies metadata to describe the XML representation format of this schema
        maxLength:
          type: integer
          description: Indicates the maximum length of a parameter of type 'string'
          format: int32
          example: 100
        minLength:
          type: integer
          description: Indicates the minimum length of a parameter of type 'string'. If not present, assumed default value is 0.
          format: int32
          example: 3
        pattern:
          type: string
          description: Specifies a valid regular expression against which a parameter of type 'string' is validated.
          example: '3'
        exclusiveMinimum:
          type: boolean
          description: If true, specifies that the value of the number parameter must be greater than the specified minimum value, otherwise the value must be great than, or equal to, the specified minimum value.
          example: true
        exclusiveMaximum:
          type: boolean
          description: If true, specifies that the value of the number parameter must be less than the specified maximum value, otherwise the value must be less than, or equal to, the specified maximum value.
          example: false
        minimum:
          type: object
          description: Specifies the minimum possible value of the number parameter.
          example: 1
        maximum:
          type: object
          description: Specifies the maximum possible value of the number parameter.
          example: 100
        multipleOf:
          type: number
          description: Specifies that the value of the number parameter must be divisible by this value. Must be an integer value > 0
          example: 10
        maxItems:
          type: integer
          description: Specifies the maximum number of items permitted for array parameters. Must be an integer value greater than, or equal to 0
          format: int32
          example: 3
        minItems:
          type: integer
          description: Specifies the minimum number of items permitted for array parameters. Must be an integer value greater than, or equal to 0
          format: int32
          example: 0
        uniqueItems:
          type: boolean
          description: Specifies whether or not all array items should be unique.
          example: true
        allowEmptyValue:
          type: boolean
          description: Specifies whether or not an empty value is permitted.
          example: false
        maxProperties:
          type: integer
          description: Specifies the maximum number of items permitted for object parameters. Must be an integer value greater than, or equal to 0
          format: int32
          example: 3
        minProperties:
          type: integer
          description: Specifies the minimum number of items permitted for object parameters. Must be an integer value greater than, or equal to 0
          format: int32
          example: 0
        not:
          $ref: '#/components/schemas/SchemaObject'
        nullable:
          type: boolean
          description: Specifies whether or not a null value for the defined schema should be allowed
          example: false
        readOnly:
          type: boolean
          description: Specifies whether or not an object property is read only and should not be used as part of the request
          example: false
        writeOnly:
          type: boolean
          description: Specifies whether or not an object property is write only and should not be used as part of the response
          example: false
        deprecated:
          type: boolean
          description: Specifies whether or not the schema is deprecated. It should be transitioned out of usage
          example: false
        externalDocs:
          $ref: '#/components/schemas/ExternalDocs'
        discriminator:
          $ref: '#/components/schemas/Discriminator'
        collectionFormat:
          type: string
        oneOf:
          type: array
          description: Specifies that the schema can be one of those listed
          items:
            $ref: '#/components/schemas/SchemaObject'
        anyOf:
          type: array
          description: Specifies that the schema can be any of those listed
          items:
            $ref: '#/components/schemas/SchemaObject'
        allOf:
          type: array
          description: Specifies that the schema is a combination of all of those listed
          items:
            $ref: '#/components/schemas/SchemaObject'
        url:
          type: string
          description: The URL of the authorization endpoint for the implicit grant flow. The value should be in a URL format.
          example: http://myapi.io/oauth/dialog
        $ref:
          type: string
          description: A Reference to a definition on definitions object
          example: '#/definitions/User'
        default:
          type: object
          description: Default value for this schema if it is applicable
        type:
          type: string
          description: 'The type ex: array , boolean, integer , null , number, object, string'
          example: string
        enum:
          type: array
          items:
            type: object
      description: The login endpoint definition.
    Operation:
      type: object
      properties:
        id:
          type: string
          description: An identifier
          readOnly: true
        title:
          type: string
          description: Schema title
        description:
          type: string
          description: Description of the Schema
        format:
          type: string
          description: 'The format ex: int32, int64, float, double, byte, binary, date, date-time or password'
        required:
          type: array
          description: Specifies if the parameter is required
          items:
            type: string
            description: Specifies if the parameter is required
        properties:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/SchemaObject'
          description: Not used because our model does not support inline nested types
        additionalProperties:
          type: object
          description: Specifies additional schema properties
        items:
          $ref: '#/components/schemas/SchemaObject'
        example:
          type: object
          description: Specifies an example of an instance of this schema
        xml:
          type: object
          description: Specifies metadata to describe the XML representation format of this schema
        maxLength:
          type: integer
          description: Indicates the maximum length of a parameter of type 'string'
          format: int32
          example: 100
        minLength:
          type: integer
          description: Indicates the minimum length of a parameter of type 'string'. If not present, assumed default value is 0.
          format: int32
          example: 3
        pattern:
          type: string
          description: Specifies a valid regular expression against which a parameter of type 'string' is validated.
          example: '3'
        exclusiveMinimum:
          type: boolean
          description: If true, specifies that the value of the number parameter must be greater than the specified minimum value, otherwise the value must be great than, or equal to, the specified minimum value.
          example: true
        exclusiveMaximum:
          type: boolean
          description: If true, specifies that the value of the number parameter must be less than the specified maximum value, otherwise the value must be less than, or equal to, the specified maximum value.
          example: false
        minimum:
          type: object
          description: Specifies the minimum possible value of the number parameter.
          example: 1
        maximum:
          type: object
          description: Specifies the maximum possible value of the number parameter.
          example: 100
        multipleOf:
          type: number
          description: Specifies that the value of the number parameter must be divisible by this value. Must be an integer value > 0
          example: 10
        maxItems:
          type: integer
          description: Specifies the maximum number of items permitted for array parameters. Must be an integer value greater than, or equal to 0
          format: int32
          example: 3
        minItems:
          type: integer
          description: Specifies the minimum number of items permitted for array parameters. Must be an integer value greater than, or equal to 0
          format: int32
          example: 0
        uniqueItems:
          type: boolean
          description: Specifies whether or not all array items should be unique.
          example: true
        allowEmptyValue:
          type: boolean
          description: Specifies whether or not an empty value is permitted.
          example: false
        maxProperties:
          type: integer
          description: Specifies the maximum number of items permitted for object parameters. Must be an integer value greater than, or equal to 0
          format: int32
          example: 3
        minProperties:
          type: integer
          description: Specifies the minimum number of items permitted for object parameters. Must be an integer value greater than, or equal to 0
          format: int32
          example: 0
        not:
          $ref: '#/components/schemas/SchemaObject'
        nullable:
          type: boolean
          description: Specifies whether or not a null value for the defined schema should be allowed
          example: false
        readOnly:
          type: boolean
          description: Specifies whether or not an object property is read only and should not be used as part of the request
          example: false
        writeOnly:
          type: boolean
          description: Specifies whether or not an object property is write only and should not be used as part of the response
          example: false
        externalDocs:
          $ref: '#/components/schemas/ExternalDocs'
        discriminator:
          $ref: '#/components/schemas/Discriminator'
        collectionFormat:
          type: string
        oneOf:
          type: array
          description: Specifies that the schema can be one of those listed
          items:
            $ref: '#/components/schemas/SchemaObject'
        anyOf:
          type: array
          description: Specifies that the schema can be any of those listed
          items:
            $ref: '#/components/schemas/SchemaObject'
        allOf:
          type: array
          description: Specifies that the schema is a combination of all of those listed
          items:
            $ref: '#/components/schemas/SchemaObject'
        httpMethod:
          type: string
        nickname:
          type: string
        summary:
          type: string
        notes:
          type: string
        responseClass:
          type: string
        errorResponses:
          type: array
          items:
            $ref: '#/components/schemas/ErrorResponse'
        consumes:
          type: array
          items:
            type: string
        produces:
          type: array
          items:
            type: string
        authorizations:
          type: object
          additionalProperties:
            type: array
            items:
              type: object
        tags:
          type: object
          additionalProperties:
            type: array
            description: The list of tags associated with this API operation. Each tag can have multiple values
            example:
              Category:
                - Social Network
                - Photos
              Type:
                - REST
              Department:
                - Development
            items:
              type: string
              description: The list of tags associated with this API operation. Each tag can have multiple values
              example: '{"Category":["Social Network","Photos"],"Type":["REST"],"Department":["Development"]}'
          description: The list of tags associated with this API operation. Each tag can have multiple values
          example:
            Category:
              - Social Network
              - Photos
            Type:
              - REST
            Department:
              - Development
        securityProfile:
          $ref: '#/components/schemas/SwaggerSecurityProfile'
        documentationUrl:
          type: string
          description: The documentation URL for the operation
          example: http://api.acme.com/docs#method
        cors:
          type: boolean
          description: Indicates that the API is CORS enabled
          example: true
        parameters:
          type: array
          description: A list of accepted parameters
          items:
            $ref: '#/components/schemas/ParameterV11ex'
        $ref:
          type: string
          description: A Reference to a definition on definitions object
          example: '#/definitions/User'
        default:
          type: object
          description: Default value for this schema if it is applicable
        type:
          type: string
          description: The return type of the method, e.g. void, array, or a type found in models
          example: User
        enum:
          type: array
          items:
            type: object
      description: An operation available to an API path.
    ParameterV11ex:
      type: object
      properties:
        id:
          type: string
          description: An identifier
          readOnly: true
        title:
          type: string
          description: Schema title
        description:
          type: string
          description: Description of the Schema
        format:
          type: string
          description: 'The format ex: int32, int64, float, double, byte, binary, date, date-time or password'
        required:
          type: boolean
          description: Indicates that the parameter is required
          example: true
        properties:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/SchemaObject'
          description: Not used because our model does not support inline nested types
        additionalProperties:
          type: object
          description: Specifies additional schema properties
        items:
          $ref: '#/components/schemas/SchemaObject'
        example:
          type: object
          description: Specifies an example of an instance of this schema
        xml:
          type: object
          description: Specifies metadata to describe the XML representation format of this schema
        maxLength:
          type: integer
          description: Indicates the maximum length of a parameter of type 'string'
          format: int32
          example: 100
        minLength:
          type: integer
          description: Indicates the minimum length of a parameter of type 'string'. If not present, assumed default value is 0.
          format: int32
          example: 3
        pattern:
          type: string
          description: Specifies a valid regular expression against which a parameter of type 'string' is validated.
          example: '3'
        exclusiveMinimum:
          type: boolean
          description: If true, specifies that the value of the number parameter must be greater than the specified minimum value, otherwise the value must be great than, or equal to, the specified minimum value.
          example: true
        exclusiveMaximum:
          type: boolean
          description: If true, specifies that the value of the number parameter must be less than the specified maximum value, otherwise the value must be less than, or equal to, the specified maximum value.
          example: false
        multipleOf:
          type: number
          description: Specifies that the value of the number parameter must be divisible by this value. Must be an integer value > 0
          example: 10
        maxItems:
          type: integer
          description: Specifies the maximum number of items permitted for array parameters. Must be an integer value greater than, or equal to 0
          format: int32
          example: 3
        minItems:
          type: integer
          description: Specifies the minimum number of items permitted for array parameters. Must be an integer value greater than, or equal to 0
          format: int32
          example: 0
        uniqueItems:
          type: boolean
          description: Specifies whether or not all array items should be unique.
          example: true
        allowEmptyValue:
          type: boolean
          description: Specifies whether or not an empty value is permitted.
          example: false
        maxProperties:
          type: integer
          description: Specifies the maximum number of items permitted for object parameters. Must be an integer value greater than, or equal to 0
          format: int32
          example: 3
        minProperties:
          type: integer
          description: Specifies the minimum number of items permitted for object parameters. Must be an integer value greater than, or equal to 0
          format: int32
          example: 0
        not:
          $ref: '#/components/schemas/SchemaObject'
        nullable:
          type: boolean
          description: Specifies whether or not a null value for the defined schema should be allowed
          example: false
        readOnly:
          type: boolean
          description: Specifies whether or not an object property is read only and should not be used as part of the request
          example: false
        writeOnly:
          type: boolean
          description: Specifies whether or not an object property is write only and should not be used as part of the response
          example: false
        externalDocs:
          $ref: '#/components/schemas/ExternalDocs'
        discriminator:
          $ref: '#/components/schemas/Discriminator'
        collectionFormat:
          type: string
        oneOf:
          type: array
          description: Specifies that the schema can be one of those listed
          items:
            $ref: '#/components/schemas/SchemaObject'
        anyOf:
          type: array
          description: Specifies that the schema can be any of those listed
          items:
            $ref: '#/components/schemas/SchemaObject'
        allOf:
          type: array
          description: Specifies that the schema is a combination of all of those listed
          items:
            $ref: '#/components/schemas/SchemaObject'
        name:
          type: string
          description: The parameter name
          example: userId
        dataType:
          type: string
          description: The parameter data type, e.g. boolean, byte, date, double, float, integer, long, string, or a type name found in models
          example: string
        paramType:
          type: string
          description: The parameter type, e.g. query, path, body, header
          example: body
        allowMultiple:
          type: boolean
          description: Indicates that the parameter can be included multiple times (e.g. query or form)
          example: false
          default: false
        $ref:
          type: string
          description: A Reference to a definition on definitions object
          example: '#/definitions/User'
        default:
          type: object
          description: Default value for this schema if it is applicable
        type:
          type: string
          description: 'The type ex: array , boolean, integer , null , number, object, string'
          example: string
        enum:
          type: array
          items:
            type: object
      description: An operation parameter.
    SchemaObject:
      type: object
      properties:
        id:
          type: string
          description: An identifier
          readOnly: true
        title:
          type: string
          description: Schema title
        description:
          type: string
          description: Description of the Schema
        format:
          type: string
          description: 'The format ex: int32, int64, float, double, byte, binary, date, date-time or password'
        required:
          type: array
          description: Specifies if the parameter is required
          items:
            type: string
            description: Specifies if the parameter is required
        properties:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/SchemaObject'
          description: Not used because our model does not support inline nested types
        additionalProperties:
          type: object
          description: Specifies additional schema properties
        items:
          $ref: '#/components/schemas/SchemaObject'
        example:
          type: object
          description: Specifies an example of an instance of this schema
        xml:
          type: object
          description: Specifies metadata to describe the XML representation format of this schema
        maxLength:
          type: integer
          description: Indicates the maximum length of a parameter of type 'string'
          format: int32
          example: 100
        minLength:
          type: integer
          description: Indicates the minimum length of a parameter of type 'string'. If not present, assumed default value is 0.
          format: int32
          example: 3
        pattern:
          type: string
          description: Specifies a valid regular expression against which a parameter of type 'string' is validated.
          example: '3'
        exclusiveMinimum:
          type: boolean
          description: If true, specifies that the value of the number parameter must be greater than the specified minimum value, otherwise the value must be great than, or equal to, the specified minimum value.
          example: true
        exclusiveMaximum:
          type: boolean
          description: If true, specifies that the value of the number parameter must be less than the specified maximum value, otherwise the value must be less than, or equal to, the specified maximum value.
          example: false
        minimum:
          type: object
          description: Specifies the minimum possible value of the number parameter.
          example: 1
        maximum:
          type: object
          description: Specifies the maximum possible value of the number parameter.
          example: 100
        multipleOf:
          type: number
          description: Specifies that the value of the number parameter must be divisible by this value. Must be an integer value > 0
          example: 10
        maxItems:
          type: integer
          description: Specifies the maximum number of items permitted for array parameters. Must be an integer value greater than, or equal to 0
          format: int32
          example: 3
        minItems:
          type: integer
          description: Specifies the minimum number of items permitted for array parameters. Must be an integer value greater than, or equal to 0
          format: int32
          example: 0
        uniqueItems:
          type: boolean
          description: Specifies whether or not all array items should be unique.
          example: true
        allowEmptyValue:
          type: boolean
          description: Specifies whether or not an empty value is permitted.
          example: false
        maxProperties:
          type: integer
          description: Specifies the maximum number of items permitted for object parameters. Must be an integer value greater than, or equal to 0
          format: int32
          example: 3
        minProperties:
          type: integer
          description: Specifies the minimum number of items permitted for object parameters. Must be an integer value greater than, or equal to 0
          format: int32
          example: 0
        not:
          $ref: '#/components/schemas/SchemaObject'
        nullable:
          type: boolean
          description: Specifies whether or not a null value for the defined schema should be allowed
          example: false
        readOnly:
          type: boolean
          description: Specifies whether or not an object property is read only and should not be used as part of the request
          example: false
        writeOnly:
          type: boolean
          description: Specifies whether or not an object property is write only and should not be used as part of the response
          example: false
        deprecated:
          type: boolean
          description: Specifies whether or not the schema is deprecated. It should be transitioned out of usage
          example: false
        externalDocs:
          $ref: '#/components/schemas/ExternalDocs'
        discriminator:
          $ref: '#/components/schemas/Discriminator'
        collectionFormat:
          type: string
        oneOf:
          type: array
          description: Specifies that the schema can be one of those listed
          items:
            $ref: '#/components/schemas/SchemaObject'
        anyOf:
          type: array
          description: Specifies that the schema can be any of those listed
          items:
            $ref: '#/components/schemas/SchemaObject'
        allOf:
          type: array
          description: Specifies that the schema is a combination of all of those listed
          items:
            $ref: '#/components/schemas/SchemaObject'
        $ref:
          type: string
          description: A Reference to a definition on definitions object
          example: '#/definitions/User'
        default:
          type: object
          description: Default value for this schema if it is applicable
        type:
          type: string
          description: 'The type ex: array , boolean, integer , null , number, object, string'
          example: string
        enum:
          type: array
          items:
            type: object
      description: Schema Object model
    Scope:
      type: object
      properties:
        id:
          type: string
          description: An identifier
          readOnly: true
        title:
          type: string
          description: Schema title
        description:
          type: string
          description: Description of the Schema
        format:
          type: string
          description: 'The format ex: int32, int64, float, double, byte, binary, date, date-time or password'
        required:
          type: array
          description: Specifies if the parameter is required
          items:
            type: string
            description: Specifies if the parameter is required
        properties:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/SchemaObject'
          description: Not used because our model does not support inline nested types
        additionalProperties:
          type: object
          description: Specifies additional schema properties
        items:
          $ref: '#/components/schemas/SchemaObject'
        example:
          type: object
          description: Specifies an example of an instance of this schema
        xml:
          type: object
          description: Specifies metadata to describe the XML representation format of this schema
        maxLength:
          type: integer
          description: Indicates the maximum length of a parameter of type 'string'
          format: int32
          example: 100
        minLength:
          type: integer
          description: Indicates the minimum length of a parameter of type 'string'. If not present, assumed default value is 0.
          format: int32
          example: 3
        pattern:
          type: string
          description: Specifies a valid regular expression against which a parameter of type 'string' is validated.
          example: '3'
        exclusiveMinimum:
          type: boolean
          description: If true, specifies that the value of the number parameter must be greater than the specified minimum value, otherwise the value must be great than, or equal to, the specified minimum value.
          example: true
        exclusiveMaximum:
          type: boolean
          description: If true, specifies that the value of the number parameter must be less than the specified maximum value, otherwise the value must be less than, or equal to, the specified maximum value.
          example: false
        minimum:
          type: object
          description: Specifies the minimum possible value of the number parameter.
          example: 1
        maximum:
          type: object
          description: Specifies the maximum possible value of the number parameter.
          example: 100
        multipleOf:
          type: number
          description: Specifies that the value of the number parameter must be divisible by this value. Must be an integer value > 0
          example: 10
        maxItems:
          type: integer
          description: Specifies the maximum number of items permitted for array parameters. Must be an integer value greater than, or equal to 0
          format: int32
          example: 3
        minItems:
          type: integer
          description: Specifies the minimum number of items permitted for array parameters. Must be an integer value greater than, or equal to 0
          format: int32
          example: 0
        uniqueItems:
          type: boolean
          description: Specifies whether or not all array items should be unique.
          example: true
        allowEmptyValue:
          type: boolean
          description: Specifies whether or not an empty value is permitted.
          example: false
        maxProperties:
          type: integer
          description: Specifies the maximum number of items permitted for object parameters. Must be an integer value greater than, or equal to 0
          format: int32
          example: 3
        minProperties:
          type: integer
          description: Specifies the minimum number of items permitted for object parameters. Must be an integer value greater than, or equal to 0
          format: int32
          example: 0
        not:
          $ref: '#/components/schemas/SchemaObject'
        nullable:
          type: boolean
          description: Specifies whether or not a null value for the defined schema should be allowed
          example: false
        readOnly:
          type: boolean
          description: Specifies whether or not an object property is read only and should not be used as part of the request
          example: false
        writeOnly:
          type: boolean
          description: Specifies whether or not an object property is write only and should not be used as part of the response
          example: false
        deprecated:
          type: boolean
          description: Specifies whether or not the schema is deprecated. It should be transitioned out of usage
          example: false
        externalDocs:
          $ref: '#/components/schemas/ExternalDocs'
        discriminator:
          $ref: '#/components/schemas/Discriminator'
        collectionFormat:
          type: string
        oneOf:
          type: array
          description: Specifies that the schema can be one of those listed
          items:
            $ref: '#/components/schemas/SchemaObject'
        anyOf:
          type: array
          description: Specifies that the schema can be any of those listed
          items:
            $ref: '#/components/schemas/SchemaObject'
        allOf:
          type: array
          description: Specifies that the schema is a combination of all of those listed
          items:
            $ref: '#/components/schemas/SchemaObject'
        scope:
          type: string
          description: The OAuth2 scope name.
          example: read
        $ref:
          type: string
          description: A Reference to a definition on definitions object
          example: '#/definitions/User'
        default:
          type: object
          description: Default value for this schema if it is applicable
        type:
          type: string
          description: 'The type ex: array , boolean, integer , null , number, object, string'
          example: string
        enum:
          type: array
          items:
            type: object
      description: The list of OAuth scopes.
    Swagger:
      type: object
      properties:
        id:
          type: string
          description: An identifier
          readOnly: true
        title:
          type: string
          description: Schema title
        description:
          type: string
          description: Description of the Schema
        format:
          type: string
          description: 'The format ex: int32, int64, float, double, byte, binary, date, date-time or password'
        required:
          type: array
          description: Specifies if the parameter is required
          items:
            type: string
            description: Specifies if the parameter is required
        properties:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/SchemaObject'
          description: Not used because our model does not support inline nested types
        additionalProperties:
          type: object
          description: Specifies additional schema properties
        items:
          $ref: '#/components/schemas/SchemaObject'
        example:
          type: object
          description: Specifies an example of an instance of this schema
        xml:
          type: object
          description: Specifies metadata to describe the XML representation format of this schema
        maxLength:
          type: integer
          description: Indicates the maximum length of a parameter of type 'string'
          format: int32
          example: 100
        minLength:
          type: integer
          description: Indicates the minimum length of a parameter of type 'string'. If not present, assumed default value is 0.
          format: int32
          example: 3
        pattern:
          type: string
          description: Specifies a valid regular expression against which a parameter of type 'string' is validated.
          example: '3'
        exclusiveMinimum:
          type: boolean
          description: If true, specifies that the value of the number parameter must be greater than the specified minimum value, otherwise the value must be great than, or equal to, the specified minimum value.
          example: true
        exclusiveMaximum:
          type: boolean
          description: If true, specifies that the value of the number parameter must be less than the specified maximum value, otherwise the value must be less than, or equal to, the specified maximum value.
          example: false
        minimum:
          type: object
          description: Specifies the minimum possible value of the number parameter.
          example: 1
        maximum:
          type: object
          description: Specifies the maximum possible value of the number parameter.
          example: 100
        multipleOf:
          type: number
          description: Specifies that the value of the number parameter must be divisible by this value. Must be an integer value > 0
          example: 10
        maxItems:
          type: integer
          description: Specifies the maximum number of items permitted for array parameters. Must be an integer value greater than, or equal to 0
          format: int32
          example: 3
        minItems:
          type: integer
          description: Specifies the minimum number of items permitted for array parameters. Must be an integer value greater than, or equal to 0
          format: int32
          example: 0
        uniqueItems:
          type: boolean
          description: Specifies whether or not all array items should be unique.
          example: true
        allowEmptyValue:
          type: boolean
          description: Specifies whether or not an empty value is permitted.
          example: false
        maxProperties:
          type: integer
          description: Specifies the maximum number of items permitted for object parameters. Must be an integer value greater than, or equal to 0
          format: int32
          example: 3
        minProperties:
          type: integer
          description: Specifies the minimum number of items permitted for object parameters. Must be an integer value greater than, or equal to 0
          format: int32
          example: 0
        not:
          $ref: '#/components/schemas/SchemaObject'
        nullable:
          type: boolean
          description: Specifies whether or not a null value for the defined schema should be allowed
          example: false
        readOnly:
          type: boolean
          description: Specifies whether or not an object property is read only and should not be used as part of the request
          example: false
        writeOnly:
          type: boolean
          description: Specifies whether or not an object property is write only and should not be used as part of the response
          example: false
        deprecated:
          type: boolean
          description: Indicates that the API is deprecated.  If 'true', then the API may have a 'retirementDate'.
          example: false
        externalDocs:
          $ref: '#/components/schemas/ExternalDocs'
        discriminator:
          $ref: '#/components/schemas/Discriminator'
        collectionFormat:
          type: string
        oneOf:
          type: array
          description: Specifies that the schema can be one of those listed
          items:
            $ref: '#/components/schemas/SchemaObject'
        anyOf:
          type: array
          description: Specifies that the schema can be any of those listed
          items:
            $ref: '#/components/schemas/SchemaObject'
        allOf:
          type: array
          description: Specifies that the schema is a combination of all of those listed
          items:
            $ref: '#/components/schemas/SchemaObject'
        apiVersion:
          type: string
          description: The API version
          example: '1.0'
        swaggerVersion:
          type: string
          description: The Swagger version
          example: '1.1'
          default: '1.1'
        basePath:
          type: string
          description: The base path
          example: http://basepath.org
        resourcePath:
          type: string
          description: The resource path hosted
          example: /api
        models:
          type: object
          additionalProperties:
            type: object
            description: The models/schema for the API
            example:
              User:
                type: object
                required:
                  - id
                  - name
                  - email
                properties:
                  id:
                    type: string
                  name:
                    type: string
                  email:
                    type: string
          description: The models/schema for the API
          example:
            User:
              type: object
              required:
                - id
                - name
                - email
              properties:
                id:
                  type: string
                name:
                  type: string
                email:
                  type: string
        consumes:
          type: array
          description: The content types that the API consumes
          example:
            - application/json
          items:
            type: string
            description: The content types that the API consumes
            example: '["application/json"]'
        produces:
          type: array
          description: The content types that the API produces
          example:
            - application/json
          items:
            type: string
            description: The content types that the API produces
            example: '["application/json"]'
        authorizations:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Authorization'
          description: The Authorization schemes provided for this API
          example: {}
        name:
          type: string
          description: The name of the API
          example: Flickr
        summary:
          type: string
          description: Brief summary of the API.
          example: The Flickr photo-sharing API
        securityProfile:
          $ref: '#/components/schemas/SwaggerSecurityProfile'
        basePaths:
          type: array
          description: Array of basePaths supported for this API/service, based on the configured ports
          example:
            - http://localhost:8080
            - https://localhost:8081
          items:
            type: string
            description: Array of basePaths supported for this API/service, based on the configured ports
            example: '["http://localhost:8080","https://localhost:8081"]'
        image:
          type: string
          description: API image URL
        state:
          type: string
          description: 'The state of the API.  Possible values: ''pending'', ''unpublished'', or ''published''.'
          example: rest
        cors:
          type: boolean
          description: Indicates that the API is CORS enabled
          example: true
        expired:
          type: boolean
          description: Indicates that the API is expired.
          example: false
        retirementDate:
          type: integer
          description: Indicates that the API is deprecated and will be retired on the supplied date (in milliseconds).
          format: int64
          example: 1420070400000
        retired:
          type: boolean
          description: Indicates that the API is retired.
          example: false
        tags:
          type: object
          additionalProperties:
            type: array
            description: The list of tags associated with this API. Each tag can have multiple values
            example:
              Category:
                - Social Network
                - Photos
              Type:
                - REST
              Department:
                - Development
            items:
              type: string
              description: The list of tags associated with this API. Each tag can have multiple values
              example: '{"Category":["Social Network","Photos"],"Type":["REST"],"Department":["Development"]}'
          description: The list of tags associated with this API. Each tag can have multiple values
          example:
            Category:
              - Social Network
              - Photos
            Type:
              - REST
            Department:
              - Development
        documentationUrl:
          type: string
          description: The documentation URL for the operation
          example: http://api.acme.com/docs#method
        availableApiDefinitions:
          type: object
          additionalProperties:
            type: string
            description: The schema definitions that this API supports and links to those definitions.
            format: uri
            example: '{}'
          description: The schema definitions that this API supports and links to those definitions.
          example: {}
        availableSDK:
          type: object
          additionalProperties:
            type: string
            description: The SDK downloads that this API supports and links to those downloads.
            format: uri
            example: '{}'
          description: The SDK downloads that this API supports and links to those downloads.
          example: {}
        apis:
          type: array
          description: The API resources
          items:
            $ref: '#/components/schemas/API'
        customProperties:
          type: object
          additionalProperties:
            type: string
            description: Dictionary of name/value pairs containing the custom properties defined for this API
            example: '{"customProperty1":"value1","customProperty2":"value2"}'
          description: Dictionary of name/value pairs containing the custom properties defined for this API
          example:
            customProperty1: value1
            customProperty2: value2
        createDate:
          type: integer
          description: Epoch/Unix time stamp when the API was created
          format: int64
          example: 1364407145321
        accessGrantedDate:
          type: integer
          description: Epoch/Unix time stamp when the API access was granted
          format: int64
          example: 1364407145321
        $ref:
          type: string
          description: A Reference to a definition on definitions object
          example: '#/definitions/User'
        default:
          type: object
          description: Default value for this schema if it is applicable
        type:
          type: string
          description: 'The resource type. Possible values: ''rest'', ''wsdl'''
          example: rest
        enum:
          type: array
          items:
            type: object
      description: A Swagger API definition.
    SwaggerSecurityDevice:
      type: object
      properties:
        type:
          type: string
          description: 'Type identifier for the device. Possible Values: HTTPBasicSecurityDevice, OAuthSecurityDevice, AWSRESTRequestSecurityDevice, AWSQueryStringRequestSecurityDevice, APIKeyOnlySecurityDevice, APIKeyAndSecretSecurityDevice, TwoWaySSLSecurityDevice'
          example: HTTPBasicSecurityDevice
        typeDisplayName:
          type: string
          description: Textual display name for the device
          example: HTTP Basic Authentication
        name:
          type: string
          description: Name of the device
          example: HTTP Basic Device
        order:
          type: integer
          description: Order of preference, zero being highest. Devices will attempt to authenticate the incoming request using this order of preference.
          format: int32
        scopes:
          type: array
          description: The list of scopes defined for the security device.
          example: resource.READ
          items:
            type: string
            description: The list of scopes defined for the security device.
            example: resource.READ
        scopeMatching:
          type: string
          description: 'Specifies how scopes will be matched. Possible values: [ Any, All ]'
          example: Any
      description: A Swagger API definition.
      example:
        - type: APIKeyOnlySecurityDevice
          typeDisplayName: API Key only
          name: API Key Device
          order: 1
          keyField: KeyId
        - type: HTTPBasicSecurityDevice
          typeDisplayName: HTTP Basic Authentication
          name: HTTP Basic Device
          order: 0
          realm: axway
    SwaggerSecurityProfile:
      type: object
      properties:
        devices:
          type: array
          description: List of Security Devices associated with this profile
          example:
            - type: APIKeyOnlySecurityDevice
              typeDisplayName: API Key only
              name: API Key Device
              order: 1
              keyField: KeyId
            - type: HTTPBasicSecurityDevice
              typeDisplayName: HTTP Basic Authentication
              name: HTTP Basic Device
              order: 0
              realm: axway
          items:
            $ref: '#/components/schemas/SwaggerSecurityDevice'
      description: A Swagger API definition.
    TokenEndpoint:
      type: object
      properties:
        id:
          type: string
          description: An identifier
          readOnly: true
        title:
          type: string
          description: Schema title
        description:
          type: string
          description: Description of the Schema
        format:
          type: string
          description: 'The format ex: int32, int64, float, double, byte, binary, date, date-time or password'
        required:
          type: array
          description: Specifies if the parameter is required
          items:
            type: string
            description: Specifies if the parameter is required
        properties:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/SchemaObject'
          description: Not used because our model does not support inline nested types
        additionalProperties:
          type: object
          description: Specifies additional schema properties
        items:
          $ref: '#/components/schemas/SchemaObject'
        example:
          type: object
          description: Specifies an example of an instance of this schema
        xml:
          type: object
          description: Specifies metadata to describe the XML representation format of this schema
        maxLength:
          type: integer
          description: Indicates the maximum length of a parameter of type 'string'
          format: int32
          example: 100
        minLength:
          type: integer
          description: Indicates the minimum length of a parameter of type 'string'. If not present, assumed default value is 0.
          format: int32
          example: 3
        pattern:
          type: string
          description: Specifies a valid regular expression against which a parameter of type 'string' is validated.
          example: '3'
        exclusiveMinimum:
          type: boolean
          description: If true, specifies that the value of the number parameter must be greater than the specified minimum value, otherwise the value must be great than, or equal to, the specified minimum value.
          example: true
        exclusiveMaximum:
          type: boolean
          description: If true, specifies that the value of the number parameter must be less than the specified maximum value, otherwise the value must be less than, or equal to, the specified maximum value.
          example: false
        minimum:
          type: object
          description: Specifies the minimum possible value of the number parameter.
          example: 1
        maximum:
          type: object
          description: Specifies the maximum possible value of the number parameter.
          example: 100
        multipleOf:
          type: number
          description: Specifies that the value of the number parameter must be divisible by this value. Must be an integer value > 0
          example: 10
        maxItems:
          type: integer
          description: Specifies the maximum number of items permitted for array parameters. Must be an integer value greater than, or equal to 0
          format: int32
          example: 3
        minItems:
          type: integer
          description: Specifies the minimum number of items permitted for array parameters. Must be an integer value greater than, or equal to 0
          format: int32
          example: 0
        uniqueItems:
          type: boolean
          description: Specifies whether or not all array items should be unique.
          example: true
        allowEmptyValue:
          type: boolean
          description: Specifies whether or not an empty value is permitted.
          example: false
        maxProperties:
          type: integer
          description: Specifies the maximum number of items permitted for object parameters. Must be an integer value greater than, or equal to 0
          format: int32
          example: 3
        minProperties:
          type: integer
          description: Specifies the minimum number of items permitted for object parameters. Must be an integer value greater than, or equal to 0
          format: int32
          example: 0
        not:
          $ref: '#/components/schemas/SchemaObject'
        nullable:
          type: boolean
          description: Specifies whether or not a null value for the defined schema should be allowed
          example: false
        readOnly:
          type: boolean
          description: Specifies whether or not an object property is read only and should not be used as part of the request
          example: false
        writeOnly:
          type: boolean
          description: Specifies whether or not an object property is write only and should not be used as part of the response
          example: false
        deprecated:
          type: boolean
          description: Specifies whether or not the schema is deprecated. It should be transitioned out of usage
          example: false
        externalDocs:
          $ref: '#/components/schemas/ExternalDocs'
        discriminator:
          $ref: '#/components/schemas/Discriminator'
        collectionFormat:
          type: string
        oneOf:
          type: array
          description: Specifies that the schema can be one of those listed
          items:
            $ref: '#/components/schemas/SchemaObject'
        anyOf:
          type: array
          description: Specifies that the schema can be any of those listed
          items:
            $ref: '#/components/schemas/SchemaObject'
        allOf:
          type: array
          description: Specifies that the schema is a combination of all of those listed
          items:
            $ref: '#/components/schemas/SchemaObject'
        url:
          type: string
          description: The URL of the token endpoint for the authentication code grant flow. The value should be in a URL format.
          example: http://myapi.io/oauth/token
        tokenName:
          type: string
          description: An optional alternative name to standard 'access_code' OAuth2 parameter.
          example: access_code
        $ref:
          type: string
          description: A Reference to a definition on definitions object
          example: '#/definitions/User'
        default:
          type: object
          description: Default value for this schema if it is applicable
        type:
          type: string
          description: 'The type ex: array , boolean, integer , null , number, object, string'
          example: string
        enum:
          type: array
          items:
            type: object
      description: The login endpoint definition.
    TokenRequestEndpoint:
      type: object
      properties:
        id:
          type: string
          description: An identifier
          readOnly: true
        title:
          type: string
          description: Schema title
        description:
          type: string
          description: Description of the Schema
        format:
          type: string
          description: 'The format ex: int32, int64, float, double, byte, binary, date, date-time or password'
        required:
          type: array
          description: Specifies if the parameter is required
          items:
            type: string
            description: Specifies if the parameter is required
        properties:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/SchemaObject'
          description: Not used because our model does not support inline nested types
        additionalProperties:
          type: object
          description: Specifies additional schema properties
        items:
          $ref: '#/components/schemas/SchemaObject'
        example:
          type: object
          description: Specifies an example of an instance of this schema
        xml:
          type: object
          description: Specifies metadata to describe the XML representation format of this schema
        maxLength:
          type: integer
          description: Indicates the maximum length of a parameter of type 'string'
          format: int32
          example: 100
        minLength:
          type: integer
          description: Indicates the minimum length of a parameter of type 'string'. If not present, assumed default value is 0.
          format: int32
          example: 3
        pattern:
          type: string
          description: Specifies a valid regular expression against which a parameter of type 'string' is validated.
          example: '3'
        exclusiveMinimum:
          type: boolean
          description: If true, specifies that the value of the number parameter must be greater than the specified minimum value, otherwise the value must be great than, or equal to, the specified minimum value.
          example: true
        exclusiveMaximum:
          type: boolean
          description: If true, specifies that the value of the number parameter must be less than the specified maximum value, otherwise the value must be less than, or equal to, the specified maximum value.
          example: false
        minimum:
          type: object
          description: Specifies the minimum possible value of the number parameter.
          example: 1
        maximum:
          type: object
          description: Specifies the maximum possible value of the number parameter.
          example: 100
        multipleOf:
          type: number
          description: Specifies that the value of the number parameter must be divisible by this value. Must be an integer value > 0
          example: 10
        maxItems:
          type: integer
          description: Specifies the maximum number of items permitted for array parameters. Must be an integer value greater than, or equal to 0
          format: int32
          example: 3
        minItems:
          type: integer
          description: Specifies the minimum number of items permitted for array parameters. Must be an integer value greater than, or equal to 0
          format: int32
          example: 0
        uniqueItems:
          type: boolean
          description: Specifies whether or not all array items should be unique.
          example: true
        allowEmptyValue:
          type: boolean
          description: Specifies whether or not an empty value is permitted.
          example: false
        maxProperties:
          type: integer
          description: Specifies the maximum number of items permitted for object parameters. Must be an integer value greater than, or equal to 0
          format: int32
          example: 3
        minProperties:
          type: integer
          description: Specifies the minimum number of items permitted for object parameters. Must be an integer value greater than, or equal to 0
          format: int32
          example: 0
        not:
          $ref: '#/components/schemas/SchemaObject'
        nullable:
          type: boolean
          description: Specifies whether or not a null value for the defined schema should be allowed
          example: false
        readOnly:
          type: boolean
          description: Specifies whether or not an object property is read only and should not be used as part of the request
          example: false
        writeOnly:
          type: boolean
          description: Specifies whether or not an object property is write only and should not be used as part of the response
          example: false
        deprecated:
          type: boolean
          description: Specifies whether or not the schema is deprecated. It should be transitioned out of usage
          example: false
        externalDocs:
          $ref: '#/components/schemas/ExternalDocs'
        discriminator:
          $ref: '#/components/schemas/Discriminator'
        collectionFormat:
          type: string
        oneOf:
          type: array
          description: Specifies that the schema can be one of those listed
          items:
            $ref: '#/components/schemas/SchemaObject'
        anyOf:
          type: array
          description: Specifies that the schema can be any of those listed
          items:
            $ref: '#/components/schemas/SchemaObject'
        allOf:
          type: array
          description: Specifies that the schema is a combination of all of those listed
          items:
            $ref: '#/components/schemas/SchemaObject'
        url:
          type: string
          description: The URL of the authorization endpoint for the authentication code grant flow. The value should be in a URL format.
          example: .
        clientIdName:
          type: string
          description: An optional alternative name to standard "client_id" OAuth2 parameter.
          example: .
        clientSecretName:
          type: string
          description: An optional alternative name to standard "client_secret" OAuth2 parameter.
          example: .
        $ref:
          type: string
          description: A Reference to a definition on definitions object
          example: '#/definitions/User'
        default:
          type: object
          description: Default value for this schema if it is applicable
        type:
          type: string
          description: 'The type ex: array , boolean, integer , null , number, object, string'
          example: string
        enum:
          type: array
          items:
            type: object
      description: The login endpoint definition.
    ReferencedEntity:
      required:
        - id
        - name
      type: object
      properties:
        name:
          type: string
          description: Name of the referenced entity (as specified in Policy Studio configuration).
          example: My Request Policy
        id:
          type: string
          description: Portable version of the ESPK of this referenced entity, formatted as an XML fragment.
          example: <key type='Example'>...</key>
      description: A referenced entity from the Policy Studio configuration.  Entities of this type have a dependency on the Policy Studio configuration.
    PortalTrafficListener:
      required:
        - address
        - id
        - name
        - port
        - protocol
      type: object
      properties:
        id:
          type: string
          description: The service listener identifier
          example: /[NetService]name=Service/[HTTP]name=API Portal
        name:
          type: string
          description: The name of the service listener
          example: API Manager
        protocol:
          type: string
          description: The listener protocol
          example: http
        port:
          type: integer
          description: The listener port
          format: int32
          example: 8080
        prefix:
          type: string
          description: The listener prefix
        address:
          type: string
          description: The listener address
          example: localhost
        url:
          type: string
          description: The listener URL
          example: http://localhost:8080
      description: A HTTP service listener.
    SystemConfig:
      type: object
      properties:
        disabledApis:
          type: array
          description: Returns a list of disabled APIs
          example:
            - c1c63d3b-5283-4755-ade7-e2377bd35049
          items:
            type: string
            description: Returns a list of disabled APIs
            example: '["c1c63d3b-5283-4755-ade7-e2377bd35049"]'
      description: API Manager system configuration
    Group:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        lock:
          $ref: '#/components/schemas/Lock'
        services:
          type: array
          items:
            $ref: '#/components/schemas/Service'
        tags:
          type: object
          additionalProperties:
            type: string
    Host:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    Lock:
      type: object
      properties:
        locker:
          type: string
        timestamp:
          type: integer
          format: int64
    Service:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        scheme:
          type: string
        hostID:
          type: string
        managementPort:
          type: integer
          format: int32
        tags:
          type: object
          additionalProperties:
            type: string
        type:
          type: string
          enum:
            - gateway
            - nodemanager
        enabled:
          type: boolean
    Topology:
      type: object
      properties:
        id:
          type: string
        version:
          type: integer
          format: int32
        timestamp:
          type: integer
          format: int64
        productVersion:
          type: string
        emtEnabled:
          type: boolean
        hosts:
          type: array
          items:
            $ref: '#/components/schemas/Host'
        groups:
          type: array
          items:
            $ref: '#/components/schemas/Group'
        uniqueIdCounters:
          type: object
          additionalProperties:
            type: integer
            format: int32
        services:
          type: array
          items:
            $ref: '#/components/schemas/Service'
    AuthenticationProfile:
      type: object
      properties:
        name:
          type: string
          description: Unique name of the Profile
          example: Default Security Profile
        isDefault:
          type: boolean
          description: Indicates that this is the default profile.  There can be only one default.
          example: false
          default: false
        parameters:
          type: object
          additionalProperties:
            type: object
            description: Parameters for the backend authentication profile
            example:
              apiKey: e7812c14-b67a-4eef-84a1-e18c0d8436ba
              apiKeyField: KeyId
              httpLocation: query
          description: Parameters for the backend authentication profile
          example:
            apiKey: e7812c14-b67a-4eef-84a1-e18c0d8436ba
            apiKeyField: KeyId
            httpLocation: query
        type:
          type: string
          description: 'Type of backend authentication. Possible values: *none*, *http_basic*, *http_digest*, *apiKey*, *oauth*, and *ssl*.'
          example: apikey
      description: Profile configuration that provides suport for outbound (backend) authentication, supporting no authentication, HTTP Basic, HTTP Digest, API Key, OAuth, and SSL authentication.
    CORSProfile:
      type: object
      properties:
        name:
          type: string
          description: Unique name of the Profile
          example: Default Security Profile
        isDefault:
          type: boolean
          description: Indicates that this is the default profile.  There can be only one default.
          example: false
          default: false
        origins:
          type: array
          description: List of origins for this CORS Profile
          example:
            - http://api.google.com
            - http://api.flickr.com
          items:
            type: string
            description: List of origins for this CORS Profile
            example: '["http://api.google.com","http://api.flickr.com"]'
        allowedHeaders:
          type: array
          description: List of headers...
          example:
            - X-Request-Value
            - X-Hello-World
          items:
            type: string
            description: List of headers...
            example: '["X-Request-Value","X-Hello-World"]'
        exposedHeaders:
          type: array
          description: List of headers...
          example:
            - X-Trace
            - X-CorrelationID
          items:
            type: string
            description: List of headers...
            example: '["X-Trace","X-CorrelationID"]'
        supportCredentials:
          type: boolean
          description: Specifies whether or credentials are supported for APIs/API Methods employing this CORS Profile.
          example: false
        maxAgeSeconds:
          type: integer
          description: Specifies the amount of time responses to OPTIONS requests are stored, in seconds, in the preflight result cache
          format: int64
          example: 84600
      description: Configures cross-origin resource sharing (CORS) as per w3c [CORS specification](http://www.w3.org/TR/cors/#resource-requests).
    InboundProfiles:
      type: object
      properties:
        securityProfile:
          type: string
          description: The name of the Security Profile to be used for this Virtualized API.
          example: Default Inbound Security
        corsProfile:
          type: string
          description: The name of the CORS Profile to be used for this Virtualized API.
          example: Default CORS profile
        monitorAPI:
          type: boolean
          description: Enables metrics monitoring for the API
          example: true
        queryStringPassThrough:
          type: boolean
          description: Enables query string pass through for the API
          example: false
          default: false
        monitorSubject:
          type: string
          description: Identifies the client for metrics monitoring
          example: authentication.subject.id
      description: |-
        The inbound profile provides configuration for the frontend.  The *\_default* profile applies to all inbound API calls.  However, methods may be overridden using the InboundProfiles.

        The inbound profile overrides are used as part of the [VirtualizedAPI](VirtualizedAPI.html) definition and alters the normal API proxy behavior, allowing complete control over the frontend.  Using the InboundProfiles, it is possible to enforce frontend security by setting **securityProfile** to the name of a configured [SecurityProfile](SecurityProfile.html).  Monitoring for the API may be enabled/disabled using **monitorAPI**. The subject (client) for monitoring can be obtained from any message attribute, and can be changed using **monitorSubject**.  In addition, CORS settings can be set using the **corsProfile**.
    OutboundProfiles:
      type: object
      properties:
        authenticationProfile:
          type: string
          description: Outbound authentication credentials if __routeType__ is 'proxy'.  Can be null to indicate no credentials.
          example: My Backend
        routeType:
          type: string
          description: 'The route type.  Values are either: ''proxy'' or ''policy''.    Can be null and defaults to *proxy*.'
          example: proxy
        requestPolicy:
          type: string
          description: Request policy that applies to all outbound requests.  Can be null to indicate no policy.
        responsePolicy:
          type: string
          description: Response policy that applies to all responses from outbound requests.  Can be null to indicate no policy.
        routePolicy:
          type: string
          description: Route policy if the routeType is 'policy', in which case it must be a valid policy ID.  Can be null if __routeType__ is 'proxy'.
        faultHandlerPolicy:
          type: string
          description: Fault handler policy that gets executed in the event of an error.  Can be null to indicate no policy.
        apiId:
          type: string
          description: Route to a different API.  Can be null.  Ignored on the 'default' outbound profile.
          example: 9064396e-7743-4644-a0b7-d30b421e2b30
        apiMethodId:
          type: string
          description: Route to a different API method.  Can be null.  Ignored on the 'default' outbound profile.
          example: 7fd18d9a-1258-4031-a168-d7f6bf612dc1
        parameters:
          type: array
          description: A list of outbound parameters values - maps from frontend parameters to backend parameters.
          items:
            $ref: '#/components/schemas/ParamValue'
      description: |-
        The outbound profile provides configuration for the backend.  The *\_default* profile applies to all outbound, backend API calls.  However, methods may be overridden using the OutboundProfile.

        The outbound profile overrides are used as part of the [VirtualizedAPI](VirtualizedAPI.html) definition and alters the normal API proxy behavior, allowing complete control over the backend.  Using the OutboundProfiles, it is possible to provide backend authentication by setting **authenticationProfile** to the name of a configured [AuthenticationProfile](AuthenticationProfile.html).  Optionally, a completely different API and method may be invoked using a reference to a different **apiId** and **apiMethodId** from a valid [APIDefinition](APIDefinition.html). Parameters can be added/removed using **parameters**, or their values changed completely. It is also possible to apply a **requestPolicy** or **responsePolicy** that has been configured in Policy Studio.  For total control, the **routeType** can be changed to _proxy_ and use the **reoutePolicy** to route to a policy instead of a backend service.
    ParamValue:
      type: object
      properties:
        name:
          type: string
          description: The parameter name.
          example: id
        paramType:
          type: string
          description: 'The type of parameter type.  Can be one of: *body*, *query*, *path*, *form*, or *header*.'
          example: query
        type:
          type: string
          description: 'The parameter data type.  Can be one of: *string*, *integer*, etc.'
          example: string
        format:
          type: string
          description: The parameter format
          example: int64
        value:
          type: string
          description: 'The parameter value.  Can be a regular value, or a selector, e.g.: ${params.path.id}.'
          example: ${params.path.id}
        required:
          type: boolean
          description: Indicates whether or not the parameter is required for the backend API.
          example: true
        exclude:
          type: boolean
          description: Indicates whether or not the parameter is excluded for the backend API.
          example: false
        additional:
          type: boolean
          description: Indicates whether or not the parameter is an additional parameter (does not replace an existing parameter).
          example: false
      description: Represents an API method parameter used in [OutboundProfiles](OutboundProfiles.html).
    SecurityDevice:
      type: object
      properties:
        name:
          type: string
          description: Unique name of the Security Device.
          example: My Pass-through Device
        type:
          type: string
          description: 'The Security device type.  Values are one of: *apiKey*, *awsHeader*, *awsQuery*, *basic*, *authPolicy*, *oauth*, *oauthExternal*, *passThrough*, or *twoWaySSL*.'
          example: apiKey
        order:
          type: integer
          description: Specifies the order in which this device will be invoked.
          format: int32
          example: 1
        properties:
          type: object
          additionalProperties:
            type: string
            description: List of device-specific properties.
            example: '{"apiKeyFieldName":"APIKey","takeFrom":"HEADER"}'
          description: List of device-specific properties.
          example:
            apiKeyFieldName: APIKey
            takeFrom: HEADER
      description: Inbound security device.
    SecurityProfile:
      type: object
      properties:
        name:
          type: string
          description: Unique name of the Profile
          example: Default Security Profile
        isDefault:
          type: boolean
          description: Indicates that this is the default profile.  There can be only one default.
          example: false
          default: false
        devices:
          type: array
          description: List of SecurityDevice for this security profile
          items:
            $ref: '#/components/schemas/SecurityDevice'
      description: Inbound security profile.
    ServiceProfiles:
      type: object
      properties:
        apiId:
          type: string
          description: The backend service API identifier
          example: 96f745ae-a41a-41a9-aad8-8bf24b5cc27e
        basePath:
          type: string
          description: The backend service base path URL
          example: http://backend.io
      description: Service profile configuration for backend services
    VirtualizedAPI:
      required:
        - apiId
        - apiRoutingKey
        - authenticationProfiles
        - caCerts
        - corsProfiles
        - deprecated
        - descriptionManual
        - descriptionMarkdown
        - descriptionType
        - descriptionUrl
        - expired
        - id
        - image
        - inboundProfiles
        - name
        - organizationId
        - path
        - retired
        - retirementDate
        - securityProfiles
        - serviceProfiles
        - state
        - summary
        - tags
        - version
        - vhost
      type: object
      properties:
        id:
          type: string
          description: Unique ID of the virtualized API.
          readOnly: true
          example: bacb827e-e555-43fa-b006-50c7404aa990
        organizationId:
          type: string
          description: The organization that created the virtualized API.
          example: b6889722b7-222-b06f-2eaaf1548898
        apiId:
          type: string
          description: The identifier of the API that was virtualized.  This is the only attribute that is required to create a virtualized API.
          example: 9064396e-7743-4644-a0b7-d30b421e2b30
        name:
          type: string
          description: The name of this virtualized API.
          example: My virtualized API
        version:
          type: string
          description: The API version.
          example: '1.0'
        apiRoutingKey:
          type: string
          description: The key for routing between two APIs on the same path.
          example: '1'
        vhost:
          type: string
          description: The virtual host of this virtualized API.
          example: host.company.com
        path:
          type: string
          description: The path that services this virtualized API.
          example: /flikr
        descriptionType:
          type: string
          description: 'Type of descripton to use.  One of: _manual_, _markdown_, _url_, or _original_ (default).'
          example: manual
        descriptionManual:
          type: string
          description: Markdown string to use as the description of the API.
          example: |-
            My API
            ====

            This is my API.
        descriptionMarkdown:
          type: string
          description: Markdown file to use as the description of the API within the API Catalog.
          example: ${environment.VINSTDIR}/../markdown/flickr/flickr.md
        descriptionUrl:
          type: string
          description: External URL to use as the description of the API.
          example: http://doc.api.org/myapi/mymethod#anchor
        summary:
          type: string
          description: A short summary description of the API.
          example: |-
            My API
            ====

            This is my API.
        retired:
          type: boolean
          description: Immediately retires the virtualized API.
          example: false
        expired:
          type: boolean
          description: Immediately expires the virtualized API.
          example: false
        image:
          type: string
          description: URI of the image to be used for this virtualized API. To update the image, please refer to the API.
          example: resources/photo.jpg
        retirementDate:
          type: integer
          description: Date to retire the virtualized API.  If _retired_ is true, this is the date on which it was retired.
          format: int64
          example: 1364287486876
        deprecated:
          type: boolean
          description: Immediately deprecates the virtualized API.  If deprecated, then _retiredOn_ is optionally used to retire the virtualized API on the specified date.
          example: true
        state:
          type: string
          description: 'The state of the virtualized API.  One of: unpublished, pending, or published.'
          example: unpublished
        createdOn:
          type: integer
          description: Epoch/Unix time stamp when the virtualized API was created.
          format: int64
          readOnly: true
          example: 1364287486876
        createdBy:
          type: string
          description: The unique identifier for user that created the virtualized API.
          readOnly: true
          example: de077cd8-83b7-46d1-b06f-2eaaf1548898
        corsProfiles:
          type: array
          description: The suite of CORS Profiles for this virtualized API.
          items:
            $ref: '#/components/schemas/CORSProfile'
        securityProfiles:
          type: array
          description: The suite of Security Profiles for this virtualized API.
          items:
            $ref: '#/components/schemas/SecurityProfile'
        authenticationProfiles:
          type: array
          description: The suite of Authentication Profiles for this virtualized API.
          items:
            $ref: '#/components/schemas/AuthenticationProfile'
        inboundProfiles:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/InboundProfiles'
          description: The inbound profiles that apply to the virtualized API.  There must always a *\_default* profile.
        outboundProfiles:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/OutboundProfiles'
          description: The outbound profiles that apply to the virtualized API.  There must always a *\_default* profile.
        serviceProfiles:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ServiceProfiles'
          description: The service profiles that apply to the virtualized API.  There must always a *\_default* profile.
        caCerts:
          type: array
          description: The outbound profiles that apply to the virtualized API.  There must always a *\_default* profile.
          items:
            $ref: '#/components/schemas/CACert'
        tags:
          type: object
          additionalProperties:
            type: array
            description: The list of tags associated with this API. Each tag can have multiple values
            example:
              Category:
                - Social Network, Photos
              Type:
                - REST
            items:
              type: string
              description: The list of tags associated with this API. Each tag can have multiple values
              example: '{"Category":["Social Network, Photos"],"Type":["REST"]}'
          description: The list of tags associated with this API. Each tag can have multiple values
          example:
            Category:
              - Social Network, Photos
            Type:
              - REST
        customProperties:
          type: object
          additionalProperties:
            type: string
          writeOnly: true
      description: A VirtualizedAPI is the frontend exposure of a backend [APIDefinition](APIDefinition.html). The documentation for the original API can be overridden using __descriptionType__.  When the documentation is overridden, the API Catalog will reflect the changes, allowing the API's documentation to be maintained even after the API is published.  When the __descriptionType__ is *original*, the documentation is obtained from the API from the original API definition.  When __descriptionType__ is *manual*, the text is obtained from **descriptionManual** and can use markdown syntax.  When __descriptionType__ is *url*, the **descriptionUrl** should point to an externally resolvable resource.
    APIDefinition:
      type: object
      properties:
        id:
          type: string
          description: A unique identifier.
          example: 6d81f576-bf40-4fbd-8625-63d8f206f649
        name:
          type: string
          description: The name of the API.
          example: My API
        summary:
          type: string
          description: A summary of the API.
          example: This is a summary of my API
        description:
          type: string
          description: A detailed description of the API.
          example: This is my API
        version:
          type: string
          description: The API version.
          example: '1.0'
        basePath:
          type: string
          description: The base path is where the API service is hosted.
          example: http://basepath.org
        resourcePath:
          type: string
          description: The resource path is applied to **basePath** to provide the prefix for all API methods.
          example: /api
        models:
          type: object
          additionalProperties:
            type: object
            description: The models/schema the that the API
            example:
              User:
                type: object
                required:
                  - id
                  - name
                  - email
                properties:
                  id:
                    type: string
                  name:
                    type: string
                  email:
                    type: string
          description: The models/schema the that the API
          example:
            User:
              type: object
              required:
                - id
                - name
                - email
              properties:
                id:
                  type: string
                name:
                  type: string
                email:
                  type: string
        consumes:
          type: array
          description: The content types that the API consumes
          example:
            - application/json
          items:
            type: string
            description: The content types that the API consumes
            example: '["application/json"]'
        produces:
          type: array
          description: The content types that the API produces
          example:
            - application/json
          items:
            type: string
            description: The content types that the API produces
            example: '["application/json"]'
        integral:
          type: boolean
          description: Indicates that the API definition is integral to a frontend API; that the API was imported to define the frontend API.
          example: true
        createdOn:
          type: integer
          description: Epoch/Unix time stamp when the organization was created.
          format: int64
          example: 1364287486876
        createdBy:
          type: string
          description: The identifier of the user that created the API.
          example: a1c70859-702b-4f3a-a1ad-a61067fdc4c7
        organizationId:
          type: string
          description: The [Organization](Organization.html) identifier.
          example: 7d82323230-4fbd-8625-63d8f206f649
        serviceType:
          type: string
          description: 'Indicates the type of service being imported. Possible values: rest, wsdl.'
          example: wsdl
          default: rest
        hasOriginalDefinition:
          type: boolean
          description: Indicates whether or not an original definition is available
          example: true
          default: true
        importUrl:
          type: string
          description: Specifies the URL used to import the backend API definition.
          example: http://petstore.swagger.io/v1/swagger.json
        properties:
          type: object
          additionalProperties:
            type: string
            description: A list of properties associated with this API.
            example: '{"ServiceName":"Calculator","Type":"WSDL"}'
          description: A list of properties associated with this API.
          example:
            ServiceName: Calculator
            Type: WSDL
      description: The API definition is a representation of a backend serivce.  The **name** and **basePath** are required.  If the API administrator creates the API definition, then **organizationId** is also required, otherwise it defaults to the [Organization](Organization.html) from which it is created.
    APIPromotion:
      type: object
      properties:
        frontend:
          $ref: '#/components/schemas/FrontendExport'
        backend:
          $ref: '#/components/schemas/BackendExport'
        exportVersion:
          type: integer
          description: Export version
          format: int32
      description: API promotion package.
    Agnostic:
      type: object
      properties:
        api:
          $ref: '#/components/schemas/APIDefinition'
        methods:
          type: array
          description: List of agnostic method representation
          items:
            $ref: '#/components/schemas/Method'
      description: Backend API agnostic representation
    BackendBlob:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier
          example: 588c51d8-5b6f-4c2f-b0e8-3eeaf25d1458
        type:
          type: string
          description: Type of blob
          example: swagger11
        blob:
          type: string
          description: Base64 encoded API
          example: YmxvYg==
        name:
          type: string
          description: API name
          example: My API
        importURL:
          type: string
          description: Original URL
          example: My API
        agnostic:
          $ref: '#/components/schemas/Agnostic'
      description: Backend blob export definition.
    BackendExport:
      type: object
      properties:
        apiBlobs:
          type: array
          description: List of backend API blobs
          items:
            $ref: '#/components/schemas/BackendBlob'
      description: Backend API export definition.
    BackendMethodExport:
      type: object
      properties:
        apiId:
          type: string
          description: Internal use only.
          example: 0a275f85-aec2-4100-8f9e-b4e7abdca108
        apiMethodId:
          type: string
          description: Internal use only.
          example: 19ec174e-b217-4c60-aa40-c22040569363
        op:
          type: string
          description: Internal use only.
          example: MyAPI-1.0:GET:/things
      description: Backend API method export.
    FrontendExport:
      type: object
      properties:
        apis:
          type: array
          description: List of frontend API
          items:
            $ref: '#/components/schemas/VirtualizedAPI'
        methods:
          type: array
          description: List of frontend API methods
          items:
            $ref: '#/components/schemas/VirtualizedMethodExport'
        backendMethods:
          type: array
          description: List of backend API methods
          items:
            $ref: '#/components/schemas/BackendMethodExport'
        imagedata:
          type: object
          additionalProperties:
            type: string
            description: Image Export
            example: '{}'
          description: Image Export
          example: {}
      description: Frontend API export definition.
    Method:
      type: object
      properties:
        id:
          type: string
          description: The method identifier
          example: 014d138b-816c-42b8-8a2a-5b63e72ea46d
        apiId:
          type: string
          description: The API identifier to which this method belongs
          example: 6d81f576-bf40-4fbd-8625-63d8f206f649
        path:
          type: string
          description: The API path
          example: /users
        verb:
          type: string
          description: The HTTP verb
          example: GET
        name:
          type: string
          description: The name of the operation
          example: getUserById
        summary:
          type: string
          description: A short summary description of the operation
          example: Gets a user by ID
        description:
          type: string
          description: A detailed description of the operation
          example: If the user does not exist, then a *404 Not Found* error is returned
        returnType:
          type: string
          description: The return type of the method, e.g. void, array, or a type found in models
          example: User
        parameters:
          type: array
          description: A list of accepted parameters
          items:
            $ref: '#/components/schemas/Parameter'
        responseCodes:
          type: array
          description: A list of possible response messages and their meanings
          items:
            $ref: '#/components/schemas/ResponseCode'
        consumes:
          type: array
          description: The content types that the operation consumes
          example: application/json
          items:
            type: string
            description: The content types that the operation consumes
            example: application/json
        produces:
          type: array
          description: The content types that the operation produces
          example: application/json
          items:
            type: string
            description: The content types that the operation produces
            example: application/json
        properties:
          type: object
          additionalProperties:
            type: string
            description: A list of properties associated with this API Method. The list of properties may vary, depending on the type of the parent API.
            example: '{"soapOperation":"calculator","soapNamespace":""}'
          description: A list of properties associated with this API Method. The list of properties may vary, depending on the type of the parent API.
          example:
            soapOperation: calculator
            soapNamespace: ''
        blob:
          type: string
        responseMessages:
          type: array
          writeOnly: true
          items:
            $ref: '#/components/schemas/ResponseCode'
      description: The method is an API resource and a HTTP verb.  The *method*, *nickname*, *summary*, and *type* are required.
    Parameter:
      type: object
      properties:
        name:
          type: string
          description: The parameter name.
          example: userId
        type:
          type: string
          description: The parameter data type, e.g. *boolean*, *byte*, *date*, *double*, *float*, *integer*, *long*, *string*, or a type name found in [APIDefinition models](APIDefinition.html#models).
          example: string
        format:
          type: string
          example: string
        description:
          type: string
        required:
          type: boolean
          description: Indicates that the parameter is required
          example: true
        allowMultiple:
          type: boolean
          description: Indicates that the parameter can be included multiple times (e.g. query or form)
          example: false
          default: false
        items:
          $ref: '#/components/schemas/SchemaObject'
        defaultValue:
          type: object
          description: Provides a default value for the parameter
          example: text
        maxLength:
          type: integer
          description: Indicates the maximum length of a parameter of type 'string'
          format: int32
          example: 100
        minLength:
          type: integer
          description: Indicates the minimum length of a parameter of type 'string'. If not present, assumed default value is 0.
          format: int32
          example: 3
        pattern:
          type: string
          description: Specifies a valid regular expression against which a parameter of type 'string' is validated.
          example: ^[a-z]$
        exclusiveMinimum:
          type: boolean
          description: If true, specifies that the value of the number parameter must be greater than the specified minimum value, otherwise the value must be great than, or equal to, the specified minimum value.
          example: true
        exclusiveMaximum:
          type: boolean
          description: If true, specifies that the value of the number parameter must be less than the specified maximum value, otherwise the value must be less than, or equal to, the specified maximum value.
          example: false
        minimum:
          type: object
          description: Specifies the minimum possible value of the number parameter.
          example: 1
        maximum:
          type: object
          description: Specifies the maximum possible value of the number parameter.
          example: 100
        multipleOf:
          type: number
          description: Specifies that the value of the number parameter must be divisible by this value. Must be an integer value > 0
          example: 10
        maxItems:
          type: integer
          description: Specifies the maximum number of items permitted for array parameters. Must be an integer value greater than, or equal to 0
          format: int32
          example: 3
        minItems:
          type: integer
          description: Specifies the minimum number of items permitted for array parameters. Must be an integer value greater than, or equal to 0
          format: int32
          example: 0
        uniqueItems:
          type: boolean
          description: Specifies whether or not all array items should be unique.
          example: true
        collectionFormat:
          type: string
          description: 'Specifies the format of array parameters. Possible values: [ csv, ssv, tsv, pipes, multi ].'
          example: multi
        schema:
          $ref: '#/components/schemas/SchemaObject'
        allowEmptyValue:
          type: boolean
          description: Specifies whether or not an empty value is allowed for this parameter. Only relevant for query and form parameters.
          example: false
        deprecated:
          type: boolean
          description: Specifies whether or not an empty value is deprecated for this parameter. It should be transitioned out of usage.
          example: false
        style:
          type: string
          description: Describes how the parameter value will be serialized depending on the type of the parameter value.
          example: form
        explode:
          type: boolean
          description: Specifies whether or not a separated parameter is generated. Only relevant for array or object types of parameters.
          example: false
        allowReserved:
          type: boolean
          description: Specifies whether or not the parameter value allows reserved characters
          example: false
        mediaType:
          type: string
          description: Specifies the media type of the parameter. Used specificially to cater for advanced OAS3 parameter definitions
          example: application/json
        enum:
          type: array
          items:
            type: object
        paramType:
          type: string
          description: The parameter type, e.g. query, form, path, body, header
          example: body
      description: Parameters describe the inputs for the API operation.  The **name**, **paramType**, **required**, and **type** are all required fields.
    ResponseCode:
      type: object
      properties:
        code:
          type: integer
          description: The response code
          format: int64
          example: 404
        message:
          type: string
          description: The response message
          example: Not Found
        schema:
          $ref: '#/components/schemas/SchemaObject'
        headers:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/SchemaObject'
          description: The response headers
        content:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/SchemaObject'
          description: The response content
      description: The response codes are the HTTP response codes defined in RFC-2616.  Typically, a limited set are used for REST.
    VirtualizedMethodExport:
      type: object
      properties:
        id:
          type: string
          description: Unique ID of the method.
          example: f2a0d13a-51f3-4256-855e-2b1d838a5cd2
        virtualizedApiId:
          type: string
          description: The identifier of the [VirtualizedAPI](VirtualizedAPI.html).
          example: bacb827e-e555-43fa-b006-50c7404aa990
        name:
          type: string
          description: The virtualized method name.  This defaults to the original [APIDefinition](APIDefinition.html) method name.
          example: MyMethod
        apiId:
          type: string
          description: The reference identifier for the original [APIDefinition](APIDefinition.html) that was virtualized.
          example: ec5e0a01-832b-4ecb-8cae-b35630527bb4
        apiMethodId:
          type: string
          description: The reference identifier for the original API [APIDefinition](APIDefinition.html) method that was virtualized.
          example: 21490aa6-ed14-4059-b8b7-d5bf0dc22dc6
        summary:
          type: string
          description: A summary of the API Method.
          example: This is a summary of my API Method
        descriptionType:
          type: string
          description: 'The source for the method''s description.  One of: *original*, *manual*, *markdown*, or *url*.  Defaults to *original*.'
          example: original
        descriptionManual:
          type: string
          description: Specifies a manual description, which can be markdown text.
          example: This is _my_ API method
        descriptionMarkdown:
          type: string
          description: specifies a markdown file to use for description.
          example: ${environment.VINSTDIR}/../markdown/myapi/method.md
        descriptionUrl:
          type: string
          description: Specifies a URL to use instead of description text.
          example: https://myapi.org/docs/api#method
        tags:
          type: object
          additionalProperties:
            type: array
            description: The list of tags associated with this API method. Each tag can have multiple values.
            example:
              Category:
                - Social Network, Photos
              Type:
                - REST
            items:
              type: string
              description: The list of tags associated with this API method. Each tag can have multiple values.
              example: '{"Category":["Social Network, Photos"],"Type":["REST"]}'
          description: The list of tags associated with this API method. Each tag can have multiple values.
          example:
            Category:
              - Social Network, Photos
            Type:
              - REST
        op:
          type: string
          description: Internal use only.
          example: MyAPI-1.0:GET:/things
      description: Frontend API method export.
    VirtualizedAPIMethod:
      type: object
      properties:
        id:
          type: string
          description: Unique ID of the method.
          example: f2a0d13a-51f3-4256-855e-2b1d838a5cd2
        virtualizedApiId:
          type: string
          description: The identifier of the [VirtualizedAPI](VirtualizedAPI.html).
          example: bacb827e-e555-43fa-b006-50c7404aa990
        name:
          type: string
          description: The virtualized method name.  This defaults to the original [APIDefinition](APIDefinition.html) method name.
          example: MyMethod
        apiId:
          type: string
          description: The reference identifier for the original [APIDefinition](APIDefinition.html) that was virtualized.
          example: ec5e0a01-832b-4ecb-8cae-b35630527bb4
        apiMethodId:
          type: string
          description: The reference identifier for the original API [APIDefinition](APIDefinition.html) method that was virtualized.
          example: 21490aa6-ed14-4059-b8b7-d5bf0dc22dc6
        summary:
          type: string
          description: A summary of the API Method.
          example: This is a summary of my API Method
        descriptionType:
          type: string
          description: 'The source for the method''s description.  One of: *original*, *manual*, *markdown*, or *url*.  Defaults to *original*.'
          example: original
        descriptionManual:
          type: string
          description: Specifies a manual description, which can be markdown text.
          example: This is _my_ API method
        descriptionMarkdown:
          type: string
          description: specifies a markdown file to use for description.
          example: ${environment.VINSTDIR}/../markdown/myapi/method.md
        descriptionUrl:
          type: string
          description: Specifies a URL to use instead of description text.
          example: https://myapi.org/docs/api#method
        tags:
          type: object
          additionalProperties:
            type: array
            description: The list of tags associated with this API method. Each tag can have multiple values.
            example:
              Category:
                - Social Network, Photos
              Type:
                - REST
            items:
              type: string
              description: The list of tags associated with this API method. Each tag can have multiple values.
              example: '{"Category":["Social Network, Photos"],"Type":["REST"]}'
          description: The list of tags associated with this API method. Each tag can have multiple values.
          example:
            Category:
              - Social Network, Photos
            Type:
              - REST
      description: Referenced entity.
    DiscoveryAPI:
      type: object
      properties:
        name:
          type: string
          description: The name of the API
          example: Flickr API
        summary:
          type: string
          description: Summary of the API
          example: The Flickr photo-sharing API
        id:
          type: string
          description: The unique identifier for the API
          example: 925129c4-0c4b-4adb-95c4-fdbc741eb333
        uri:
          type: string
          description: The URL of where further information of the API is available in the portal
          example: https://localhost:8075/api/portal/v1.0/discovery/swagger/api/Flickr
        type:
          type: string
          description: The type of API, either rest or wsdl
          example: rest
      description: Information about virtualized REST API.
    OAuthProtectedResource:
      type: object
      properties:
        uriprefix:
          type: string
          description: Oauth protected path
          example: /api/oauth/protected
        scopes:
          uniqueItems: true
          type: array
          description: List of scopes associated with the OAuth protected path
          example:
            - resource.WRITE
            - resource.READ
          items:
            type: string
            description: List of scopes associated with the OAuth protected path
            example: '["resource.WRITE","resource.READ"]'
        scope:
          type: string
          description: Oauth Scope
          example: Read
        description:
          type: string
          description: Scope Description
          example: Read access to resource
      description: Scope and prefix information for OAuth protected resource.
    Connector:
      type: object
      additionalProperties:
        type: string
    CustomPropertiesConfig:
      type: object
      properties:
        user:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/CustomProperty'
          description: Dictionary containing the custom properties defined for API Manager User entities
        organization:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/CustomProperty'
          description: Dictionary containing the custom properties defined for API Manager Organization entities
        application:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/CustomProperty'
          description: Dictionary containing the custom properties defined for API Manager Application entities
        api:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/CustomProperty'
          description: Dictionary containing the custom properties defined for API Manager Frontend API entities
      description: Custom property metadata configuration. This data represents the customPropertiesConfig object as defined in the API Manager app.config file.
    CustomProperty:
      type: object
      properties:
        label:
          type: string
          description: The label for the custom property, which will be displayed in the API Manager UI
          example: My first custom property
        type:
          type: string
          description: 'The type of the custom property. Can be one of the following values: [''custom'', ''switch'', ''select'', ''number'']. Default value is ''custom'' (i.e. free-form text)'
          example: custom
          default: custom
        disabled:
          type: boolean
          description: Specifies whether the custom property is disabled. Default value is false
          example: false
          default: false
        required:
          type: boolean
          description: Specifies whether the custom property is required or optional. Default value is false
          example: false
          default: false
        help:
          type: string
          description: Specifies the help text for the custom property that will appear in the API Manager UI. This field is optional
          example: This is the help text for my first custom property
        permissions:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/CustomPropertyPermission'
          description: Specifies the read/write permissions per role (admin, oadmin and user) for the custom property. This field is optional. By default all roles have read/write access
        options:
          type: array
          description: Specifies the options for 'switch' and 'select' custom properties which will be available in the API Manager UI. This field is conditional and only required for custom properties of type 'switch' or 'select', otherwise it is ignored.
          items:
            $ref: '#/components/schemas/CustomPropertyOption'
        defaultValue:
          type: object
          description: 'Specifies the default value for the custom property. This field is optional, but recommended. This type of this field depends on the type of the custom property. It can be one of the following: string, integer, double, boolean'
          example: Hello World!
        regex:
          type: string
          description: Specifies a validation regular expression for custom properties of type 'custom'. This field is conditional, i.e. optional for custom properties of type 'custom', otherwise ignored
          example: ^\d+$
        minValue:
          type: object
          description: Specifies a validation minimum value for custom properties of type 'number'. Can be an integer, a floating point number, or a string represation of an integer or floating point number. This field is conditional, i.e. optional for custom properties of type 'number', otherwise ignored. minValue and maxValue must both be of the same type so as to avoid unexpected behaviour during validation. Scientific notation is not supported.
          example: 0
        maxValue:
          type: object
          description: Specifies a validation maximum value for custom properties of type 'number'. Can be an integer, a floating point number, or a string represation of an integer or floating point number. This field is conditional, i.e. optional for custom properties of type 'number', otherwise ignored. minValue and maxValue must both be of the same type so as to avoid unexpected behaviour during validation. Scientific notation is not supported.
          example: 100
        decimalPlaces:
          type: integer
          description: Specifies the number of decimal places to be used when validating 'number' fields. Default value is 0, which indicates that the value is a whole number.
          format: int32
          example: 2
        error:
          type: string
          description: Specifies an error message which will appear when input validation fails. The format of this field is a string. This field is only valid for custom properties of type 'custom' and 'number', otherwise ignored
          example: Invalid input. Please enter a valid Version 4 UUID
        custom:
          type: object
          description: Optional field allowing for the definition of custom metadata for the custom property. This will be used by clients other than API Manager, but API Manager may populate this field with API Manager-specific values in the future. If present, must be a valid JSON 'object'.
          example: '{ portalPermissions: { joomlaAdmin: { read: true, write: true }, joomlaUser: { read: true, write: false } } }'
      description: Custom property metadata.
    CustomPropertyOption:
      type: object
      properties:
        value:
          type: object
          description: 'Specifies the value associated with a custom property option. The field can be of the following formats: string, integer, double, boolean'
          example: 2
        label:
          type: string
          description: Specifies the label (as displayed in the API Manager UI) associated with a custom property option.
          example: Two
      description: Custom property option configuration for 'switch' and 'select' custom properties.
    CustomPropertyPermission:
      type: object
      properties:
        read:
          type: boolean
          description: Value specifying the read permission on a custom property for the associated role. Default value is true
          example: true
          default: true
        write:
          type: boolean
          description: Value specifying the write permission on a custom property for the associated role. Default value is true
          example: true
          default: true
        visible:
          type: boolean
          description: Value specifying whether or not the custom property is visible in API Manager for the associated role. Default value is true
          example: true
          default: true
      description: Custom property permission configuration specifying whether read/write/visible permissions are allowed on the custom property.
    ExternalApi:
      type: object
      additionalProperties:
        type: object
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
openapi: 3.1.0
info:
  title: Service Management
  contact: {}
  version: '1.0'
jsonSchemaDialect: https://json-schema.org/draft/2020-12/schema
servers:
- url: http://localhost:5555/rest/apigateway
  variables: {}
paths:
  /apis/{apiId}/versions:
    get:
      tags:
      - Versions
      summary: Get Versions of API by ID
      description: Retrieve all the versions of the API
      operationId: GetVersionsofAPIbyID
      parameters:
      - name: apiId
        in: path
        description: (Required) API Id for the API to retrieve the versions
        required: true
        style: simple
        schema:
          type: string
          examples:
          - 2c843837-cc6c-4ba1-aaf3-b10f8e9adbe0
      - name: Accept
        in: header
        description: ''
        required: true
        style: simple
        schema:
          type: string
          examples:
          - application/json
      responses:
        '401':
          description: Unauthorized
          headers: {}
          content: {}
        '404':
          description: Not Found
          headers: {}
          content: {}
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: string
                examples:
                - "\"{\\r\\n    \\\"apiResponse\\\": {\\r\\n        \\\"api\\\": {\\r\\n            \\\"apiDefinition\\\": {\\r\\n                \\\"type\\\": \\\"rest\\\",\\r\\n                \\\"info\\\": {\\r\\n                    \\\"description\\\": \\\"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\\\",\\r\\n                    \\\"version\\\": \\\"1.0\\\",\\r\\n                    \\\"title\\\": \\\"ChuckNorrisAPI\\\"\\r\\n                },\\r\\n                \\\"host\\\": \\\"api.chucknorris.io\\\",\\r\\n                \\\"basePath\\\": \\\"/jokes\\\",\\r\\n                \\\"schemes\\\": [\\r\\n                    \\\"https\\\"\\r\\n                ],\\r\\n                \\\"security\\\": [],\\r\\n                \\\"paths\\\": {\\r\\n                    \\\"/random\\\": {\\r\\n                        \\\"get\\\": {\\r\\n                            \\\"summary\\\": \\\"GET\\\",\\r\\n                            \\\"description\\\": \\\"\\\",\\r\\n                            \\\"operationId\\\": \\\"GET\\\",\\r\\n                            \\\"produces\\\": [\\r\\n                                \\\"application/json\\\"\\r\\n                            ],\\r\\n                            \\\"responses\\\": {},\\r\\n                            \\\"enabled\\\": true\\r\\n                        },\\r\\n                        \\\"enabled\\\": true\\r\\n                    }\\r\\n                },\\r\\n                \\\"securityDefinitions\\\": {},\\r\\n                \\\"definitions\\\": {},\\r\\n                \\\"baseUriParameters\\\": [],\\r\\n                \\\"externalDocs\\\": [],\\r\\n                \\\"servers\\\": [\\r\\n                    {\\r\\n                        \\\"url\\\": \\\"https://api.chucknorris.io/jokes\\\"\\r\\n                    }\\r\\n                ],\\r\\n                \\\"components\\\": {\\r\\n                    \\\"schemas\\\": {}\\r\\n                }\\r\\n            },\\r\\n            \\\"nativeEndpoint\\\": [\\r\\n                {\\r\\n                    \\\"passSecurityHeaders\\\": true,\\r\\n                    \\\"uri\\\": \\\"https://api.chucknorris.io/jokes\\\",\\r\\n                    \\\"connectionTimeoutDuration\\\": 0,\\r\\n                    \\\"alias\\\": false\\r\\n                }\\r\\n            ],\\r\\n            \\\"apiName\\\": \\\"ChuckNorris\\\",\\r\\n            \\\"apiVersion\\\": \\\"1.0\\\",\\r\\n            \\\"apiDescription\\\": \\\"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\\\",\\r\\n            \\\"maturityState\\\": \\\"Beta\\\",\\r\\n            \\\"isActive\\\": false,\\r\\n            \\\"type\\\": \\\"REST\\\",\\r\\n            \\\"owner\\\": \\\"Administrator\\\",\\r\\n            \\\"policies\\\": [\\r\\n                \\\"08afbfa9-78e1-4c23-bb19-c0012464047e\\\"\\r\\n            ],\\r\\n            \\\"scopes\\\": [],\\r\\n            \\\"publishedPortals\\\": [],\\r\\n            \\\"creationDate\\\": \\\"2018-09-03 11:56:21 GMT\\\",\\r\\n            \\\"systemVersion\\\": 1,\\r\\n            \\\"id\\\": \\\"badc18e6-446f-4aa3-96cd-33e46bd40fb5\\\"\\r\\n        },\\r\\n        \\\"responseStatus\\\": \\\"SUCCESS\\\",\\r\\n        \\\"versions\\\": [\\r\\n            {\\r\\n                \\\"versionNumber\\\": \\\"1.0\\\",\\r\\n                \\\"apiId\\\": \\\"badc18e6-446f-4aa3-96cd-33e46bd40fb5\\\"\\r\\n            }\\r\\n        ]\\r\\n    }\\r\\n}\""
                contentMediaType: application/json
              example: "\"{\\r\\n    \\\"apiResponse\\\": {\\r\\n        \\\"api\\\": {\\r\\n            \\\"apiDefinition\\\": {\\r\\n                \\\"type\\\": \\\"rest\\\",\\r\\n                \\\"info\\\": {\\r\\n                    \\\"description\\\": \\\"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\\\",\\r\\n                    \\\"version\\\": \\\"1.0\\\",\\r\\n                    \\\"title\\\": \\\"ChuckNorrisAPI\\\"\\r\\n                },\\r\\n                \\\"host\\\": \\\"api.chucknorris.io\\\",\\r\\n                \\\"basePath\\\": \\\"/jokes\\\",\\r\\n                \\\"schemes\\\": [\\r\\n                    \\\"https\\\"\\r\\n                ],\\r\\n                \\\"security\\\": [],\\r\\n                \\\"paths\\\": {\\r\\n                    \\\"/random\\\": {\\r\\n                        \\\"get\\\": {\\r\\n                            \\\"summary\\\": \\\"GET\\\",\\r\\n                            \\\"description\\\": \\\"\\\",\\r\\n                            \\\"operationId\\\": \\\"GET\\\",\\r\\n                            \\\"produces\\\": [\\r\\n                                \\\"application/json\\\"\\r\\n                            ],\\r\\n                            \\\"responses\\\": {},\\r\\n                            \\\"enabled\\\": true\\r\\n                        },\\r\\n                        \\\"enabled\\\": true\\r\\n                    }\\r\\n                },\\r\\n                \\\"securityDefinitions\\\": {},\\r\\n                \\\"definitions\\\": {},\\r\\n                \\\"baseUriParameters\\\": [],\\r\\n                \\\"externalDocs\\\": [],\\r\\n                \\\"servers\\\": [\\r\\n                    {\\r\\n                        \\\"url\\\": \\\"https://api.chucknorris.io/jokes\\\"\\r\\n                    }\\r\\n                ],\\r\\n                \\\"components\\\": {\\r\\n                    \\\"schemas\\\": {}\\r\\n                }\\r\\n            },\\r\\n            \\\"nativeEndpoint\\\": [\\r\\n                {\\r\\n                    \\\"passSecurityHeaders\\\": true,\\r\\n                    \\\"uri\\\": \\\"https://api.chucknorris.io/jokes\\\",\\r\\n                    \\\"connectionTimeoutDuration\\\": 0,\\r\\n                    \\\"alias\\\": false\\r\\n                }\\r\\n            ],\\r\\n            \\\"apiName\\\": \\\"ChuckNorris\\\",\\r\\n            \\\"apiVersion\\\": \\\"1.0\\\",\\r\\n            \\\"apiDescription\\\": \\\"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\\\",\\r\\n            \\\"maturityState\\\": \\\"Beta\\\",\\r\\n            \\\"isActive\\\": false,\\r\\n            \\\"type\\\": \\\"REST\\\",\\r\\n            \\\"owner\\\": \\\"Administrator\\\",\\r\\n            \\\"policies\\\": [\\r\\n                \\\"08afbfa9-78e1-4c23-bb19-c0012464047e\\\"\\r\\n            ],\\r\\n            \\\"scopes\\\": [],\\r\\n            \\\"publishedPortals\\\": [],\\r\\n            \\\"creationDate\\\": \\\"2018-09-03 11:56:21 GMT\\\",\\r\\n            \\\"systemVersion\\\": 1,\\r\\n            \\\"id\\\": \\\"badc18e6-446f-4aa3-96cd-33e46bd40fb5\\\"\\r\\n        },\\r\\n        \\\"responseStatus\\\": \\\"SUCCESS\\\",\\r\\n        \\\"versions\\\": [\\r\\n            {\\r\\n                \\\"versionNumber\\\": \\\"1.0\\\",\\r\\n                \\\"apiId\\\": \\\"badc18e6-446f-4aa3-96cd-33e46bd40fb5\\\"\\r\\n            }\\r\\n        ]\\r\\n    }\\r\\n}\""
      deprecated: false
    post:
      tags:
      - Versions
      summary: Create Version
      description: Create a new version of an API and retain applications if required
      operationId: CreateVersion
      parameters:
      - name: apiId
        in: path
        description: (Required) API Id for the API to be versioned
        required: true
        style: simple
        schema:
          type: string
          examples:
          - 2c843837-cc6c-4ba1-aaf3-b10f8e9adbe0
      - name: Accept
        in: header
        description: ''
        required: true
        style: simple
        schema:
          type: string
          examples:
          - application/json
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/CreateVersionRequest'
              - examples:
                - newApiVersion: '2.0'
                  retainApplications: 'true'
              contentMediaType: application/json
            example:
              newApiVersion: '2.0'
              retainApplications: 'true'
        required: true
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: string
                examples:
                - "\"{\\r\\n    \\\"apiResponse\\\": {\\r\\n        \\\"api\\\": {\\r\\n            \\\"apiDefinition\\\": {\\r\\n                \\\"type\\\": \\\"rest\\\",\\r\\n                \\\"info\\\": {\\r\\n                    \\\"description\\\": \\\"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\\\",\\r\\n                    \\\"version\\\": \\\"1.0\\\",\\r\\n                    \\\"title\\\": \\\"ChuckNorrisAPI\\\"\\r\\n                },\\r\\n                \\\"host\\\": \\\"api.chucknorris.io\\\",\\r\\n                \\\"basePath\\\": \\\"/jokes\\\",\\r\\n                \\\"schemes\\\": [\\r\\n                    \\\"https\\\"\\r\\n                ],\\r\\n                \\\"security\\\": [],\\r\\n                \\\"paths\\\": {\\r\\n                    \\\"/random\\\": {\\r\\n                        \\\"get\\\": {\\r\\n                            \\\"summary\\\": \\\"GET\\\",\\r\\n                            \\\"description\\\": \\\"\\\",\\r\\n                            \\\"operationId\\\": \\\"GET\\\",\\r\\n                            \\\"produces\\\": [\\r\\n                                \\\"application/json\\\"\\r\\n                            ],\\r\\n                            \\\"responses\\\": {},\\r\\n                            \\\"enabled\\\": true\\r\\n                        },\\r\\n                        \\\"enabled\\\": true\\r\\n                    }\\r\\n                },\\r\\n                \\\"securityDefinitions\\\": {},\\r\\n                \\\"definitions\\\": {},\\r\\n                \\\"baseUriParameters\\\": [],\\r\\n                \\\"externalDocs\\\": [],\\r\\n                \\\"servers\\\": [\\r\\n                    {\\r\\n                        \\\"url\\\": \\\"https://api.chucknorris.io/jokes\\\"\\r\\n                    }\\r\\n                ],\\r\\n                \\\"components\\\": {\\r\\n                    \\\"schemas\\\": {}\\r\\n                }\\r\\n            },\\r\\n            \\\"nativeEndpoint\\\": [\\r\\n                {\\r\\n                    \\\"passSecurityHeaders\\\": true,\\r\\n                    \\\"uri\\\": \\\"https://api.chucknorris.io/jokes\\\",\\r\\n                    \\\"connectionTimeoutDuration\\\": 0,\\r\\n                    \\\"alias\\\": false\\r\\n                }\\r\\n            ],\\r\\n            \\\"apiName\\\": \\\"ChuckNorris\\\",\\r\\n            \\\"apiVersion\\\": \\\"1.0\\\",\\r\\n            \\\"apiDescription\\\": \\\"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\\\",\\r\\n            \\\"maturityState\\\": \\\"Beta\\\",\\r\\n            \\\"isActive\\\": false,\\r\\n            \\\"type\\\": \\\"REST\\\",\\r\\n            \\\"owner\\\": \\\"Administrator\\\",\\r\\n            \\\"policies\\\": [\\r\\n                \\\"08afbfa9-78e1-4c23-bb19-c0012464047e\\\"\\r\\n            ],\\r\\n            \\\"scopes\\\": [],\\r\\n            \\\"publishedPortals\\\": [],\\r\\n            \\\"creationDate\\\": \\\"2018-09-03 11:56:21 GMT\\\",\\r\\n            \\\"systemVersion\\\": 1,\\r\\n            \\\"id\\\": \\\"badc18e6-446f-4aa3-96cd-33e46bd40fb5\\\"\\r\\n        },\\r\\n        \\\"responseStatus\\\": \\\"SUCCESS\\\",\\r\\n        \\\"versions\\\": [\\r\\n            {\\r\\n                \\\"versionNumber\\\": \\\"1.0\\\",\\r\\n                \\\"apiId\\\": \\\"badc18e6-446f-4aa3-96cd-33e46bd40fb5\\\"\\r\\n            }\\r\\n        ]\\r\\n    }\\r\\n}\""
                contentMediaType: application/json
              example: "\"{\\r\\n    \\\"apiResponse\\\": {\\r\\n        \\\"api\\\": {\\r\\n            \\\"apiDefinition\\\": {\\r\\n                \\\"type\\\": \\\"rest\\\",\\r\\n                \\\"info\\\": {\\r\\n                    \\\"description\\\": \\\"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\\\",\\r\\n                    \\\"version\\\": \\\"1.0\\\",\\r\\n                    \\\"title\\\": \\\"ChuckNorrisAPI\\\"\\r\\n                },\\r\\n                \\\"host\\\": \\\"api.chucknorris.io\\\",\\r\\n                \\\"basePath\\\": \\\"/jokes\\\",\\r\\n                \\\"schemes\\\": [\\r\\n                    \\\"https\\\"\\r\\n                ],\\r\\n                \\\"security\\\": [],\\r\\n                \\\"paths\\\": {\\r\\n                    \\\"/random\\\": {\\r\\n                        \\\"get\\\": {\\r\\n                            \\\"summary\\\": \\\"GET\\\",\\r\\n                            \\\"description\\\": \\\"\\\",\\r\\n                            \\\"operationId\\\": \\\"GET\\\",\\r\\n                            \\\"produces\\\": [\\r\\n                                \\\"application/json\\\"\\r\\n                            ],\\r\\n                            \\\"responses\\\": {},\\r\\n                            \\\"enabled\\\": true\\r\\n                        },\\r\\n                        \\\"enabled\\\": true\\r\\n                    }\\r\\n                },\\r\\n                \\\"securityDefinitions\\\": {},\\r\\n                \\\"definitions\\\": {},\\r\\n                \\\"baseUriParameters\\\": [],\\r\\n                \\\"externalDocs\\\": [],\\r\\n                \\\"servers\\\": [\\r\\n                    {\\r\\n                        \\\"url\\\": \\\"https://api.chucknorris.io/jokes\\\"\\r\\n                    }\\r\\n                ],\\r\\n                \\\"components\\\": {\\r\\n                    \\\"schemas\\\": {}\\r\\n                }\\r\\n            },\\r\\n            \\\"nativeEndpoint\\\": [\\r\\n                {\\r\\n                    \\\"passSecurityHeaders\\\": true,\\r\\n                    \\\"uri\\\": \\\"https://api.chucknorris.io/jokes\\\",\\r\\n                    \\\"connectionTimeoutDuration\\\": 0,\\r\\n                    \\\"alias\\\": false\\r\\n                }\\r\\n            ],\\r\\n            \\\"apiName\\\": \\\"ChuckNorris\\\",\\r\\n            \\\"apiVersion\\\": \\\"1.0\\\",\\r\\n            \\\"apiDescription\\\": \\\"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\\\",\\r\\n            \\\"maturityState\\\": \\\"Beta\\\",\\r\\n            \\\"isActive\\\": false,\\r\\n            \\\"type\\\": \\\"REST\\\",\\r\\n            \\\"owner\\\": \\\"Administrator\\\",\\r\\n            \\\"policies\\\": [\\r\\n                \\\"08afbfa9-78e1-4c23-bb19-c0012464047e\\\"\\r\\n            ],\\r\\n            \\\"scopes\\\": [],\\r\\n            \\\"publishedPortals\\\": [],\\r\\n            \\\"creationDate\\\": \\\"2018-09-03 11:56:21 GMT\\\",\\r\\n            \\\"systemVersion\\\": 1,\\r\\n            \\\"id\\\": \\\"badc18e6-446f-4aa3-96cd-33e46bd40fb5\\\"\\r\\n        },\\r\\n        \\\"responseStatus\\\": \\\"SUCCESS\\\",\\r\\n        \\\"versions\\\": [\\r\\n            {\\r\\n                \\\"versionNumber\\\": \\\"1.0\\\",\\r\\n                \\\"apiId\\\": \\\"badc18e6-446f-4aa3-96cd-33e46bd40fb5\\\"\\r\\n            }\\r\\n        ]\\r\\n    }\\r\\n}\""
        '401':
          description: Unauthorized
          headers: {}
          content: {}
        '404':
          description: Not Found
          headers: {}
          content: {}
        '400':
          description: Bad Request
          headers: {}
          content: {}
      deprecated: false
    parameters: []
  /apis/{apiId}/mock/enable:
    put:
      tags:
      - Mocking
      summary: Enable API Mocking
      description: "In API Gateway, you can mock an API implementation. API Gateway lets you mock an API by simulating the native service. API Mocking is useful feature in API first approach, where in the provider may choose to expose the mocked API to the consumers when the actual API doesn't exist or isn't complete. \n In API Gateway, when you enable mocking for an API, a default mock response is created for each combination of resource, operation, status code and content-type based on the example and schema set in the API definition. As an API Provider, you can add or modify the default mock responses.\n\nYou can specify conditions at the operation level and configure IS services at the API level for a mocked API in the update API operation. At runtime, when the mocked API is invoked instead of calling the native service, API Gateway returns the mocked response to the consumer based on the below priorities:\n1. If any of the conditions for the invoked operation satisfies, API Gateway returns the associated mocked response.\n2. If no condition is specified or none of the condition for the invoked operation is satisfied, then API Gateway will return \na. the response from an IS service, if an IS service is configured b. default mocked response, if no IS services are configured"
      operationId: EnableAPIMocking
      parameters:
      - name: retainDefaultMockResponses
        in: query
        description: Flag to retain generated mocked responses. When this is set to true, default mocked responses will be retained. If it's set to false, new default mocked responses will be generated using the examples, schema in the API
        required: true
        style: form
        explode: true
        schema:
          type: boolean
          examples:
          - false
      - name: apiId
        in: path
        description: (Required) API Id for the API to be activated
        required: true
        style: simple
        schema:
          type: string
          examples:
          - 3c575e49-73d5-4ae8-a3a5-552544e5a4a0
      - name: Accept
        in: header
        description: ''
        required: true
        style: simple
        schema:
          type: string
          examples:
          - application/json
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: string
                examples:
                - '"{\r\n    \"apiResponse\": {\r\n        \"api\": {\r\n            \"apiDefinition\": {\r\n                \"type\": \"rest\",\r\n                \"info\": {\r\n                    \"description\": \"API to demonstrate mocking functionality in international developers day\",\r\n                    \"version\": \"v1\",\r\n                    \"title\": \"API_MOCKING\"\r\n                },\r\n                \"host\": \"localhost\",\r\n                \"schemes\": [\r\n                    \"http\"\r\n                ],\r\n                \"consumes\": [\r\n                    \"application/json\"\r\n                ],\r\n                \"security\": [],\r\n                \"paths\": {\r\n                    \"/conditionBasedMockedResponse\": {\r\n                        \"post\": {\r\n                            \"summary\": \"Configure condition and mocked response\",\r\n                            \"operationId\": \"conditionBasedMockedResponse\",\r\n                            \"produces\": [\r\n                                \"text/plain\"\r\n                            ],\r\n                            \"responses\": {\r\n                                \"200\": {\r\n                                    \"description\": \"200 response\",\r\n                                    \"content\": {\r\n                                        \"text/plain\": {\r\n                                            \"example\": \"No condition evaluates to true. \\nSo API-Gateway sent this default response.\"\r\n                                        }\r\n                                    }\r\n                                }\r\n                            },\r\n                            \"mockedResponses\": {\r\n                                \"200\": {\r\n                                    \"responseBody\": {\r\n                                        \"text/plain\": \"No condition evaluates to true. \\nSo API-Gateway sent this default response.\"\r\n                                    }\r\n                                }\r\n                            },\r\n                            \"enabled\": true\r\n                        },\r\n                        \"parameters\": [],\r\n                        \"displayName\": \"/conditionBasedMockedResponse\",\r\n                        \"enabled\": true\r\n                    },\r\n                    \"/customESBMockedResponse\": {\r\n                        \"post\": {\r\n                            \"summary\": \"Configure custom ESB mocked response\",\r\n                            \"operationId\": \"customESBMockedResponse\",\r\n                            \"produces\": [\r\n                                \"application/json\"\r\n                            ],\r\n                            \"responses\": {\r\n                                \"200\": {\r\n                                    \"description\": \"200 response\"\r\n                                }\r\n                            },\r\n                            \"mockedResponses\": {\r\n                                \"200\": {\r\n                                    \"responseBody\": {\r\n                                        \"application/json\": \"\"\r\n                                    }\r\n                                }\r\n                            },\r\n                            \"enabled\": true\r\n                        },\r\n                        \"parameters\": [],\r\n                        \"displayName\": \"/customESBMockedResponse\",\r\n                        \"enabled\": true\r\n                    },\r\n                    \"/dynamicMockedResponse\": {\r\n                        \"post\": {\r\n                            \"summary\": \"Dynamic mocked response set\",\r\n                            \"operationId\": \"dynamicMockedResponse\",\r\n                            \"produces\": [\r\n                                \"application/json\"\r\n                            ],\r\n                            \"responses\": {\r\n                                \"200\": {\r\n                                    \"description\": \"200 response\"\r\n                                }\r\n                            },\r\n                            \"mockedResponses\": {\r\n                                \"200\": {\r\n                                    \"responseBody\": {\r\n                                        \"application/json\": \"\"\r\n                                    }\r\n                                }\r\n                            },\r\n                            \"enabled\": true\r\n                        },\r\n                        \"parameters\": [],\r\n                        \"displayName\": \"/dynamicMockedResponse\",\r\n                        \"enabled\": true\r\n                    },\r\n                    \"/staticMockedResponse\": {\r\n                        \"post\": {\r\n                            \"summary\": \"Default mocked response from example\",\r\n                            \"operationId\": \"generateFromExample\",\r\n                            \"produces\": [\r\n                                \"application/json\",\r\n                                \"application/xml\"\r\n                            ],\r\n                            \"responses\": {\r\n                                \"200\": {\r\n                                    \"description\": \"200 response generated from example\",\r\n                                    \"content\": {\r\n                                        \"application/json\": {\r\n                                            \"example\": \"{\\\"resource\\\" : \\\"/generateFromExample\\\",\\\"description\\\" : \\\"Default mocked response from example for status code 200\\\"}\"\r\n                                        },\r\n                                        \"application/xml\": {\r\n                                            \"example\": \"<root><resource>/generateFromExample</resource><description>Default mocked response from example for status code 200</description></root>\"\r\n                                        }\r\n                                    }\r\n                                },\r\n                                \"201\": {\r\n                                    \"description\": \"201 response generated from schema\",\r\n                                    \"content\": {\r\n                                        \"application/json\": {\r\n                                            \"schema\": {\r\n                                                \"$ref\": \"#/components/schemas/Pet\"\r\n                                            }\r\n                                        },\r\n                                        \"application/xml\": {\r\n                                            \"schema\": {\r\n                                                \"$ref\": \"#/components/schemas/Pet\"\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            },\r\n                            \"mockedResponses\": {\r\n                                \"200\": {\r\n                                    \"responseBody\": {\r\n                                        \"application/json\": \"{\\\"resource\\\" : \\\"/generateFromExample\\\",\\\"description\\\" : \\\"Default mocked response from example for status code 200\\\"}\",\r\n                                        \"application/xml\": \"<root><resource>/generateFromExample</resource><description>Default mocked response from example for status code 200</description></root>\"\r\n                                    }\r\n                                },\r\n                                \"201\": {\r\n                                    \"responseBody\": {\r\n                                        \"application/json\": \"{\\\"birthday\\\":2059397944,\\\"name\\\":\\\"\\\"}\",\r\n                                        \"application/xml\": \"<birthday>921604684</birthday><name/>\"\r\n                                    }\r\n                                }\r\n                            },\r\n                            \"enabled\": true\r\n                        },\r\n                        \"parameters\": [],\r\n                        \"displayName\": \"/staticMockedResponse\",\r\n                        \"enabled\": true\r\n                    }\r\n                },\r\n                \"securityDefinitions\": {},\r\n                \"definitions\": {},\r\n                \"baseUriParameters\": [],\r\n                \"externalDocs\": [],\r\n                \"servers\": [\r\n                    {\r\n                        \"url\": \"http://localhost\"\r\n                    }\r\n                ],\r\n                \"components\": {\r\n                    \"schemas\": {\r\n                        \"Pet\": {\r\n                            \"required\": [\r\n                                \"name\"\r\n                            ],\r\n                            \"type\": \"object\",\r\n                            \"properties\": {\r\n                                \"birthday\": {\r\n                                    \"type\": \"integer\",\r\n                                    \"format\": \"int32\"\r\n                                },\r\n                                \"name\": {\r\n                                    \"type\": \"string\"\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            \"nativeEndpoint\": [\r\n                {\r\n                    \"passSecurityHeaders\": true,\r\n                    \"uri\": \"http://localhost\",\r\n                    \"connectionTimeoutDuration\": 0,\r\n                    \"alias\": false\r\n                }\r\n            ],\r\n            \"apiName\": \"APIMocking\",\r\n            \"apiVersion\": \"v1\",\r\n            \"apiDescription\": \"API to demonstrate mocking functionality in international developers day\",\r\n            \"maturityState\": \"Beta\",\r\n            \"isActive\": false,\r\n            \"type\": \"REST\",\r\n            \"owner\": \"Administrator\",\r\n            \"policies\": [\r\n                \"19773e29-2838-4efc-aa04-793b48f4d22b\"\r\n            ],\r\n            \"scopes\": [],\r\n            \"publishedPortals\": [],\r\n            \"creationDate\": \"2018-11-01 13:44:58 GMT\",\r\n            \"systemVersion\": 1,\r\n            \"mockService\": {\r\n                \"enableMock\": true\r\n            },\r\n            \"id\": \"afd8eb5e-bba8-447b-8e28-76aac23ba074\"\r\n        },\r\n        \"responseStatus\": \"SUCCESS\",\r\n        \"versions\": [\r\n            {\r\n                \"versionNumber\": \"v1\",\r\n                \"apiId\": \"afd8eb5e-bba8-447b-8e28-76aac23ba074\"\r\n            }\r\n        ]\r\n    }\r\n}"'
                contentMediaType: application/json
              example: '"{\r\n    \"apiResponse\": {\r\n        \"api\": {\r\n            \"apiDefinition\": {\r\n                \"type\": \"rest\",\r\n                \"info\": {\r\n                    \"description\": \"API to demonstrate mocking functionality in international developers day\",\r\n                    \"version\": \"v1\",\r\n                    \"title\": \"API_MOCKING\"\r\n                },\r\n                \"host\": \"localhost\",\r\n                \"schemes\": [\r\n                    \"http\"\r\n                ],\r\n                \"consumes\": [\r\n                    \"application/json\"\r\n                ],\r\n                \"security\": [],\r\n                \"paths\": {\r\n                    \"/conditionBasedMockedResponse\": {\r\n                        \"post\": {\r\n                            \"summary\": \"Configure condition and mocked response\",\r\n                            \"operationId\": \"conditionBasedMockedResponse\",\r\n                            \"produces\": [\r\n                                \"text/plain\"\r\n                            ],\r\n                            \"responses\": {\r\n                                \"200\": {\r\n                                    \"description\": \"200 response\",\r\n                                    \"content\": {\r\n                                        \"text/plain\": {\r\n                                            \"example\": \"No condition evaluates to true. \\nSo API-Gateway sent this default response.\"\r\n                                        }\r\n                                    }\r\n                                }\r\n                            },\r\n                            \"mockedResponses\": {\r\n                                \"200\": {\r\n                                    \"responseBody\": {\r\n                                        \"text/plain\": \"No condition evaluates to true. \\nSo API-Gateway sent this default response.\"\r\n                                    }\r\n                                }\r\n                            },\r\n                            \"enabled\": true\r\n                        },\r\n                        \"parameters\": [],\r\n                        \"displayName\": \"/conditionBasedMockedResponse\",\r\n                        \"enabled\": true\r\n                    },\r\n                    \"/customESBMockedResponse\": {\r\n                        \"post\": {\r\n                            \"summary\": \"Configure custom ESB mocked response\",\r\n                            \"operationId\": \"customESBMockedResponse\",\r\n                            \"produces\": [\r\n                                \"application/json\"\r\n                            ],\r\n                            \"responses\": {\r\n                                \"200\": {\r\n                                    \"description\": \"200 response\"\r\n                                }\r\n                            },\r\n                            \"mockedResponses\": {\r\n                                \"200\": {\r\n                                    \"responseBody\": {\r\n                                        \"application/json\": \"\"\r\n                                    }\r\n                                }\r\n                            },\r\n                            \"enabled\": true\r\n                        },\r\n                        \"parameters\": [],\r\n                        \"displayName\": \"/customESBMockedResponse\",\r\n                        \"enabled\": true\r\n                    },\r\n                    \"/dynamicMockedResponse\": {\r\n                        \"post\": {\r\n                            \"summary\": \"Dynamic mocked response set\",\r\n                            \"operationId\": \"dynamicMockedResponse\",\r\n                            \"produces\": [\r\n                                \"application/json\"\r\n                            ],\r\n                            \"responses\": {\r\n                                \"200\": {\r\n                                    \"description\": \"200 response\"\r\n                                }\r\n                            },\r\n                            \"mockedResponses\": {\r\n                                \"200\": {\r\n                                    \"responseBody\": {\r\n                                        \"application/json\": \"\"\r\n                                    }\r\n                                }\r\n                            },\r\n                            \"enabled\": true\r\n                        },\r\n                        \"parameters\": [],\r\n                        \"displayName\": \"/dynamicMockedResponse\",\r\n                        \"enabled\": true\r\n                    },\r\n                    \"/staticMockedResponse\": {\r\n                        \"post\": {\r\n                            \"summary\": \"Default mocked response from example\",\r\n                            \"operationId\": \"generateFromExample\",\r\n                            \"produces\": [\r\n                                \"application/json\",\r\n                                \"application/xml\"\r\n                            ],\r\n                            \"responses\": {\r\n                                \"200\": {\r\n                                    \"description\": \"200 response generated from example\",\r\n                                    \"content\": {\r\n                                        \"application/json\": {\r\n                                            \"example\": \"{\\\"resource\\\" : \\\"/generateFromExample\\\",\\\"description\\\" : \\\"Default mocked response from example for status code 200\\\"}\"\r\n                                        },\r\n                                        \"application/xml\": {\r\n                                            \"example\": \"<root><resource>/generateFromExample</resource><description>Default mocked response from example for status code 200</description></root>\"\r\n                                        }\r\n                                    }\r\n                                },\r\n                                \"201\": {\r\n                                    \"description\": \"201 response generated from schema\",\r\n                                    \"content\": {\r\n                                        \"application/json\": {\r\n                                            \"schema\": {\r\n                                                \"$ref\": \"#/components/schemas/Pet\"\r\n                                            }\r\n                                        },\r\n                                        \"application/xml\": {\r\n                                            \"schema\": {\r\n                                                \"$ref\": \"#/components/schemas/Pet\"\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            },\r\n                            \"mockedResponses\": {\r\n                                \"200\": {\r\n                                    \"responseBody\": {\r\n                                        \"application/json\": \"{\\\"resource\\\" : \\\"/generateFromExample\\\",\\\"description\\\" : \\\"Default mocked response from example for status code 200\\\"}\",\r\n                                        \"application/xml\": \"<root><resource>/generateFromExample</resource><description>Default mocked response from example for status code 200</description></root>\"\r\n                                    }\r\n                                },\r\n                                \"201\": {\r\n                                    \"responseBody\": {\r\n                                        \"application/json\": \"{\\\"birthday\\\":2059397944,\\\"name\\\":\\\"\\\"}\",\r\n                                        \"application/xml\": \"<birthday>921604684</birthday><name/>\"\r\n                                    }\r\n                                }\r\n                            },\r\n                            \"enabled\": true\r\n                        },\r\n                        \"parameters\": [],\r\n                        \"displayName\": \"/staticMockedResponse\",\r\n                        \"enabled\": true\r\n                    }\r\n                },\r\n                \"securityDefinitions\": {},\r\n                \"definitions\": {},\r\n                \"baseUriParameters\": [],\r\n                \"externalDocs\": [],\r\n                \"servers\": [\r\n                    {\r\n                        \"url\": \"http://localhost\"\r\n                    }\r\n                ],\r\n                \"components\": {\r\n                    \"schemas\": {\r\n                        \"Pet\": {\r\n                            \"required\": [\r\n                                \"name\"\r\n                            ],\r\n                            \"type\": \"object\",\r\n                            \"properties\": {\r\n                                \"birthday\": {\r\n                                    \"type\": \"integer\",\r\n                                    \"format\": \"int32\"\r\n                                },\r\n                                \"name\": {\r\n                                    \"type\": \"string\"\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            \"nativeEndpoint\": [\r\n                {\r\n                    \"passSecurityHeaders\": true,\r\n                    \"uri\": \"http://localhost\",\r\n                    \"connectionTimeoutDuration\": 0,\r\n                    \"alias\": false\r\n                }\r\n            ],\r\n            \"apiName\": \"APIMocking\",\r\n            \"apiVersion\": \"v1\",\r\n            \"apiDescription\": \"API to demonstrate mocking functionality in international developers day\",\r\n            \"maturityState\": \"Beta\",\r\n            \"isActive\": false,\r\n            \"type\": \"REST\",\r\n            \"owner\": \"Administrator\",\r\n            \"policies\": [\r\n                \"19773e29-2838-4efc-aa04-793b48f4d22b\"\r\n            ],\r\n            \"scopes\": [],\r\n            \"publishedPortals\": [],\r\n            \"creationDate\": \"2018-11-01 13:44:58 GMT\",\r\n            \"systemVersion\": 1,\r\n            \"mockService\": {\r\n                \"enableMock\": true\r\n            },\r\n            \"id\": \"afd8eb5e-bba8-447b-8e28-76aac23ba074\"\r\n        },\r\n        \"responseStatus\": \"SUCCESS\",\r\n        \"versions\": [\r\n            {\r\n                \"versionNumber\": \"v1\",\r\n                \"apiId\": \"afd8eb5e-bba8-447b-8e28-76aac23ba074\"\r\n            }\r\n        ]\r\n    }\r\n}"'
        '404':
          description: Not Found
          headers: {}
          content: {}
        '401':
          description: Unauthorized
          headers: {}
          content: {}
        '400':
          description: Bad Request
          headers: {}
          content: {}
      deprecated: false
    parameters: []
  /apis/{apiId}/mock/disable:
    put:
      tags:
      - Mocking
      summary: Disable API Mocking
      description: Once API is disabled from mocking capability, at runtime all the API invocations are redirected to the native service instead of sending the mocked response
      operationId: DisableAPIMocking
      parameters:
      - name: apiId
        in: path
        description: (Required) API Id for the API to be deactivated
        required: true
        style: simple
        schema:
          type: string
          examples:
          - 3c575e49-73d5-4ae8-a3a5-552544e5a4a0
      - name: Accept
        in: header
        description: ''
        required: true
        style: simple
        schema:
          type: string
          examples:
          - application/json
      responses:
        '400':
          description: Bad Request
          headers: {}
          content: {}
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: string
                examples:
                - '"{\r\n    \"apiResponse\": {\r\n        \"api\": {\r\n            \"apiDefinition\": {\r\n                \"type\": \"rest\",\r\n                \"info\": {\r\n                    \"description\": \"API to demonstrate mocking functionality in international developers day\",\r\n                    \"version\": \"v1\",\r\n                    \"title\": \"API_MOCKING\"\r\n                },\r\n                \"host\": \"localhost\",\r\n                \"schemes\": [\r\n                    \"http\"\r\n                ],\r\n                \"consumes\": [\r\n                    \"application/json\"\r\n                ],\r\n                \"security\": [],\r\n                \"paths\": {\r\n                    \"/conditionBasedMockedResponse\": {\r\n                        \"post\": {\r\n                            \"summary\": \"Configure condition and mocked response\",\r\n                            \"operationId\": \"conditionBasedMockedResponse\",\r\n                            \"produces\": [\r\n                                \"text/plain\"\r\n                            ],\r\n                            \"responses\": {\r\n                                \"200\": {\r\n                                    \"description\": \"200 response\",\r\n                                    \"content\": {\r\n                                        \"text/plain\": {\r\n                                            \"example\": \"No condition evaluates to true. \\nSo API-Gateway sent this default response.\"\r\n                                        }\r\n                                    }\r\n                                }\r\n                            },\r\n                            \"mockedResponses\": {\r\n                                \"200\": {\r\n                                    \"responseBody\": {\r\n                                        \"text/plain\": \"No condition evaluates to true. \\nSo API-Gateway sent this default response.\"\r\n                                    }\r\n                                }\r\n                            },\r\n                            \"enabled\": true\r\n                        },\r\n                        \"parameters\": [],\r\n                        \"displayName\": \"/conditionBasedMockedResponse\",\r\n                        \"enabled\": true\r\n                    },\r\n                    \"/customESBMockedResponse\": {\r\n                        \"post\": {\r\n                            \"summary\": \"Configure custom ESB mocked response\",\r\n                            \"operationId\": \"customESBMockedResponse\",\r\n                            \"produces\": [\r\n                                \"application/json\"\r\n                            ],\r\n                            \"responses\": {\r\n                                \"200\": {\r\n                                    \"description\": \"200 response\"\r\n                                }\r\n                            },\r\n                            \"mockedResponses\": {\r\n                                \"200\": {\r\n                                    \"responseBody\": {\r\n                                        \"application/json\": \"\"\r\n                                    }\r\n                                }\r\n                            },\r\n                            \"enabled\": true\r\n                        },\r\n                        \"parameters\": [],\r\n                        \"displayName\": \"/customESBMockedResponse\",\r\n                        \"enabled\": true\r\n                    },\r\n                    \"/dynamicMockedResponse\": {\r\n                        \"post\": {\r\n                            \"summary\": \"Dynamic mocked response set\",\r\n                            \"operationId\": \"dynamicMockedResponse\",\r\n                            \"produces\": [\r\n                                \"application/json\"\r\n                            ],\r\n                            \"responses\": {\r\n                                \"200\": {\r\n                                    \"description\": \"200 response\"\r\n                                }\r\n                            },\r\n                            \"mockedResponses\": {\r\n                                \"200\": {\r\n                                    \"responseBody\": {\r\n                                        \"application/json\": \"\"\r\n                                    }\r\n                                }\r\n                            },\r\n                            \"enabled\": true\r\n                        },\r\n                        \"parameters\": [],\r\n                        \"displayName\": \"/dynamicMockedResponse\",\r\n                        \"enabled\": true\r\n                    },\r\n                    \"/staticMockedResponse\": {\r\n                        \"post\": {\r\n                            \"summary\": \"Default mocked response from example\",\r\n                            \"operationId\": \"generateFromExample\",\r\n                            \"produces\": [\r\n                                \"application/json\",\r\n                                \"application/xml\"\r\n                            ],\r\n                            \"responses\": {\r\n                                \"200\": {\r\n                                    \"description\": \"200 response generated from example\",\r\n                                    \"content\": {\r\n                                        \"application/json\": {\r\n                                            \"example\": \"{\\\"resource\\\" : \\\"/generateFromExample\\\",\\\"description\\\" : \\\"Default mocked response from example for status code 200\\\"}\"\r\n                                        },\r\n                                        \"application/xml\": {\r\n                                            \"example\": \"<root><resource>/generateFromExample</resource><description>Default mocked response from example for status code 200</description></root>\"\r\n                                        }\r\n                                    }\r\n                                },\r\n                                \"201\": {\r\n                                    \"description\": \"201 response generated from schema\",\r\n                                    \"content\": {\r\n                                        \"application/json\": {\r\n                                            \"schema\": {\r\n                                                \"$ref\": \"#/components/schemas/Pet\"\r\n                                            }\r\n                                        },\r\n                                        \"application/xml\": {\r\n                                            \"schema\": {\r\n                                                \"$ref\": \"#/components/schemas/Pet\"\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            },\r\n                            \"mockedResponses\": {\r\n                                \"200\": {\r\n                                    \"responseBody\": {\r\n                                        \"application/json\": \"{\\\"resource\\\" : \\\"/generateFromExample\\\",\\\"description\\\" : \\\"Default mocked response from example for status code 200\\\"}\",\r\n                                        \"application/xml\": \"<root><resource>/generateFromExample</resource><description>Default mocked response from example for status code 200</description></root>\"\r\n                                    }\r\n                                },\r\n                                \"201\": {\r\n                                    \"responseBody\": {\r\n                                        \"application/json\": \"{\\\"birthday\\\":2059397944,\\\"name\\\":\\\"\\\"}\",\r\n                                        \"application/xml\": \"<birthday>921604684</birthday><name/>\"\r\n                                    }\r\n                                }\r\n                            },\r\n                            \"enabled\": true\r\n                        },\r\n                        \"parameters\": [],\r\n                        \"displayName\": \"/staticMockedResponse\",\r\n                        \"enabled\": true\r\n                    }\r\n                },\r\n                \"securityDefinitions\": {},\r\n                \"definitions\": {},\r\n                \"baseUriParameters\": [],\r\n                \"externalDocs\": [],\r\n                \"servers\": [\r\n                    {\r\n                        \"url\": \"http://localhost\"\r\n                    }\r\n                ],\r\n                \"components\": {\r\n                    \"schemas\": {\r\n                        \"Pet\": {\r\n                            \"required\": [\r\n                                \"name\"\r\n                            ],\r\n                            \"type\": \"object\",\r\n                            \"properties\": {\r\n                                \"birthday\": {\r\n                                    \"type\": \"integer\",\r\n                                    \"format\": \"int32\"\r\n                                },\r\n                                \"name\": {\r\n                                    \"type\": \"string\"\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            \"nativeEndpoint\": [\r\n                {\r\n                    \"passSecurityHeaders\": true,\r\n                    \"uri\": \"http://localhost\",\r\n                    \"connectionTimeoutDuration\": 0,\r\n                    \"alias\": false\r\n                }\r\n            ],\r\n            \"apiName\": \"APIMocking\",\r\n            \"apiVersion\": \"v1\",\r\n            \"apiDescription\": \"API to demonstrate mocking functionality in international developers day\",\r\n            \"maturityState\": \"Beta\",\r\n            \"isActive\": false,\r\n            \"type\": \"REST\",\r\n            \"owner\": \"Administrator\",\r\n            \"policies\": [\r\n                \"19773e29-2838-4efc-aa04-793b48f4d22b\"\r\n            ],\r\n            \"scopes\": [],\r\n            \"publishedPortals\": [],\r\n            \"creationDate\": \"2018-11-01 13:44:58 GMT\",\r\n            \"systemVersion\": 1,\r\n            \"mockService\": {\r\n                \"enableMock\": false\r\n            },\r\n            \"id\": \"afd8eb5e-bba8-447b-8e28-76aac23ba074\"\r\n        },\r\n        \"responseStatus\": \"SUCCESS\",\r\n        \"versions\": [\r\n            {\r\n                \"versionNumber\": \"v1\",\r\n                \"apiId\": \"afd8eb5e-bba8-447b-8e28-76aac23ba074\"\r\n            }\r\n        ]\r\n    }\r\n}"'
                contentMediaType: application/json
              example: '"{\r\n    \"apiResponse\": {\r\n        \"api\": {\r\n            \"apiDefinition\": {\r\n                \"type\": \"rest\",\r\n                \"info\": {\r\n                    \"description\": \"API to demonstrate mocking functionality in international developers day\",\r\n                    \"version\": \"v1\",\r\n                    \"title\": \"API_MOCKING\"\r\n                },\r\n                \"host\": \"localhost\",\r\n                \"schemes\": [\r\n                    \"http\"\r\n                ],\r\n                \"consumes\": [\r\n                    \"application/json\"\r\n                ],\r\n                \"security\": [],\r\n                \"paths\": {\r\n                    \"/conditionBasedMockedResponse\": {\r\n                        \"post\": {\r\n                            \"summary\": \"Configure condition and mocked response\",\r\n                            \"operationId\": \"conditionBasedMockedResponse\",\r\n                            \"produces\": [\r\n                                \"text/plain\"\r\n                            ],\r\n                            \"responses\": {\r\n                                \"200\": {\r\n                                    \"description\": \"200 response\",\r\n                                    \"content\": {\r\n                                        \"text/plain\": {\r\n                                            \"example\": \"No condition evaluates to true. \\nSo API-Gateway sent this default response.\"\r\n                                        }\r\n                                    }\r\n                                }\r\n                            },\r\n                            \"mockedResponses\": {\r\n                                \"200\": {\r\n                                    \"responseBody\": {\r\n                                        \"text/plain\": \"No condition evaluates to true. \\nSo API-Gateway sent this default response.\"\r\n                                    }\r\n                                }\r\n                            },\r\n                            \"enabled\": true\r\n                        },\r\n                        \"parameters\": [],\r\n                        \"displayName\": \"/conditionBasedMockedResponse\",\r\n                        \"enabled\": true\r\n                    },\r\n                    \"/customESBMockedResponse\": {\r\n                        \"post\": {\r\n                            \"summary\": \"Configure custom ESB mocked response\",\r\n                            \"operationId\": \"customESBMockedResponse\",\r\n                            \"produces\": [\r\n                                \"application/json\"\r\n                            ],\r\n                            \"responses\": {\r\n                                \"200\": {\r\n                                    \"description\": \"200 response\"\r\n                                }\r\n                            },\r\n                            \"mockedResponses\": {\r\n                                \"200\": {\r\n                                    \"responseBody\": {\r\n                                        \"application/json\": \"\"\r\n                                    }\r\n                                }\r\n                            },\r\n                            \"enabled\": true\r\n                        },\r\n                        \"parameters\": [],\r\n                        \"displayName\": \"/customESBMockedResponse\",\r\n                        \"enabled\": true\r\n                    },\r\n                    \"/dynamicMockedResponse\": {\r\n                        \"post\": {\r\n                            \"summary\": \"Dynamic mocked response set\",\r\n                            \"operationId\": \"dynamicMockedResponse\",\r\n                            \"produces\": [\r\n                                \"application/json\"\r\n                            ],\r\n                            \"responses\": {\r\n                                \"200\": {\r\n                                    \"description\": \"200 response\"\r\n                                }\r\n                            },\r\n                            \"mockedResponses\": {\r\n                                \"200\": {\r\n                                    \"responseBody\": {\r\n                                        \"application/json\": \"\"\r\n                                    }\r\n                                }\r\n                            },\r\n                            \"enabled\": true\r\n                        },\r\n                        \"parameters\": [],\r\n                        \"displayName\": \"/dynamicMockedResponse\",\r\n                        \"enabled\": true\r\n                    },\r\n                    \"/staticMockedResponse\": {\r\n                        \"post\": {\r\n                            \"summary\": \"Default mocked response from example\",\r\n                            \"operationId\": \"generateFromExample\",\r\n                            \"produces\": [\r\n                                \"application/json\",\r\n                                \"application/xml\"\r\n                            ],\r\n                            \"responses\": {\r\n                                \"200\": {\r\n                                    \"description\": \"200 response generated from example\",\r\n                                    \"content\": {\r\n                                        \"application/json\": {\r\n                                            \"example\": \"{\\\"resource\\\" : \\\"/generateFromExample\\\",\\\"description\\\" : \\\"Default mocked response from example for status code 200\\\"}\"\r\n                                        },\r\n                                        \"application/xml\": {\r\n                                            \"example\": \"<root><resource>/generateFromExample</resource><description>Default mocked response from example for status code 200</description></root>\"\r\n                                        }\r\n                                    }\r\n                                },\r\n                                \"201\": {\r\n                                    \"description\": \"201 response generated from schema\",\r\n                                    \"content\": {\r\n                                        \"application/json\": {\r\n                                            \"schema\": {\r\n                                                \"$ref\": \"#/components/schemas/Pet\"\r\n                                            }\r\n                                        },\r\n                                        \"application/xml\": {\r\n                                            \"schema\": {\r\n                                                \"$ref\": \"#/components/schemas/Pet\"\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            },\r\n                            \"mockedResponses\": {\r\n                                \"200\": {\r\n                                    \"responseBody\": {\r\n                                        \"application/json\": \"{\\\"resource\\\" : \\\"/generateFromExample\\\",\\\"description\\\" : \\\"Default mocked response from example for status code 200\\\"}\",\r\n                                        \"application/xml\": \"<root><resource>/generateFromExample</resource><description>Default mocked response from example for status code 200</description></root>\"\r\n                                    }\r\n                                },\r\n                                \"201\": {\r\n                                    \"responseBody\": {\r\n                                        \"application/json\": \"{\\\"birthday\\\":2059397944,\\\"name\\\":\\\"\\\"}\",\r\n                                        \"application/xml\": \"<birthday>921604684</birthday><name/>\"\r\n                                    }\r\n                                }\r\n                            },\r\n                            \"enabled\": true\r\n                        },\r\n                        \"parameters\": [],\r\n                        \"displayName\": \"/staticMockedResponse\",\r\n                        \"enabled\": true\r\n                    }\r\n                },\r\n                \"securityDefinitions\": {},\r\n                \"definitions\": {},\r\n                \"baseUriParameters\": [],\r\n                \"externalDocs\": [],\r\n                \"servers\": [\r\n                    {\r\n                        \"url\": \"http://localhost\"\r\n                    }\r\n                ],\r\n                \"components\": {\r\n                    \"schemas\": {\r\n                        \"Pet\": {\r\n                            \"required\": [\r\n                                \"name\"\r\n                            ],\r\n                            \"type\": \"object\",\r\n                            \"properties\": {\r\n                                \"birthday\": {\r\n                                    \"type\": \"integer\",\r\n                                    \"format\": \"int32\"\r\n                                },\r\n                                \"name\": {\r\n                                    \"type\": \"string\"\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            \"nativeEndpoint\": [\r\n                {\r\n                    \"passSecurityHeaders\": true,\r\n                    \"uri\": \"http://localhost\",\r\n                    \"connectionTimeoutDuration\": 0,\r\n                    \"alias\": false\r\n                }\r\n            ],\r\n            \"apiName\": \"APIMocking\",\r\n            \"apiVersion\": \"v1\",\r\n            \"apiDescription\": \"API to demonstrate mocking functionality in international developers day\",\r\n            \"maturityState\": \"Beta\",\r\n            \"isActive\": false,\r\n            \"type\": \"REST\",\r\n            \"owner\": \"Administrator\",\r\n            \"policies\": [\r\n                \"19773e29-2838-4efc-aa04-793b48f4d22b\"\r\n            ],\r\n            \"scopes\": [],\r\n            \"publishedPortals\": [],\r\n            \"creationDate\": \"2018-11-01 13:44:58 GMT\",\r\n            \"systemVersion\": 1,\r\n            \"mockService\": {\r\n                \"enableMock\": false\r\n            },\r\n            \"id\": \"afd8eb5e-bba8-447b-8e28-76aac23ba074\"\r\n        },\r\n        \"responseStatus\": \"SUCCESS\",\r\n        \"versions\": [\r\n            {\r\n                \"versionNumber\": \"v1\",\r\n                \"apiId\": \"afd8eb5e-bba8-447b-8e28-76aac23ba074\"\r\n            }\r\n        ]\r\n    }\r\n}"'
        '404':
          description: Not Found
          headers: {}
          content: {}
        '401':
          description: Unauthorized
          headers: {}
          content: {}
      deprecated: false
    parameters: []
  /apis/{apiId}/scopes:
    get:
      tags:
      - Scopes
      summary: Get Scopes of API by API Id
      description: >-
        An API Scope is a collection of resources or operations in an API. Users can create multiple scopes for a single API. Policies can be attached to an API level or scope level. This method retrieves the scopes of an API.


        You can create, modify or delete the scopes in the update API operation using PUT /api/{apiId}
      operationId: GetScopesofAPIbyAPIId
      parameters:
      - name: apiId
        in: path
        description: (Required) API Id for the API to retrieve the versions
        required: true
        style: simple
        schema:
          type: string
          examples:
          - 3c575e49-73d5-4ae8-a3a5-552544e5a4a0
      - name: Accept
        in: header
        description: ''
        required: true
        style: simple
        schema:
          type: string
          examples:
          - application/json
      responses:
        '404':
          description: Not Found
          headers: {}
          content: {}
        '401':
          description: Unauthorized
          headers: {}
          content: {}
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: string
                examples:
                - '"{\r\n  \"scopeReferences\": [\r\n    {\r\n      \"references\": [\r\n        {\r\n          \"resourcePath\": \"/random\",\r\n          \"supportedOperations\": []\r\n        }\r\n      ],\r\n      \"scope\": {\r\n        \"name\": \"Get_Scopes\",\r\n        \"description\": \"Dummy description of the scope\",\r\n        \"policies\": [\r\n          \"db1a42f4-e038-4a1b-82f4-8fee6fbd5687\"\r\n        ]\r\n      }\r\n    }\r\n  ]\r\n}"'
                contentMediaType: application/json
              example: '"{\r\n  \"scopeReferences\": [\r\n    {\r\n      \"references\": [\r\n        {\r\n          \"resourcePath\": \"/random\",\r\n          \"supportedOperations\": []\r\n        }\r\n      ],\r\n      \"scope\": {\r\n        \"name\": \"Get_Scopes\",\r\n        \"description\": \"Dummy description of the scope\",\r\n        \"policies\": [\r\n          \"db1a42f4-e038-4a1b-82f4-8fee6fbd5687\"\r\n        ]\r\n      }\r\n    }\r\n  ]\r\n}"'
      deprecated: false
    parameters: []
  /apis/{apiId}/scopes/{scopeName}:
    get:
      tags:
      - Scopes
      summary: Get Scope of API By API Id and Scope Name
      description: Retrieve scopes of an API based on the scope name
      operationId: GetScopeofAPIByAPIIdandScopeName
      parameters:
      - name: apiId
        in: path
        description: (Required) API Id for the API to retrieve the versions
        required: true
        style: simple
        schema:
          type: string
          examples:
          - 3c575e49-73d5-4ae8-a3a5-552544e5a4a0
      - name: scopeName
        in: path
        description: (Required) Name of the scope
        required: true
        style: simple
        schema:
          type: string
          examples:
          - Pet Scope
      - name: Accept
        in: header
        description: ''
        required: true
        style: simple
        schema:
          type: string
          examples:
          - application/json
      responses:
        '401':
          description: Unauthorized
          headers: {}
          content: {}
        '404':
          description: Not Found
          headers: {}
          content: {}
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: string
                examples:
                - '"{\r\n  \"scopeReferences\": [\r\n    {\r\n      \"references\": [\r\n        {\r\n          \"resourcePath\": \"/random\",\r\n          \"supportedOperations\": []\r\n        }\r\n      ],\r\n      \"scope\": {\r\n        \"name\": \"Get_Scopes\",\r\n        \"description\": \"Dummy description of the scope\",\r\n        \"policies\": [\r\n          \"db1a42f4-e038-4a1b-82f4-8fee6fbd5687\"\r\n        ]\r\n      }\r\n    }\r\n  ]\r\n}"'
                contentMediaType: application/json
              example: '"{\r\n  \"scopeReferences\": [\r\n    {\r\n      \"references\": [\r\n        {\r\n          \"resourcePath\": \"/random\",\r\n          \"supportedOperations\": []\r\n        }\r\n      ],\r\n      \"scope\": {\r\n        \"name\": \"Get_Scopes\",\r\n        \"description\": \"Dummy description of the scope\",\r\n        \"policies\": [\r\n          \"db1a42f4-e038-4a1b-82f4-8fee6fbd5687\"\r\n        ]\r\n      }\r\n    }\r\n  ]\r\n}"'
      deprecated: false
    parameters: []
  /apis/{apiId}:
    get:
      tags:
      - APIs
      summary: Get API Details by Id
      description: Retrieve an API based on the API id.
      operationId: GetAPIDetailsbyId
      parameters:
      - name: apiId
        in: path
        description: (Required) API Id for the API to be retrieved
        required: true
        style: simple
        schema:
          type: string
          examples:
          - 3c575e49-73d5-4ae8-a3a5-552544e5a4a0
      - name: Accept
        in: header
        description: ''
        required: true
        style: simple
        schema:
          type: string
          examples:
          - application/json
      responses:
        '401':
          description: Unauthorized
          headers: {}
          content: {}
        '404':
          description: Not Found
          headers: {}
          content: {}
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: string
                examples:
                - "\"{\\r\\n    \\\"apiResponse\\\": {\\r\\n        \\\"api\\\": {\\r\\n            \\\"apiDefinition\\\": {\\r\\n                \\\"type\\\": \\\"rest\\\",\\r\\n                \\\"info\\\": {\\r\\n                    \\\"description\\\": \\\"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\\\",\\r\\n                    \\\"version\\\": \\\"1.0\\\",\\r\\n                    \\\"title\\\": \\\"ChuckNorrisAPI\\\"\\r\\n                },\\r\\n                \\\"host\\\": \\\"api.chucknorris.io\\\",\\r\\n                \\\"basePath\\\": \\\"/jokes\\\",\\r\\n                \\\"schemes\\\": [\\r\\n                    \\\"https\\\"\\r\\n                ],\\r\\n                \\\"security\\\": [],\\r\\n                \\\"paths\\\": {\\r\\n                    \\\"/random\\\": {\\r\\n                        \\\"get\\\": {\\r\\n                            \\\"summary\\\": \\\"GET\\\",\\r\\n                            \\\"description\\\": \\\"\\\",\\r\\n                            \\\"operationId\\\": \\\"GET\\\",\\r\\n                            \\\"produces\\\": [\\r\\n                                \\\"application/json\\\"\\r\\n                            ],\\r\\n                            \\\"responses\\\": {},\\r\\n                            \\\"enabled\\\": true\\r\\n                        },\\r\\n                        \\\"enabled\\\": true\\r\\n                    }\\r\\n                },\\r\\n                \\\"securityDefinitions\\\": {},\\r\\n                \\\"definitions\\\": {},\\r\\n                \\\"baseUriParameters\\\": [],\\r\\n                \\\"externalDocs\\\": [],\\r\\n                \\\"servers\\\": [\\r\\n                    {\\r\\n                        \\\"url\\\": \\\"https://api.chucknorris.io/jokes\\\"\\r\\n                    }\\r\\n                ],\\r\\n                \\\"components\\\": {\\r\\n                    \\\"schemas\\\": {}\\r\\n                }\\r\\n            },\\r\\n            \\\"nativeEndpoint\\\": [\\r\\n                {\\r\\n                    \\\"passSecurityHeaders\\\": true,\\r\\n                    \\\"uri\\\": \\\"https://api.chucknorris.io/jokes\\\",\\r\\n                    \\\"connectionTimeoutDuration\\\": 0,\\r\\n                    \\\"alias\\\": false\\r\\n                }\\r\\n            ],\\r\\n            \\\"apiName\\\": \\\"ChuckNorris\\\",\\r\\n            \\\"apiVersion\\\": \\\"1.0\\\",\\r\\n            \\\"apiDescription\\\": \\\"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\\\",\\r\\n            \\\"maturityState\\\": \\\"Beta\\\",\\r\\n            \\\"isActive\\\": false,\\r\\n            \\\"type\\\": \\\"REST\\\",\\r\\n            \\\"owner\\\": \\\"Administrator\\\",\\r\\n            \\\"policies\\\": [\\r\\n                \\\"08afbfa9-78e1-4c23-bb19-c0012464047e\\\"\\r\\n            ],\\r\\n            \\\"scopes\\\": [],\\r\\n            \\\"publishedPortals\\\": [],\\r\\n            \\\"creationDate\\\": \\\"2018-09-03 11:56:21 GMT\\\",\\r\\n            \\\"systemVersion\\\": 1,\\r\\n            \\\"id\\\": \\\"badc18e6-446f-4aa3-96cd-33e46bd40fb5\\\"\\r\\n        },\\r\\n        \\\"responseStatus\\\": \\\"SUCCESS\\\",\\r\\n        \\\"versions\\\": [\\r\\n            {\\r\\n                \\\"versionNumber\\\": \\\"1.0\\\",\\r\\n                \\\"apiId\\\": \\\"badc18e6-446f-4aa3-96cd-33e46bd40fb5\\\"\\r\\n       \\r\\n       }\\r\\n        ],\\r\\n        \\\"teams\\\": [\\r\\n            {\\r\\n                \\\"id\\\": \\\"Administrators\\\",\\r\\n                \\\"name\\\": \\\"Administrators\\\",\\r\\n                \\\"canDelete\\\": \\\"false\\\"\\r\\n            },\\r\\n            {\\r\\n                \\\"id\\\": \\\"Default\\\",\\r\\n                \\\"name\\\": \\\"Default\\\",\\r\\n                \\\"canDelete\\\": \\\"true\\\"\\r\\n            }\\r\\n        ]    }\\r\\n}\""
                contentMediaType: application/json
              example: "\"{\\r\\n    \\\"apiResponse\\\": {\\r\\n        \\\"api\\\": {\\r\\n            \\\"apiDefinition\\\": {\\r\\n                \\\"type\\\": \\\"rest\\\",\\r\\n                \\\"info\\\": {\\r\\n                    \\\"description\\\": \\\"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\\\",\\r\\n                    \\\"version\\\": \\\"1.0\\\",\\r\\n                    \\\"title\\\": \\\"ChuckNorrisAPI\\\"\\r\\n                },\\r\\n                \\\"host\\\": \\\"api.chucknorris.io\\\",\\r\\n                \\\"basePath\\\": \\\"/jokes\\\",\\r\\n                \\\"schemes\\\": [\\r\\n                    \\\"https\\\"\\r\\n                ],\\r\\n                \\\"security\\\": [],\\r\\n                \\\"paths\\\": {\\r\\n                    \\\"/random\\\": {\\r\\n                        \\\"get\\\": {\\r\\n                            \\\"summary\\\": \\\"GET\\\",\\r\\n                            \\\"description\\\": \\\"\\\",\\r\\n                            \\\"operationId\\\": \\\"GET\\\",\\r\\n                            \\\"produces\\\": [\\r\\n                                \\\"application/json\\\"\\r\\n                            ],\\r\\n                            \\\"responses\\\": {},\\r\\n                            \\\"enabled\\\": true\\r\\n                        },\\r\\n                        \\\"enabled\\\": true\\r\\n                    }\\r\\n                },\\r\\n                \\\"securityDefinitions\\\": {},\\r\\n                \\\"definitions\\\": {},\\r\\n                \\\"baseUriParameters\\\": [],\\r\\n                \\\"externalDocs\\\": [],\\r\\n                \\\"servers\\\": [\\r\\n                    {\\r\\n                        \\\"url\\\": \\\"https://api.chucknorris.io/jokes\\\"\\r\\n                    }\\r\\n                ],\\r\\n                \\\"components\\\": {\\r\\n                    \\\"schemas\\\": {}\\r\\n                }\\r\\n            },\\r\\n            \\\"nativeEndpoint\\\": [\\r\\n                {\\r\\n                    \\\"passSecurityHeaders\\\": true,\\r\\n                    \\\"uri\\\": \\\"https://api.chucknorris.io/jokes\\\",\\r\\n                    \\\"connectionTimeoutDuration\\\": 0,\\r\\n                    \\\"alias\\\": false\\r\\n                }\\r\\n            ],\\r\\n            \\\"apiName\\\": \\\"ChuckNorris\\\",\\r\\n            \\\"apiVersion\\\": \\\"1.0\\\",\\r\\n            \\\"apiDescription\\\": \\\"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\\\",\\r\\n            \\\"maturityState\\\": \\\"Beta\\\",\\r\\n            \\\"isActive\\\": false,\\r\\n            \\\"type\\\": \\\"REST\\\",\\r\\n            \\\"owner\\\": \\\"Administrator\\\",\\r\\n            \\\"policies\\\": [\\r\\n                \\\"08afbfa9-78e1-4c23-bb19-c0012464047e\\\"\\r\\n            ],\\r\\n            \\\"scopes\\\": [],\\r\\n            \\\"publishedPortals\\\": [],\\r\\n            \\\"creationDate\\\": \\\"2018-09-03 11:56:21 GMT\\\",\\r\\n            \\\"systemVersion\\\": 1,\\r\\n            \\\"id\\\": \\\"badc18e6-446f-4aa3-96cd-33e46bd40fb5\\\"\\r\\n        },\\r\\n        \\\"responseStatus\\\": \\\"SUCCESS\\\",\\r\\n        \\\"versions\\\": [\\r\\n            {\\r\\n                \\\"versionNumber\\\": \\\"1.0\\\",\\r\\n                \\\"apiId\\\": \\\"badc18e6-446f-4aa3-96cd-33e46bd40fb5\\\"\\r\\n       \\r\\n       }\\r\\n        ],\\r\\n        \\\"teams\\\": [\\r\\n            {\\r\\n                \\\"id\\\": \\\"Administrators\\\",\\r\\n                \\\"name\\\": \\\"Administrators\\\",\\r\\n                \\\"canDelete\\\": \\\"false\\\"\\r\\n            },\\r\\n            {\\r\\n                \\\"id\\\": \\\"Default\\\",\\r\\n                \\\"name\\\": \\\"Default\\\",\\r\\n                \\\"canDelete\\\": \\\"true\\\"\\r\\n            }\\r\\n        ]    }\\r\\n}\""
      deprecated: false
    delete:
      tags:
      - APIs
      summary: Delete API by Id
      description: Delete the inactive API
      operationId: DeleteAPIbyId
      parameters:
      - name: forceDelete
        in: query
        description: Flag for force delete. Required when API is associated with some applications
        required: true
        style: form
        explode: true
        schema:
          type: boolean
          examples:
          - true
      - name: apiId
        in: path
        description: (Required) API Id for the API to be deleted
        required: true
        style: simple
        schema:
          type: string
          examples:
          - 3c575e49-73d5-4ae8-a3a5-552544e5a4a0
      - name: Accept
        in: header
        description: ''
        required: true
        style: simple
        schema:
          type: string
          examples:
          - application/json
      responses:
        '400':
          description: Bad Request
          headers: {}
          content: {}
        '404':
          description: Not Found
          headers: {}
          content: {}
        '401':
          description: Unauthorized
          headers: {}
          content: {}
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ReturnstheapiIdalongwiththeerrorwhenunsuccessful'
                - examples:
                  - id: <string>
                    apiName: <string>
                    apiVersion: <string>
                    type: <string>
                    publishedPortals:
                    - <string>
                    - <string>
                    systemVersion: <integer>
                    teams:
                    - id: <string>
                      name: <string>
                      source: <string>
                    - id: <string>
                      name: <string>
                      source: <string>
                    active: <boolean>
                    apiId: <string>
                    errorReason: <string>
                    responseStatus: <string>
                contentMediaType: application/json
              example:
                id: <string>
                apiName: <string>
                apiVersion: <string>
                type: <string>
                publishedPortals:
                - <string>
                - <string>
                systemVersion: <integer>
                teams:
                - id: <string>
                  name: <string>
                  source: <string>
                - id: <string>
                  name: <string>
                  source: <string>
                active: <boolean>
                apiId: <string>
                errorReason: <string>
                responseStatus: <string>
        '204':
          description: No Content
          headers: {}
          content: {}
      deprecated: false
    parameters: []
  /apis/{apiId}/activate:
    put:
      tags:
      - APIs
      summary: Activate API
      description: Activate an API so that API is exposed to consumers
      operationId: ActivateAPI
      parameters:
      - name: apiId
        in: path
        description: (Required) API Id for the API to be activated
        required: true
        style: simple
        schema:
          type: string
          examples:
          - 2c843837-cc6c-4ba1-aaf3-b10f8e9adbe0
      - name: Accept
        in: header
        description: ''
        required: true
        style: simple
        schema:
          type: string
          examples:
          - application/json
      responses:
        '400':
          description: Bad Request
          headers: {}
          content: {}
        '401':
          description: Unauthorized
          headers: {}
          content: {}
        '404':
          description: Not Found
          headers: {}
          content: {}
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: string
                examples:
                - "\"{\\r\\n    \\\"apiResponse\\\": {\\r\\n        \\\"api\\\": {\\r\\n            \\\"apiDefinition\\\": {\\r\\n                \\\"type\\\": \\\"rest\\\",\\r\\n                \\\"info\\\": {\\r\\n                    \\\"description\\\": \\\"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\\\",\\r\\n                    \\\"version\\\": \\\"1.0\\\",\\r\\n                    \\\"title\\\": \\\"ChuckNorrisAPI\\\"\\r\\n                },\\r\\n                \\\"host\\\": \\\"api.chucknorris.io\\\",\\r\\n                \\\"basePath\\\": \\\"/jokes\\\",\\r\\n                \\\"schemes\\\": [\\r\\n                    \\\"https\\\"\\r\\n                ],\\r\\n                \\\"security\\\": [],\\r\\n                \\\"paths\\\": {\\r\\n                    \\\"/random\\\": {\\r\\n                        \\\"get\\\": {\\r\\n                            \\\"summary\\\": \\\"GET\\\",\\r\\n                            \\\"description\\\": \\\"\\\",\\r\\n                            \\\"operationId\\\": \\\"GET\\\",\\r\\n                            \\\"produces\\\": [\\r\\n                                \\\"application/json\\\"\\r\\n                            ],\\r\\n                            \\\"responses\\\": {},\\r\\n                            \\\"enabled\\\": true\\r\\n                        },\\r\\n                        \\\"enabled\\\": true\\r\\n                    }\\r\\n                },\\r\\n                \\\"securityDefinitions\\\": {},\\r\\n                \\\"definitions\\\": {},\\r\\n                \\\"baseUriParameters\\\": [],\\r\\n                \\\"externalDocs\\\": [],\\r\\n                \\\"servers\\\": [\\r\\n                    {\\r\\n                        \\\"url\\\": \\\"https://api.chucknorris.io/jokes\\\"\\r\\n                    }\\r\\n                ],\\r\\n                \\\"components\\\": {\\r\\n                    \\\"schemas\\\": {}\\r\\n                }\\r\\n            },\\r\\n            \\\"nativeEndpoint\\\": [\\r\\n                {\\r\\n                    \\\"passSecurityHeaders\\\": true,\\r\\n                    \\\"uri\\\": \\\"https://api.chucknorris.io/jokes\\\",\\r\\n                    \\\"connectionTimeoutDuration\\\": 0,\\r\\n                    \\\"alias\\\": false\\r\\n                }\\r\\n            ],\\r\\n            \\\"apiName\\\": \\\"ChuckNorris\\\",\\r\\n            \\\"apiVersion\\\": \\\"1.0\\\",\\r\\n            \\\"apiDescription\\\": \\\"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\\\",\\r\\n            \\\"maturityState\\\": \\\"Beta\\\",\\r\\n            \\\"isActive\\\": false,\\r\\n            \\\"type\\\": \\\"REST\\\",\\r\\n            \\\"owner\\\": \\\"Administrator\\\",\\r\\n            \\\"policies\\\": [\\r\\n                \\\"08afbfa9-78e1-4c23-bb19-c0012464047e\\\"\\r\\n            ],\\r\\n            \\\"scopes\\\": [],\\r\\n            \\\"publishedPortals\\\": [],\\r\\n            \\\"creationDate\\\": \\\"2018-09-03 11:56:21 GMT\\\",\\r\\n            \\\"systemVersion\\\": 1,\\r\\n            \\\"id\\\": \\\"badc18e6-446f-4aa3-96cd-33e46bd40fb5\\\"\\r\\n        },\\r\\n        \\\"responseStatus\\\": \\\"SUCCESS\\\",\\r\\n        \\\"versions\\\": [\\r\\n            {\\r\\n                \\\"versionNumber\\\": \\\"1.0\\\",\\r\\n                \\\"apiId\\\": \\\"badc18e6-446f-4aa3-96cd-33e46bd40fb5\\\"\\r\\n            }\\r\\n        ]\\r\\n    }\\r\\n}\""
                contentMediaType: application/json
              example: "\"{\\r\\n    \\\"apiResponse\\\": {\\r\\n        \\\"api\\\": {\\r\\n            \\\"apiDefinition\\\": {\\r\\n                \\\"type\\\": \\\"rest\\\",\\r\\n                \\\"info\\\": {\\r\\n                    \\\"description\\\": \\\"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\\\",\\r\\n                    \\\"version\\\": \\\"1.0\\\",\\r\\n                    \\\"title\\\": \\\"ChuckNorrisAPI\\\"\\r\\n                },\\r\\n                \\\"host\\\": \\\"api.chucknorris.io\\\",\\r\\n                \\\"basePath\\\": \\\"/jokes\\\",\\r\\n                \\\"schemes\\\": [\\r\\n                    \\\"https\\\"\\r\\n                ],\\r\\n                \\\"security\\\": [],\\r\\n                \\\"paths\\\": {\\r\\n                    \\\"/random\\\": {\\r\\n                        \\\"get\\\": {\\r\\n                            \\\"summary\\\": \\\"GET\\\",\\r\\n                            \\\"description\\\": \\\"\\\",\\r\\n                            \\\"operationId\\\": \\\"GET\\\",\\r\\n                            \\\"produces\\\": [\\r\\n                                \\\"application/json\\\"\\r\\n                            ],\\r\\n                            \\\"responses\\\": {},\\r\\n                            \\\"enabled\\\": true\\r\\n                        },\\r\\n                        \\\"enabled\\\": true\\r\\n                    }\\r\\n                },\\r\\n                \\\"securityDefinitions\\\": {},\\r\\n                \\\"definitions\\\": {},\\r\\n                \\\"baseUriParameters\\\": [],\\r\\n                \\\"externalDocs\\\": [],\\r\\n                \\\"servers\\\": [\\r\\n                    {\\r\\n                        \\\"url\\\": \\\"https://api.chucknorris.io/jokes\\\"\\r\\n                    }\\r\\n                ],\\r\\n                \\\"components\\\": {\\r\\n                    \\\"schemas\\\": {}\\r\\n                }\\r\\n            },\\r\\n            \\\"nativeEndpoint\\\": [\\r\\n                {\\r\\n                    \\\"passSecurityHeaders\\\": true,\\r\\n                    \\\"uri\\\": \\\"https://api.chucknorris.io/jokes\\\",\\r\\n                    \\\"connectionTimeoutDuration\\\": 0,\\r\\n                    \\\"alias\\\": false\\r\\n                }\\r\\n            ],\\r\\n            \\\"apiName\\\": \\\"ChuckNorris\\\",\\r\\n            \\\"apiVersion\\\": \\\"1.0\\\",\\r\\n            \\\"apiDescription\\\": \\\"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\\\",\\r\\n            \\\"maturityState\\\": \\\"Beta\\\",\\r\\n            \\\"isActive\\\": false,\\r\\n            \\\"type\\\": \\\"REST\\\",\\r\\n            \\\"owner\\\": \\\"Administrator\\\",\\r\\n            \\\"policies\\\": [\\r\\n                \\\"08afbfa9-78e1-4c23-bb19-c0012464047e\\\"\\r\\n            ],\\r\\n            \\\"scopes\\\": [],\\r\\n            \\\"publishedPortals\\\": [],\\r\\n            \\\"creationDate\\\": \\\"2018-09-03 11:56:21 GMT\\\",\\r\\n            \\\"systemVersion\\\": 1,\\r\\n            \\\"id\\\": \\\"badc18e6-446f-4aa3-96cd-33e46bd40fb5\\\"\\r\\n        },\\r\\n        \\\"responseStatus\\\": \\\"SUCCESS\\\",\\r\\n        \\\"versions\\\": [\\r\\n            {\\r\\n                \\\"versionNumber\\\": \\\"1.0\\\",\\r\\n                \\\"apiId\\\": \\\"badc18e6-446f-4aa3-96cd-33e46bd40fb5\\\"\\r\\n            }\\r\\n        ]\\r\\n    }\\r\\n}\""
      deprecated: false
    parameters: []
  /apis/{apiId}/deactivate:
    put:
      tags:
      - APIs
      summary: Deactivate API
      description: Deactivate an API so that API is not exposed to consumers
      operationId: DeactivateAPI
      parameters:
      - name: apiId
        in: path
        description: (Required) API Id for the API to be deactivated
        required: true
        style: simple
        schema:
          type: string
          examples:
          - 2c843837-cc6c-4ba1-aaf3-b10f8e9adbe0
      - name: Accept
        in: header
        description: ''
        required: true
        style: simple
        schema:
          type: string
          examples:
          - application/json
      responses:
        '401':
          description: Unauthorized
          headers: {}
          content: {}
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: string
                examples:
                - "\"{\\r\\n    \\\"apiResponse\\\": {\\r\\n        \\\"api\\\": {\\r\\n            \\\"apiDefinition\\\": {\\r\\n                \\\"type\\\": \\\"rest\\\",\\r\\n                \\\"info\\\": {\\r\\n                    \\\"description\\\": \\\"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\\\",\\r\\n                    \\\"version\\\": \\\"1.0\\\",\\r\\n                    \\\"title\\\": \\\"ChuckNorrisAPI\\\"\\r\\n                },\\r\\n                \\\"host\\\": \\\"api.chucknorris.io\\\",\\r\\n                \\\"basePath\\\": \\\"/jokes\\\",\\r\\n                \\\"schemes\\\": [\\r\\n                    \\\"https\\\"\\r\\n                ],\\r\\n                \\\"security\\\": [],\\r\\n                \\\"paths\\\": {\\r\\n                    \\\"/random\\\": {\\r\\n                        \\\"get\\\": {\\r\\n                            \\\"summary\\\": \\\"GET\\\",\\r\\n                            \\\"description\\\": \\\"\\\",\\r\\n                            \\\"operationId\\\": \\\"GET\\\",\\r\\n                            \\\"produces\\\": [\\r\\n                                \\\"application/json\\\"\\r\\n                            ],\\r\\n                            \\\"responses\\\": {},\\r\\n                            \\\"enabled\\\": true\\r\\n                        },\\r\\n                        \\\"enabled\\\": true\\r\\n                    }\\r\\n                },\\r\\n                \\\"securityDefinitions\\\": {},\\r\\n                \\\"definitions\\\": {},\\r\\n                \\\"baseUriParameters\\\": [],\\r\\n                \\\"externalDocs\\\": [],\\r\\n                \\\"servers\\\": [\\r\\n                    {\\r\\n                        \\\"url\\\": \\\"https://api.chucknorris.io/jokes\\\"\\r\\n                    }\\r\\n                ],\\r\\n                \\\"components\\\": {\\r\\n                    \\\"schemas\\\": {}\\r\\n                }\\r\\n            },\\r\\n            \\\"nativeEndpoint\\\": [\\r\\n                {\\r\\n                    \\\"passSecurityHeaders\\\": true,\\r\\n                    \\\"uri\\\": \\\"https://api.chucknorris.io/jokes\\\",\\r\\n                    \\\"connectionTimeoutDuration\\\": 0,\\r\\n                    \\\"alias\\\": false\\r\\n                }\\r\\n            ],\\r\\n            \\\"apiName\\\": \\\"ChuckNorris\\\",\\r\\n            \\\"apiVersion\\\": \\\"1.0\\\",\\r\\n            \\\"apiDescription\\\": \\\"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\\\",\\r\\n            \\\"maturityState\\\": \\\"Beta\\\",\\r\\n            \\\"isActive\\\": false,\\r\\n            \\\"type\\\": \\\"REST\\\",\\r\\n            \\\"owner\\\": \\\"Administrator\\\",\\r\\n            \\\"policies\\\": [\\r\\n                \\\"08afbfa9-78e1-4c23-bb19-c0012464047e\\\"\\r\\n            ],\\r\\n            \\\"scopes\\\": [],\\r\\n            \\\"publishedPortals\\\": [],\\r\\n            \\\"creationDate\\\": \\\"2018-09-03 11:56:21 GMT\\\",\\r\\n            \\\"systemVersion\\\": 1,\\r\\n            \\\"id\\\": \\\"badc18e6-446f-4aa3-96cd-33e46bd40fb5\\\"\\r\\n        },\\r\\n        \\\"responseStatus\\\": \\\"SUCCESS\\\",\\r\\n        \\\"versions\\\": [\\r\\n            {\\r\\n                \\\"versionNumber\\\": \\\"1.0\\\",\\r\\n                \\\"apiId\\\": \\\"badc18e6-446f-4aa3-96cd-33e46bd40fb5\\\"\\r\\n            }\\r\\n        ]\\r\\n    }\\r\\n}\""
                contentMediaType: application/json
              example: "\"{\\r\\n    \\\"apiResponse\\\": {\\r\\n        \\\"api\\\": {\\r\\n            \\\"apiDefinition\\\": {\\r\\n                \\\"type\\\": \\\"rest\\\",\\r\\n                \\\"info\\\": {\\r\\n                    \\\"description\\\": \\\"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\\\",\\r\\n                    \\\"version\\\": \\\"1.0\\\",\\r\\n                    \\\"title\\\": \\\"ChuckNorrisAPI\\\"\\r\\n                },\\r\\n                \\\"host\\\": \\\"api.chucknorris.io\\\",\\r\\n                \\\"basePath\\\": \\\"/jokes\\\",\\r\\n                \\\"schemes\\\": [\\r\\n                    \\\"https\\\"\\r\\n                ],\\r\\n                \\\"security\\\": [],\\r\\n                \\\"paths\\\": {\\r\\n                    \\\"/random\\\": {\\r\\n                        \\\"get\\\": {\\r\\n                            \\\"summary\\\": \\\"GET\\\",\\r\\n                            \\\"description\\\": \\\"\\\",\\r\\n                            \\\"operationId\\\": \\\"GET\\\",\\r\\n                            \\\"produces\\\": [\\r\\n                                \\\"application/json\\\"\\r\\n                            ],\\r\\n                            \\\"responses\\\": {},\\r\\n                            \\\"enabled\\\": true\\r\\n                        },\\r\\n                        \\\"enabled\\\": true\\r\\n                    }\\r\\n                },\\r\\n                \\\"securityDefinitions\\\": {},\\r\\n                \\\"definitions\\\": {},\\r\\n                \\\"baseUriParameters\\\": [],\\r\\n                \\\"externalDocs\\\": [],\\r\\n                \\\"servers\\\": [\\r\\n                    {\\r\\n                        \\\"url\\\": \\\"https://api.chucknorris.io/jokes\\\"\\r\\n                    }\\r\\n                ],\\r\\n                \\\"components\\\": {\\r\\n                    \\\"schemas\\\": {}\\r\\n                }\\r\\n            },\\r\\n            \\\"nativeEndpoint\\\": [\\r\\n                {\\r\\n                    \\\"passSecurityHeaders\\\": true,\\r\\n                    \\\"uri\\\": \\\"https://api.chucknorris.io/jokes\\\",\\r\\n                    \\\"connectionTimeoutDuration\\\": 0,\\r\\n                    \\\"alias\\\": false\\r\\n                }\\r\\n            ],\\r\\n            \\\"apiName\\\": \\\"ChuckNorris\\\",\\r\\n            \\\"apiVersion\\\": \\\"1.0\\\",\\r\\n            \\\"apiDescription\\\": \\\"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\\\",\\r\\n            \\\"maturityState\\\": \\\"Beta\\\",\\r\\n            \\\"isActive\\\": false,\\r\\n            \\\"type\\\": \\\"REST\\\",\\r\\n            \\\"owner\\\": \\\"Administrator\\\",\\r\\n            \\\"policies\\\": [\\r\\n                \\\"08afbfa9-78e1-4c23-bb19-c0012464047e\\\"\\r\\n            ],\\r\\n            \\\"scopes\\\": [],\\r\\n            \\\"publishedPortals\\\": [],\\r\\n            \\\"creationDate\\\": \\\"2018-09-03 11:56:21 GMT\\\",\\r\\n            \\\"systemVersion\\\": 1,\\r\\n            \\\"id\\\": \\\"badc18e6-446f-4aa3-96cd-33e46bd40fb5\\\"\\r\\n        },\\r\\n        \\\"responseStatus\\\": \\\"SUCCESS\\\",\\r\\n        \\\"versions\\\": [\\r\\n            {\\r\\n                \\\"versionNumber\\\": \\\"1.0\\\",\\r\\n                \\\"apiId\\\": \\\"badc18e6-446f-4aa3-96cd-33e46bd40fb5\\\"\\r\\n            }\\r\\n        ]\\r\\n    }\\r\\n}\""
        '404':
          description: Not Found
          headers: {}
          content: {}
        '400':
          description: Bad Request
          headers: {}
          content: {}
      deprecated: false
    parameters: []
  /apis/{apiId}/publish:
    put:
      tags:
      - APIs
      summary: Publish API
      description: This REST operation is used to publish API to the registered API Portal
      operationId: PublishAPI
      parameters:
      - name: portalGatewayId
        in: query
        description: ''
        required: true
        style: form
        explode: true
        schema:
          type: string
          examples:
          - d663e093-b39a-4330-93b9-fcb68d1a2c3d
      - name: apiId
        in: path
        description: (Required) API Id for the API to be published
        required: true
        style: simple
        schema:
          type: string
          examples:
          - 2c843837-cc6c-4ba1-aaf3-b10f8e9adbe0
      - name: Accept
        in: header
        description: ''
        required: true
        style: simple
        schema:
          type: string
          examples:
          - application/json
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/PublishAPIRequest'
              - examples:
                - communities:
                  - 3bdf8005-5685-3ef5-b132-de4681963fb6
                  endpoints:
                  - http://SAG-1YVHZY2:5555/gateway/Petstore/1.0.5
              contentMediaType: application/json
            example:
              communities:
              - 3bdf8005-5685-3ef5-b132-de4681963fb6
              endpoints:
              - http://SAG-1YVHZY2:5555/gateway/Petstore/1.0.5
        required: true
      responses:
        '404':
          description: Not Found
          headers: {}
          content: {}
        '401':
          description: Unauthorized
          headers: {}
          content: {}
        '400':
          description: Bad Request
          headers: {}
          content: {}
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: string
                examples:
                - "\"{\\r\\n  \\\"apiResponse\\\": {\\r\\n    \\\"api\\\": {\\r\\n      \\\"apiDefinition\\\": {\\r\\n        \\\"type\\\": \\\"rest\\\",\\r\\n        \\\"info\\\": {\\r\\n          \\\"vendorExtensions\\\": {},\\r\\n          \\\"description\\\": \\\"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\\\",\\r\\n          \\\"version\\\": \\\"1.0\\\",\\r\\n          \\\"title\\\": \\\"ChuckNorrisAPI\\\"\\r\\n        },\\r\\n        \\\"host\\\": \\\"api.chucknorris.io\\\",\\r\\n        \\\"basePath\\\": \\\"/jokes\\\",\\r\\n        \\\"schemes\\\": [\\r\\n          \\\"https\\\"\\r\\n        ],\\r\\n        \\\"paths\\\": {\\r\\n          \\\"/random\\\": {\\r\\n            \\\"get\\\": {\\r\\n              \\\"summary\\\": \\\"GET\\\",\\r\\n              \\\"description\\\": \\\"\\\",\\r\\n              \\\"operationId\\\": \\\"GET\\\",\\r\\n              \\\"produces\\\": [\\r\\n                \\\"application/json\\\"\\r\\n              ],\\r\\n              \\\"parameters\\\": [],\\r\\n              \\\"responses\\\": {},\\r\\n              \\\"enabled\\\": true\\r\\n            },\\r\\n            \\\"enabled\\\": true\\r\\n          }\\r\\n        },\\r\\n        \\\"definitions\\\": {}\\r\\n      },\\r\\n      \\\"nativeEndpoint\\\": [\\r\\n        {\\r\\n          \\\"passSecurityHeaders\\\": true,\\r\\n          \\\"uri\\\": \\\"https://api.chucknorris.io/jokes\\\",\\r\\n          \\\"connectionTimeoutDuration\\\": 0,\\r\\n          \\\"alias\\\": false\\r\\n        }\\r\\n      ],\\r\\n      \\\"apiName\\\": \\\"ChuckNorrisAPI\\\",\\r\\n      \\\"apiVersion\\\": \\\"1.0\\\",\\r\\n      \\\"apiDescription\\\": \\\"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\\\",\\r\\n      \\\"maturityState\\\": \\\"Beta\\\",\\r\\n      \\\"isActive\\\": false,\\r\\n      \\\"type\\\": \\\"REST\\\",\\r\\n      \\\"owner\\\": \\\"Administrator\\\",\\r\\n      \\\"policies\\\": [\\r\\n        \\\"879068cd-8628-4f2a-b903-4e6613ca12ba\\\"\\r\\n      ],\\r\\n      \\\"referencedFiles\\\": {\\r\\n        \\\"ChuckNorrisAPI.json\\\": \\\"{\\\\r\\\\n  \\\\\\\"swagger\\\\\\\": \\\\\\\"2.0\\\\\\\",\\\\r\\\\n  \\\\\\\"info\\\\\\\": {\\\\r\\\\n    \\\\\\\"description\\\\\\\": \\\\\\\"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\\\\\\\",\\\\r\\\\n    \\\\\\\"title\\\\\\\": \\\\\\\"ChuckNorrisAPI\\\\\\\",\\\\r\\\\n    \\\\\\\"version\\\\\\\": \\\\\\\"1.0\\\\\\\"\\\\r\\\\n  },\\\\r\\\\n  \\\\\\\"host\\\\\\\": \\\\\\\"api.chucknorris.io\\\\\\\",\\\\r\\\\n  \\\\\\\"basePath\\\\\\\": \\\\\\\"/jokes\\\\\\\",\\\\r\\\\n  \\\\\\\"schemes\\\\\\\": [\\\\r\\\\n    \\\\\\\"https\\\\\\\"\\\\r\\\\n  ],\\\\r\\\\n  \\\\\\\"paths\\\\\\\": {\\\\r\\\\n    \\\\\\\"/random\\\\\\\": {\\\\r\\\\n      \\\\\\\"get\\\\\\\": {\\\\r\\\\n        \\\\\\\"summary\\\\\\\": \\\\\\\"GET\\\\\\\",\\\\r\\\\n        \\\\\\\"deprecated\\\\\\\": false,\\\\r\\\\n        \\\\\\\"produces\\\\\\\": [\\\\r\\\\n          \\\\\\\"application/json\\\\\\\"\\\\r\\\\n        ],\\\\r\\\\n        \\\\\\\"description\\\\\\\": \\\\\\\"\\\\\\\",\\\\r\\\\n        \\\\\\\"operationId\\\\\\\": \\\\\\\"GET\\\\\\\"\\\\r\\\\n      }\\\\r\\\\n    }\\\\r\\\\n  }\\\\r\\\\n}\\\\r\\\\n\\\"\\r\\n      },\\r\\n      \\\"scopes\\\": [],\\r\\n      \\\"publishedPortals\\\": [],\\r\\n      \\\"creationDate\\\": \\\"2017-03-13 09:38:30 GMT\\\",\\r\\n      \\\"systemVersion\\\": 1,\\r\\n      \\\"id\\\": \\\"25fb937a-8360-41ab-8be5-987b14fe631d\\\",\\r\\n      \\\"oauth2ScopeName\\\": \\\"25fb937a-8360-41ab-8be5-987b14fe631d\\\"\\r\\n    },\\r\\n    \\\"responseStatus\\\": \\\"SUCCESS\\\"\\r\\n  }\\r\\n}\""
                contentMediaType: application/json
              example: "\"{\\r\\n  \\\"apiResponse\\\": {\\r\\n    \\\"api\\\": {\\r\\n      \\\"apiDefinition\\\": {\\r\\n        \\\"type\\\": \\\"rest\\\",\\r\\n        \\\"info\\\": {\\r\\n          \\\"vendorExtensions\\\": {},\\r\\n          \\\"description\\\": \\\"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\\\",\\r\\n          \\\"version\\\": \\\"1.0\\\",\\r\\n          \\\"title\\\": \\\"ChuckNorrisAPI\\\"\\r\\n        },\\r\\n        \\\"host\\\": \\\"api.chucknorris.io\\\",\\r\\n        \\\"basePath\\\": \\\"/jokes\\\",\\r\\n        \\\"schemes\\\": [\\r\\n          \\\"https\\\"\\r\\n        ],\\r\\n        \\\"paths\\\": {\\r\\n          \\\"/random\\\": {\\r\\n            \\\"get\\\": {\\r\\n              \\\"summary\\\": \\\"GET\\\",\\r\\n              \\\"description\\\": \\\"\\\",\\r\\n              \\\"operationId\\\": \\\"GET\\\",\\r\\n              \\\"produces\\\": [\\r\\n                \\\"application/json\\\"\\r\\n              ],\\r\\n              \\\"parameters\\\": [],\\r\\n              \\\"responses\\\": {},\\r\\n              \\\"enabled\\\": true\\r\\n            },\\r\\n            \\\"enabled\\\": true\\r\\n          }\\r\\n        },\\r\\n        \\\"definitions\\\": {}\\r\\n      },\\r\\n      \\\"nativeEndpoint\\\": [\\r\\n        {\\r\\n          \\\"passSecurityHeaders\\\": true,\\r\\n          \\\"uri\\\": \\\"https://api.chucknorris.io/jokes\\\",\\r\\n          \\\"connectionTimeoutDuration\\\": 0,\\r\\n          \\\"alias\\\": false\\r\\n        }\\r\\n      ],\\r\\n      \\\"apiName\\\": \\\"ChuckNorrisAPI\\\",\\r\\n      \\\"apiVersion\\\": \\\"1.0\\\",\\r\\n      \\\"apiDescription\\\": \\\"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\\\",\\r\\n      \\\"maturityState\\\": \\\"Beta\\\",\\r\\n      \\\"isActive\\\": false,\\r\\n      \\\"type\\\": \\\"REST\\\",\\r\\n      \\\"owner\\\": \\\"Administrator\\\",\\r\\n      \\\"policies\\\": [\\r\\n        \\\"879068cd-8628-4f2a-b903-4e6613ca12ba\\\"\\r\\n      ],\\r\\n      \\\"referencedFiles\\\": {\\r\\n        \\\"ChuckNorrisAPI.json\\\": \\\"{\\\\r\\\\n  \\\\\\\"swagger\\\\\\\": \\\\\\\"2.0\\\\\\\",\\\\r\\\\n  \\\\\\\"info\\\\\\\": {\\\\r\\\\n    \\\\\\\"description\\\\\\\": \\\\\\\"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\\\\\\\",\\\\r\\\\n    \\\\\\\"title\\\\\\\": \\\\\\\"ChuckNorrisAPI\\\\\\\",\\\\r\\\\n    \\\\\\\"version\\\\\\\": \\\\\\\"1.0\\\\\\\"\\\\r\\\\n  },\\\\r\\\\n  \\\\\\\"host\\\\\\\": \\\\\\\"api.chucknorris.io\\\\\\\",\\\\r\\\\n  \\\\\\\"basePath\\\\\\\": \\\\\\\"/jokes\\\\\\\",\\\\r\\\\n  \\\\\\\"schemes\\\\\\\": [\\\\r\\\\n    \\\\\\\"https\\\\\\\"\\\\r\\\\n  ],\\\\r\\\\n  \\\\\\\"paths\\\\\\\": {\\\\r\\\\n    \\\\\\\"/random\\\\\\\": {\\\\r\\\\n      \\\\\\\"get\\\\\\\": {\\\\r\\\\n        \\\\\\\"summary\\\\\\\": \\\\\\\"GET\\\\\\\",\\\\r\\\\n        \\\\\\\"deprecated\\\\\\\": false,\\\\r\\\\n        \\\\\\\"produces\\\\\\\": [\\\\r\\\\n          \\\\\\\"application/json\\\\\\\"\\\\r\\\\n        ],\\\\r\\\\n        \\\\\\\"description\\\\\\\": \\\\\\\"\\\\\\\",\\\\r\\\\n        \\\\\\\"operationId\\\\\\\": \\\\\\\"GET\\\\\\\"\\\\r\\\\n      }\\\\r\\\\n    }\\\\r\\\\n  }\\\\r\\\\n}\\\\r\\\\n\\\"\\r\\n      },\\r\\n      \\\"scopes\\\": [],\\r\\n      \\\"publishedPortals\\\": [],\\r\\n      \\\"creationDate\\\": \\\"2017-03-13 09:38:30 GMT\\\",\\r\\n      \\\"systemVersion\\\": 1,\\r\\n      \\\"id\\\": \\\"25fb937a-8360-41ab-8be5-987b14fe631d\\\",\\r\\n      \\\"oauth2ScopeName\\\": \\\"25fb937a-8360-41ab-8be5-987b14fe631d\\\"\\r\\n    },\\r\\n    \\\"responseStatus\\\": \\\"SUCCESS\\\"\\r\\n  }\\r\\n}\""
      deprecated: false
    parameters: []
  /apis/{apiId}/unpublish:
    put:
      tags:
      - APIs
      summary: Unpublish API
      description: Unpublish API from the registered API Portal
      operationId: UnpublishAPI
      parameters:
      - name: portalGatewayId
        in: query
        description: ''
        required: true
        style: form
        explode: true
        schema:
          type: string
          examples:
          - d663e093-b39a-4330-93b9-fcb68d1a2c3d
      - name: forceUnpublish
        in: query
        description: ''
        required: true
        style: form
        explode: true
        schema:
          type: boolean
          examples:
          - true
      - name: apiId
        in: path
        description: (Required) API Id for the API to be unpublished
        required: true
        style: simple
        schema:
          type: string
          examples:
          - 2c843837-cc6c-4ba1-aaf3-b10f8e9adbe0
      - name: Accept
        in: header
        description: ''
        required: true
        style: simple
        schema:
          type: string
          examples:
          - application/json
      responses:
        '404':
          description: Not Found
          headers: {}
          content: {}
        '401':
          description: Unauthorized
          headers: {}
          content: {}
        '400':
          description: Bad Request
          headers: {}
          content: {}
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: string
                examples:
                - "\"{\\r\\n  \\\"apiResponse\\\": {\\r\\n    \\\"api\\\": {\\r\\n      \\\"apiDefinition\\\": {\\r\\n        \\\"type\\\": \\\"rest\\\",\\r\\n        \\\"info\\\": {\\r\\n          \\\"vendorExtensions\\\": {},\\r\\n          \\\"description\\\": \\\"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\\\",\\r\\n          \\\"version\\\": \\\"1.0\\\",\\r\\n          \\\"title\\\": \\\"ChuckNorrisAPI\\\"\\r\\n        },\\r\\n        \\\"host\\\": \\\"api.chucknorris.io\\\",\\r\\n        \\\"basePath\\\": \\\"/jokes\\\",\\r\\n        \\\"schemes\\\": [\\r\\n          \\\"https\\\"\\r\\n        ],\\r\\n        \\\"paths\\\": {\\r\\n          \\\"/random\\\": {\\r\\n            \\\"get\\\": {\\r\\n              \\\"summary\\\": \\\"GET\\\",\\r\\n              \\\"description\\\": \\\"\\\",\\r\\n              \\\"operationId\\\": \\\"GET\\\",\\r\\n              \\\"produces\\\": [\\r\\n                \\\"application/json\\\"\\r\\n              ],\\r\\n              \\\"parameters\\\": [],\\r\\n              \\\"responses\\\": {},\\r\\n              \\\"enabled\\\": true\\r\\n            },\\r\\n            \\\"enabled\\\": true\\r\\n          }\\r\\n        },\\r\\n        \\\"definitions\\\": {}\\r\\n      },\\r\\n      \\\"nativeEndpoint\\\": [\\r\\n        {\\r\\n          \\\"passSecurityHeaders\\\": true,\\r\\n          \\\"uri\\\": \\\"https://api.chucknorris.io/jokes\\\",\\r\\n          \\\"connectionTimeoutDuration\\\": 0,\\r\\n          \\\"alias\\\": false\\r\\n        }\\r\\n      ],\\r\\n      \\\"apiName\\\": \\\"ChuckNorrisAPI\\\",\\r\\n      \\\"apiVersion\\\": \\\"1.0\\\",\\r\\n      \\\"apiDescription\\\": \\\"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\\\",\\r\\n      \\\"maturityState\\\": \\\"Beta\\\",\\r\\n      \\\"isActive\\\": false,\\r\\n      \\\"type\\\": \\\"REST\\\",\\r\\n      \\\"owner\\\": \\\"Administrator\\\",\\r\\n      \\\"policies\\\": [\\r\\n        \\\"879068cd-8628-4f2a-b903-4e6613ca12ba\\\"\\r\\n      ],\\r\\n      \\\"referencedFiles\\\": {\\r\\n        \\\"ChuckNorrisAPI.json\\\": \\\"{\\\\r\\\\n  \\\\\\\"swagger\\\\\\\": \\\\\\\"2.0\\\\\\\",\\\\r\\\\n  \\\\\\\"info\\\\\\\": {\\\\r\\\\n    \\\\\\\"description\\\\\\\": \\\\\\\"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\\\\\\\",\\\\r\\\\n    \\\\\\\"title\\\\\\\": \\\\\\\"ChuckNorrisAPI\\\\\\\",\\\\r\\\\n    \\\\\\\"version\\\\\\\": \\\\\\\"1.0\\\\\\\"\\\\r\\\\n  },\\\\r\\\\n  \\\\\\\"host\\\\\\\": \\\\\\\"api.chucknorris.io\\\\\\\",\\\\r\\\\n  \\\\\\\"basePath\\\\\\\": \\\\\\\"/jokes\\\\\\\",\\\\r\\\\n  \\\\\\\"schemes\\\\\\\": [\\\\r\\\\n    \\\\\\\"https\\\\\\\"\\\\r\\\\n  ],\\\\r\\\\n  \\\\\\\"paths\\\\\\\": {\\\\r\\\\n    \\\\\\\"/random\\\\\\\": {\\\\r\\\\n      \\\\\\\"get\\\\\\\": {\\\\r\\\\n        \\\\\\\"summary\\\\\\\": \\\\\\\"GET\\\\\\\",\\\\r\\\\n        \\\\\\\"deprecated\\\\\\\": false,\\\\r\\\\n        \\\\\\\"produces\\\\\\\": [\\\\r\\\\n          \\\\\\\"application/json\\\\\\\"\\\\r\\\\n        ],\\\\r\\\\n        \\\\\\\"description\\\\\\\": \\\\\\\"\\\\\\\",\\\\r\\\\n        \\\\\\\"operationId\\\\\\\": \\\\\\\"GET\\\\\\\"\\\\r\\\\n      }\\\\r\\\\n    }\\\\r\\\\n  }\\\\r\\\\n}\\\\r\\\\n\\\"\\r\\n      },\\r\\n      \\\"scopes\\\": [],\\r\\n      \\\"publishedPortals\\\": [],\\r\\n      \\\"creationDate\\\": \\\"2017-03-13 09:38:30 GMT\\\",\\r\\n      \\\"systemVersion\\\": 1,\\r\\n      \\\"id\\\": \\\"25fb937a-8360-41ab-8be5-987b14fe631d\\\",\\r\\n      \\\"oauth2ScopeName\\\": \\\"25fb937a-8360-41ab-8be5-987b14fe631d\\\"\\r\\n    },\\r\\n    \\\"responseStatus\\\": \\\"SUCCESS\\\"\\r\\n  }\\r\\n}\""
                contentMediaType: application/json
              example: "\"{\\r\\n  \\\"apiResponse\\\": {\\r\\n    \\\"api\\\": {\\r\\n      \\\"apiDefinition\\\": {\\r\\n        \\\"type\\\": \\\"rest\\\",\\r\\n        \\\"info\\\": {\\r\\n          \\\"vendorExtensions\\\": {},\\r\\n          \\\"description\\\": \\\"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\\\",\\r\\n          \\\"version\\\": \\\"1.0\\\",\\r\\n          \\\"title\\\": \\\"ChuckNorrisAPI\\\"\\r\\n        },\\r\\n        \\\"host\\\": \\\"api.chucknorris.io\\\",\\r\\n        \\\"basePath\\\": \\\"/jokes\\\",\\r\\n        \\\"schemes\\\": [\\r\\n          \\\"https\\\"\\r\\n        ],\\r\\n        \\\"paths\\\": {\\r\\n          \\\"/random\\\": {\\r\\n            \\\"get\\\": {\\r\\n              \\\"summary\\\": \\\"GET\\\",\\r\\n              \\\"description\\\": \\\"\\\",\\r\\n              \\\"operationId\\\": \\\"GET\\\",\\r\\n              \\\"produces\\\": [\\r\\n                \\\"application/json\\\"\\r\\n              ],\\r\\n              \\\"parameters\\\": [],\\r\\n              \\\"responses\\\": {},\\r\\n              \\\"enabled\\\": true\\r\\n            },\\r\\n            \\\"enabled\\\": true\\r\\n          }\\r\\n        },\\r\\n        \\\"definitions\\\": {}\\r\\n      },\\r\\n      \\\"nativeEndpoint\\\": [\\r\\n        {\\r\\n          \\\"passSecurityHeaders\\\": true,\\r\\n          \\\"uri\\\": \\\"https://api.chucknorris.io/jokes\\\",\\r\\n          \\\"connectionTimeoutDuration\\\": 0,\\r\\n          \\\"alias\\\": false\\r\\n        }\\r\\n      ],\\r\\n      \\\"apiName\\\": \\\"ChuckNorrisAPI\\\",\\r\\n      \\\"apiVersion\\\": \\\"1.0\\\",\\r\\n      \\\"apiDescription\\\": \\\"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\\\",\\r\\n      \\\"maturityState\\\": \\\"Beta\\\",\\r\\n      \\\"isActive\\\": false,\\r\\n      \\\"type\\\": \\\"REST\\\",\\r\\n      \\\"owner\\\": \\\"Administrator\\\",\\r\\n      \\\"policies\\\": [\\r\\n        \\\"879068cd-8628-4f2a-b903-4e6613ca12ba\\\"\\r\\n      ],\\r\\n      \\\"referencedFiles\\\": {\\r\\n        \\\"ChuckNorrisAPI.json\\\": \\\"{\\\\r\\\\n  \\\\\\\"swagger\\\\\\\": \\\\\\\"2.0\\\\\\\",\\\\r\\\\n  \\\\\\\"info\\\\\\\": {\\\\r\\\\n    \\\\\\\"description\\\\\\\": \\\\\\\"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\\\\\\\",\\\\r\\\\n    \\\\\\\"title\\\\\\\": \\\\\\\"ChuckNorrisAPI\\\\\\\",\\\\r\\\\n    \\\\\\\"version\\\\\\\": \\\\\\\"1.0\\\\\\\"\\\\r\\\\n  },\\\\r\\\\n  \\\\\\\"host\\\\\\\": \\\\\\\"api.chucknorris.io\\\\\\\",\\\\r\\\\n  \\\\\\\"basePath\\\\\\\": \\\\\\\"/jokes\\\\\\\",\\\\r\\\\n  \\\\\\\"schemes\\\\\\\": [\\\\r\\\\n    \\\\\\\"https\\\\\\\"\\\\r\\\\n  ],\\\\r\\\\n  \\\\\\\"paths\\\\\\\": {\\\\r\\\\n    \\\\\\\"/random\\\\\\\": {\\\\r\\\\n      \\\\\\\"get\\\\\\\": {\\\\r\\\\n        \\\\\\\"summary\\\\\\\": \\\\\\\"GET\\\\\\\",\\\\r\\\\n        \\\\\\\"deprecated\\\\\\\": false,\\\\r\\\\n        \\\\\\\"produces\\\\\\\": [\\\\r\\\\n          \\\\\\\"application/json\\\\\\\"\\\\r\\\\n        ],\\\\r\\\\n        \\\\\\\"description\\\\\\\": \\\\\\\"\\\\\\\",\\\\r\\\\n        \\\\\\\"operationId\\\\\\\": \\\\\\\"GET\\\\\\\"\\\\r\\\\n      }\\\\r\\\\n    }\\\\r\\\\n  }\\\\r\\\\n}\\\\r\\\\n\\\"\\r\\n      },\\r\\n      \\\"scopes\\\": [],\\r\\n      \\\"publishedPortals\\\": [],\\r\\n      \\\"creationDate\\\": \\\"2017-03-13 09:38:30 GMT\\\",\\r\\n      \\\"systemVersion\\\": 1,\\r\\n      \\\"id\\\": \\\"25fb937a-8360-41ab-8be5-987b14fe631d\\\",\\r\\n      \\\"oauth2ScopeName\\\": \\\"25fb937a-8360-41ab-8be5-987b14fe631d\\\"\\r\\n    },\\r\\n    \\\"responseStatus\\\": \\\"SUCCESS\\\"\\r\\n  }\\r\\n}\""
      deprecated: false
    parameters: []
  /apis/{apiId}/implementation:
    put:
      tags:
      - APIs
      summary: Notify API Implementation
      description: An API Provider tool can use this operation to update the API in APIGateway after completion of its implementation in their end
      operationId: NotifyAPIImplementation
      parameters:
      - name: nativeBaseURL
        in: query
        description: Base URL of the native API
        required: true
        style: form
        explode: true
        schema:
          type: string
          examples:
          - http://petstore.swagger.io/v2
      - name: overwriteAlias
        in: query
        description: Flag to replace the endpoint alias that is used in the routing policy of the API with the given value of 'nativeBaseURL' parameter.
        required: true
        style: form
        explode: true
        schema:
          type: boolean
          examples:
          - false
      - name: maturityState
        in: query
        description: Value of the 'maturity state' attribute of the API. The 'maturity state' of the API can be set to its one of possible value (from its defines values in extended settings configuration) to depict the completion its implementation
        required: true
        style: form
        explode: true
        schema:
          type: string
          examples:
          - Beta
      - name: apiId
        in: path
        description: (Required) API Id for the API to be updated
        required: true
        style: simple
        schema:
          type: string
          examples:
          - 2c843837-cc6c-4ba1-aaf3-b10f8e9adbe0
      - name: Accept
        in: header
        description: ''
        required: true
        style: simple
        schema:
          type: string
          examples:
          - application/json
      responses:
        '404':
          description: Not Found
          headers: {}
          content: {}
        '400':
          description: Bad Request
          headers: {}
          content: {}
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ReturnstheupdatedAPIobject'
                - examples:
                  - apiId: <string>
                    api:
                      apiDefinition:
                        type: <string>
                        description: <string>
                        title: <string>
                        version: <string>
                        uri:
                        - <string>
                        serviceRegistryDisplayName: <string>
                      nativeEndpoint:
                      - optimizationTechnique: <string>
                        passSecurityHeaders: <boolean>
                        uri: <string>
                        connectionTimeoutDuration: <integer>
                        alias: <boolean>
                      apiName: <string>
                      apiVersion: <string>
                      apiEndpointPrefix: <string>
                      apiDescription: <string>
                      maturityState: <string>
                      apiGroups:
                      - <string>
                      - <string>
                      isActive: <boolean>
                      type: <string>
                      owner: <string>
                      policies:
                      - <string>
                      - <string>
                      rootFileName: <string>
                      scopes:
                      - name: <string>
                        description: <string>
                        getoAuth2ScopeName: <string>
                        policies:
                        - <string>
                        - <string>
                        mashedUpAPI: <boolean>
                      - name: <string>
                        description: <string>
                        getoAuth2ScopeName: <string>
                        policies:
                        - <string>
                        - <string>
                        mashedUpAPI: <boolean>
                      publishedPortals:
                      - <string>
                      - <string>
                      publishedToRegistry: <boolean>
                      creationDate: <string>
                      lastModified: <string>
                      prevVersion: <string>
                      nextVersion: <string>
                      systemVersion: <integer>
                      provider: <string>
                      centraSiteURL: <string>
                      mockService:
                        enableMock: <boolean>
                        runAsUser: <string>
                        service: <string>
                      apiDocuments:
                      - <string>
                      - <string>
                      id: <string>
                      oauth2ScopeName: <string>
                    responseStatus: <string>
                    errorReason: <string>
                    gatewayEndPoints:
                    - <string>
                    - <string>
                    microgatewayEndPoints:
                    - <string>
                    - <string>
                    reason: <object>
                    pubSOAPFlavor: <string>
                    restrictViewAsset: <boolean>
                    rootFileLocation: <string>
                    teams:
                    - id: <string>
                      name: <string>
                      source: <string>
                    - id: <string>
                      name: <string>
                      source: <string>
                    portalGatewayDataEntries: <object>
                contentMediaType: application/json
              example:
                apiId: <string>
                api:
                  apiDefinition:
                    type: <string>
                    description: <string>
                    title: <string>
                    version: <string>
                    uri:
                    - <string>
                    serviceRegistryDisplayName: <string>
                  nativeEndpoint:
                  - optimizationTechnique: <string>
                    passSecurityHeaders: <boolean>
                    uri: <string>
                    connectionTimeoutDuration: <integer>
                    alias: <boolean>
                  apiName: <string>
                  apiVersion: <string>
                  apiEndpointPrefix: <string>
                  apiDescription: <string>
                  maturityState: <string>
                  apiGroups:
                  - <string>
                  - <string>
                  isActive: <boolean>
                  type: <string>
                  owner: <string>
                  policies:
                  - <string>
                  - <string>
                  rootFileName: <string>
                  scopes:
                  - name: <string>
                    description: <string>
                    getoAuth2ScopeName: <string>
                    policies:
                    - <string>
                    - <string>
                    mashedUpAPI: <boolean>
                  - name: <string>
                    description: <string>
                    getoAuth2ScopeName: <string>
                    policies:
                    - <string>
                    - <string>
                    mashedUpAPI: <boolean>
                  publishedPortals:
                  - <string>
                  - <string>
                  publishedToRegistry: <boolean>
                  creationDate: <string>
                  lastModified: <string>
                  prevVersion: <string>
                  nextVersion: <string>
                  systemVersion: <integer>
                  provider: <string>
                  centraSiteURL: <string>
                  mockService:
                    enableMock: <boolean>
                    runAsUser: <string>
                    service: <string>
                  apiDocuments:
                  - <string>
                  - <string>
                  id: <string>
                  oauth2ScopeName: <string>
                responseStatus: <string>
                errorReason: <string>
                gatewayEndPoints:
                - <string>
                - <string>
                microgatewayEndPoints:
                - <string>
                - <string>
                reason: <object>
                pubSOAPFlavor: <string>
                restrictViewAsset: <boolean>
                rootFileLocation: <string>
                teams:
                - id: <string>
                  name: <string>
                  source: <string>
                - id: <string>
                  name: <string>
                  source: <string>
                portalGatewayDataEntries: <object>
        '401':
          description: Unauthorized
          headers: {}
          content: {}
      deprecated: false
    parameters: []
  /apis/{apiId}/applications:
    get:
      tags:
      - APIs
      summary: Get Applications associated with API
      description: Retrieves the list of registered applications of an API
      operationId: GetApplicationsassociatedwithAPI
      parameters:
      - name: apiId
        in: path
        description: (Required) API Id for the API to find the associated applications
        required: true
        style: simple
        schema:
          type: string
          examples:
          - 2c843837-cc6c-4ba1-aaf3-b10f8e9adbe0
      - name: Accept
        in: header
        description: ''
        required: true
        style: simple
        schema:
          type: string
          examples:
          - application/json
      responses:
        '401':
          description: Unauthorized
          headers: {}
          content: {}
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: string
                examples:
                - '"{\r\n  \"applications\": [\r\n    {\r\n      \"name\": \"app1\",\r\n      \"description\": null,\r\n      \"contactEmails\": [],\r\n      \"identifiers\": [],\r\n      \"siteURLs\": [],\r\n      \"version\": \"1.0\",\r\n      \"id\": \"ae48cd69-421e-4bdf-a4d0-e86996a78f68\",\r\n      \"created\": \"2017-03-13 13:12:03 GMT\",\r\n      \"lastupdated\": null,\r\n      \"consumingAPIs\": [\r\n        \"25fb937a-8360-41ab-8be5-987b14fe631d\"\r\n      ],\r\n      \"accessTokens\": {\r\n        \"apiAccessKey_credentials\": {\r\n          \"apiAccessKey\": \"cec4b46b-3569-4f73-a561-172dd67c182a\",\r\n          \"expirationInterval\": null\r\n        },\r\n        \"oauth_credentials\": {\r\n          \"clientID\": \"40b78ed3-d171-4bd3-99db-51dd2fa71753\",\r\n          \"clientSecret\": \"024b9525-6526-45c8-a66c-d192442064e1\",\r\n          \"clientName\": \"app1-6b753c2a-0567-462d-a4ea-1b143ab7a381\",\r\n          \"scopes\": [\r\n            \"25fb937a-8360-41ab-8be5-987b14fe631d\"\r\n          ],\r\n          \"token_lifetime\": \"3600\",\r\n          \"token_refresh_limit\": \"0\",\r\n          \"redirect_uris\": [\r\n            \"https://placeholder_redirect_uri\"\r\n          ],\r\n          \"Type\": \"confidential\"\r\n        }\r\n      }\r\n    }\r\n  ]\r\n}"'
                contentMediaType: application/json
              example: '"{\r\n  \"applications\": [\r\n    {\r\n      \"name\": \"app1\",\r\n      \"description\": null,\r\n      \"contactEmails\": [],\r\n      \"identifiers\": [],\r\n      \"siteURLs\": [],\r\n      \"version\": \"1.0\",\r\n      \"id\": \"ae48cd69-421e-4bdf-a4d0-e86996a78f68\",\r\n      \"created\": \"2017-03-13 13:12:03 GMT\",\r\n      \"lastupdated\": null,\r\n      \"consumingAPIs\": [\r\n        \"25fb937a-8360-41ab-8be5-987b14fe631d\"\r\n      ],\r\n      \"accessTokens\": {\r\n        \"apiAccessKey_credentials\": {\r\n          \"apiAccessKey\": \"cec4b46b-3569-4f73-a561-172dd67c182a\",\r\n          \"expirationInterval\": null\r\n        },\r\n        \"oauth_credentials\": {\r\n          \"clientID\": \"40b78ed3-d171-4bd3-99db-51dd2fa71753\",\r\n          \"clientSecret\": \"024b9525-6526-45c8-a66c-d192442064e1\",\r\n          \"clientName\": \"app1-6b753c2a-0567-462d-a4ea-1b143ab7a381\",\r\n          \"scopes\": [\r\n            \"25fb937a-8360-41ab-8be5-987b14fe631d\"\r\n          ],\r\n          \"token_lifetime\": \"3600\",\r\n          \"token_refresh_limit\": \"0\",\r\n          \"redirect_uris\": [\r\n            \"https://placeholder_redirect_uri\"\r\n          ],\r\n          \"Type\": \"confidential\"\r\n        }\r\n      }\r\n    }\r\n  ]\r\n}"'
        '404':
          description: Not Found
          headers: {}
          content: {}
      deprecated: false
    parameters: []
  /apis/{apiId}/source:
    get:
      tags:
      - APIs
      summary: Get Source
      description: Download the API definition that was used to create the API. This is applicable only for SOAP APIs.
      operationId: GetSource
      parameters:
      - name: apiId
        in: path
        description: (Required) API Id for the API to download the source content
        required: true
        style: simple
        schema:
          type: string
          examples:
          - 2c843837-cc6c-4ba1-aaf3-b10f8e9adbe0
      - name: Accept
        in: header
        description: ''
        required: true
        style: simple
        schema:
          type: string
          examples:
          - application/json
      responses:
        '401':
          description: Unauthorized
          headers: {}
          content: {}
        '400':
          description: Bad Request
          headers: {}
          content: {}
        '404':
          description: Not Found
          headers: {}
          content: {}
        '200':
          description: OK
          headers: {}
          content:
            multipart/mixed:
              schema:
                type: string
                examples:
                - "Message-ID: <296841806.5.1489555643275.JavaMail.MRIZ@MCMRIZ01>\r\nMIME-Version: 1.0\r\nContent-Type: multipart/mixed; \r\n	boundary=\"----=_Part_4_1098332532.1489555643274\"\r\n\r\n------=_Part_4_1098332532.1489555643274\r\ncontent-type: application/zip\r\nContent-Disposition: attachment; filename=\"echoService.zip\"\r\n\r\nfile content in zip format\r\n------=_Part_4_1098332532.1489555643274\r\ncontent-type: text/plain\r\nContent-Disposition: inline; name=\"rootFileName\"\r\n\r\necho.wsdl\r\n------=_Part_4_1098332532.1489555643274--"
                contentMediaType: multipart/mixed
              example: "Message-ID: <296841806.5.1489555643275.JavaMail.MRIZ@MCMRIZ01>\r\nMIME-Version: 1.0\r\nContent-Type: multipart/mixed; \r\n	boundary=\"----=_Part_4_1098332532.1489555643274\"\r\n\r\n------=_Part_4_1098332532.1489555643274\r\ncontent-type: application/zip\r\nContent-Disposition: attachment; filename=\"echoService.zip\"\r\n\r\nfile content in zip format\r\n------=_Part_4_1098332532.1489555643274\r\ncontent-type: text/plain\r\nContent-Disposition: inline; name=\"rootFileName\"\r\n\r\necho.wsdl\r\n------=_Part_4_1098332532.1489555643274--"
      deprecated: false
    parameters: []
  /apis/{apiId}/globalPolicies:
    get:
      tags:
      - APIs
      summary: Get Associated Global Policies
      description: Retrieves the list of active global policies applicable to this API
      operationId: GetAssociatedGlobalPolicies
      parameters:
      - name: apiId
        in: path
        description: (Required) API Id for the API to find the list of applicable global policies
        required: true
        style: simple
        schema:
          type: string
          examples:
          - 2c843837-cc6c-4ba1-aaf3-b10f8e9adbe0
      - name: Accept
        in: header
        description: ''
        required: true
        style: simple
        schema:
          type: string
          examples:
          - application/json
      responses:
        '404':
          description: Not Found
          headers: {}
          content: {}
        '401':
          description: Unauthorized
          headers: {}
          content: {}
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: string
                examples:
                - '"{\r\n  \"globalPolicies\": [\r\n    \"GlobalLogInvocationPolicy\"\r\n  ]\r\n}"'
                contentMediaType: application/json
              example: '"{\r\n  \"globalPolicies\": [\r\n    \"GlobalLogInvocationPolicy\"\r\n  ]\r\n}"'
      deprecated: false
    parameters: []
  /apis/{apiId}/providerspecification:
    get:
      tags:
      - APIs
      summary: Download Provider Specification
      description: Downloads the provider specification of REST and SOAP based APIs. Provider specification is nothing but, the specification file (in swagger or wsdl format) with out the concrete API Gateway endpoint and contains all resources/methods/operation irrespective of whether they are exposed to consumer
      operationId: DownloadProviderSpecification
      parameters:
      - name: format
        in: query
        description: ''
        required: true
        style: form
        explode: true
        schema:
          type: string
          examples:
          - swagger
      - name: apiId
        in: path
        description: (Required) API Id for the API to retrieve the versions
        required: true
        style: simple
        schema:
          type: string
          examples:
          - 2c843837-cc6c-4ba1-aaf3-b10f8e9adbe0
      - name: Accept
        in: header
        description: ''
        required: true
        style: simple
        schema:
          type: string
          examples:
          - application/json
      responses:
        '401':
          description: Unauthorized
          headers: {}
          content: {}
        '404':
          description: Not Found
          headers: {}
          content: {}
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Iftheformatisswaggerreturnstheswaggercontentinjson.Iftheformatiswsdlreturnsthewsdlcontentinxml.'
                - examples:
                  - versions:
                    - versionNumber: <string>
                      apiId: <string>
                    - versionNumber: <string>
                      apiId: <string>
                    gatewayEndPoints:
                    - <string>
                    - <string>
                    api:
                      apiDefinition:
                        type: <string>
                        description: <string>
                        title: <string>
                        version: <string>
                        uri:
                        - <string>
                        serviceRegistryDisplayName: <string>
                      nativeEndpoint:
                      - optimizationTechnique: <string>
                        passSecurityHeaders: <boolean>
                        uri: <string>
                        connectionTimeoutDuration: <integer>
                        alias: <boolean>
                      apiName: <string>
                      apiVersion: <string>
                      apiEndpointPrefix: <string>
                      apiDescription: <string>
                      maturityState: <string>
                      apiGroups:
                      - <string>
                      - <string>
                      isActive: <boolean>
                      type: <string>
                      owner: <string>
                      policies:
                      - <string>
                      - <string>
                      rootFileName: <string>
                      scopes:
                      - name: <string>
                        description: <string>
                        getoAuth2ScopeName: <string>
                        policies:
                        - <string>
                        - <string>
                        mashedUpAPI: <boolean>
                      - name: <string>
                        description: <string>
                        getoAuth2ScopeName: <string>
                        policies:
                        - <string>
                        - <string>
                        mashedUpAPI: <boolean>
                      publishedPortals:
                      - <string>
                      - <string>
                      publishedToRegistry: <boolean>
                      creationDate: <string>
                      lastModified: <string>
                      prevVersion: <string>
                      nextVersion: <string>
                      systemVersion: <integer>
                      provider: <string>
                      centraSiteURL: <string>
                      mockService:
                        enableMock: <boolean>
                        runAsUser: <string>
                        service: <string>
                      apiDocuments:
                      - <string>
                      - <string>
                      id: <string>
                      oauth2ScopeName: <string>
                    apiId: <string>
                    errorReason: <string>
                    responseStatus: <string>
                contentMediaType: application/json
              example:
                versions:
                - versionNumber: <string>
                  apiId: <string>
                - versionNumber: <string>
                  apiId: <string>
                gatewayEndPoints:
                - <string>
                - <string>
                api:
                  apiDefinition:
                    type: <string>
                    description: <string>
                    title: <string>
                    version: <string>
                    uri:
                    - <string>
                    serviceRegistryDisplayName: <string>
                  nativeEndpoint:
                  - optimizationTechnique: <string>
                    passSecurityHeaders: <boolean>
                    uri: <string>
                    connectionTimeoutDuration: <integer>
                    alias: <boolean>
                  apiName: <string>
                  apiVersion: <string>
                  apiEndpointPrefix: <string>
                  apiDescription: <string>
                  maturityState: <string>
                  apiGroups:
                  - <string>
                  - <string>
                  isActive: <boolean>
                  type: <string>
                  owner: <string>
                  policies:
                  - <string>
                  - <string>
                  rootFileName: <string>
                  scopes:
                  - name: <string>
                    description: <string>
                    getoAuth2ScopeName: <string>
                    policies:
                    - <string>
                    - <string>
                    mashedUpAPI: <boolean>
                  - name: <string>
                    description: <string>
                    getoAuth2ScopeName: <string>
                    policies:
                    - <string>
                    - <string>
                    mashedUpAPI: <boolean>
                  publishedPortals:
                  - <string>
                  - <string>
                  publishedToRegistry: <boolean>
                  creationDate: <string>
                  lastModified: <string>
                  prevVersion: <string>
                  nextVersion: <string>
                  systemVersion: <integer>
                  provider: <string>
                  centraSiteURL: <string>
                  mockService:
                    enableMock: <boolean>
                    runAsUser: <string>
                    service: <string>
                  apiDocuments:
                  - <string>
                  - <string>
                  id: <string>
                  oauth2ScopeName: <string>
                apiId: <string>
                errorReason: <string>
                responseStatus: <string>
      deprecated: false
    parameters: []
  /apis:
    get:
      tags:
      - APIs
      summary: Get All APIs
      description: Get all APIs or subset of APIs
      operationId: GetAllAPIs
      parameters:
      - name: Accept
        in: header
        description: ''
        required: true
        style: simple
        schema:
          type: string
          examples:
          - application/json
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: string
                examples:
                - "\"{\\r\\n  \\\"apiResponse\\\": [\\r\\n    {\\r\\n      \\\"api\\\": {\\r\\n        \\\"apiName\\\": \\\"ChuckNorrisAPI\\\",\\r\\n        \\\"apiVersion\\\": \\\"v2\\\",\\r\\n        \\\"apiDescription\\\": \\\"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\\\",\\r\\n        \\\"isActive\\\": false,\\r\\n        \\\"type\\\": \\\"REST\\\",\\r\\n        \\\"publishedPortals\\\": [],\\r\\n        \\\"systemVersion\\\": 2,\\r\\n        \\\"id\\\": \\\"46df4227-a100-486c-9580-0bf388ec6ec7\\\"\\r\\n      },\\r\\n      \\\"responseStatus\\\": \\\"SUCCESS\\\"\\r\\n    },\\r\\n    {\\r\\n      \\\"api\\\": {\\r\\n        \\\"apiName\\\": \\\"ChuckNorrisAPI\\\",\\r\\n        \\\"apiVersion\\\": \\\"1.0\\\",\\r\\n        \\\"apiDescription\\\": \\\"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\\\",\\r\\n        \\\"isActive\\\": false,\\r\\n        \\\"type\\\": \\\"REST\\\",\\r\\n        \\\"publishedPortals\\\": [],\\r\\n        \\\"systemVersion\\\": 1,\\r\\n        \\\"id\\\": \\\"25fb937a-8360-41ab-8be5-987b14fe631d\\\"\\r\\n      },\\r\\n      \\\"responseStatus\\\": \\\"SUCCESS\\\",\\r\\n  \\\"teams\\\": [\\r\\n                {\\r\\n                    \\\"id\\\": \\\"Administrators\\\",\\r\\n                    \\\"name\\\": \\\"Administrators\\\",\\r\\n                    \\\"canDelete\\\": \\\"false\\\"\\r\\n                },\\r\\n                {\\r\\n                    \\\"id\\\": \\\"Default\\\",\\r\\n                    \\\"name\\\": \\\"Default\\\",\\r\\n                    \\\"canDelete\\\": \\\"true\\\"\\r\\n                }\\r\\n            ]\\r\\n      }\\r\\n  ]\\r\\n}\""
                contentMediaType: application/json
              example: "\"{\\r\\n  \\\"apiResponse\\\": [\\r\\n    {\\r\\n      \\\"api\\\": {\\r\\n        \\\"apiName\\\": \\\"ChuckNorrisAPI\\\",\\r\\n        \\\"apiVersion\\\": \\\"v2\\\",\\r\\n        \\\"apiDescription\\\": \\\"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\\\",\\r\\n        \\\"isActive\\\": false,\\r\\n        \\\"type\\\": \\\"REST\\\",\\r\\n        \\\"publishedPortals\\\": [],\\r\\n        \\\"systemVersion\\\": 2,\\r\\n        \\\"id\\\": \\\"46df4227-a100-486c-9580-0bf388ec6ec7\\\"\\r\\n      },\\r\\n      \\\"responseStatus\\\": \\\"SUCCESS\\\"\\r\\n    },\\r\\n    {\\r\\n      \\\"api\\\": {\\r\\n        \\\"apiName\\\": \\\"ChuckNorrisAPI\\\",\\r\\n        \\\"apiVersion\\\": \\\"1.0\\\",\\r\\n        \\\"apiDescription\\\": \\\"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\\\",\\r\\n        \\\"isActive\\\": false,\\r\\n        \\\"type\\\": \\\"REST\\\",\\r\\n        \\\"publishedPortals\\\": [],\\r\\n        \\\"systemVersion\\\": 1,\\r\\n        \\\"id\\\": \\\"25fb937a-8360-41ab-8be5-987b14fe631d\\\"\\r\\n      },\\r\\n      \\\"responseStatus\\\": \\\"SUCCESS\\\",\\r\\n  \\\"teams\\\": [\\r\\n                {\\r\\n                    \\\"id\\\": \\\"Administrators\\\",\\r\\n                    \\\"name\\\": \\\"Administrators\\\",\\r\\n                    \\\"canDelete\\\": \\\"false\\\"\\r\\n                },\\r\\n                {\\r\\n                    \\\"id\\\": \\\"Default\\\",\\r\\n                    \\\"name\\\": \\\"Default\\\",\\r\\n                    \\\"canDelete\\\": \\\"true\\\"\\r\\n                }\\r\\n            ]\\r\\n      }\\r\\n  ]\\r\\n}\""
        '401':
          description: Unauthorized
          headers: {}
          content: {}
      deprecated: false
    post:
      tags:
      - APIs
      summary: Create API
      description: This REST operation is used to create an API by importing a file, url or from scratch
      operationId: CreateAPI
      parameters:
      - name: Content-Type
        in: header
        description: ''
        required: true
        style: simple
        schema:
          const: multipart/form-data
          type: string
          examples:
          - multipart/form-data
      - name: Accept
        in: header
        description: ''
        required: true
        style: simple
        schema:
          type: string
          examples:
          - application/json
      requestBody:
        content:
          application/x-www-form-urlencoded:
            encoding: {}
            schema:
              required:
              - file
              - apiName
              - type
              - apiDescription
              - apiVersion
              type: object
              properties:
                file:
                  type: string
                  description: Input swagger / raml / wsdl file to be imported
                apiName:
                  type: string
                  description: Name of the API
                  examples:
                  - Doggie
                type:
                  type: string
                  description: Input file type (This can only be one of swagger,raml,wsdl,openapi)
                  examples:
                  - swagger
                apiDescription:
                  type: string
                  description: Description of the API
                  examples:
                  - description flows here
                apiVersion:
                  type: number
                  description: Version of the API
                  contentEncoding: double
                  examples:
                  - 1
              contentMediaType: application/x-www-form-urlencoded
        required: false
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: string
                examples:
                - "\"{\\r\\n    \\\"apiResponse\\\": {\\r\\n        \\\"api\\\": {\\r\\n            \\\"apiDefinition\\\": {\\r\\n                \\\"type\\\": \\\"rest\\\",\\r\\n                \\\"info\\\": {\\r\\n                    \\\"description\\\": \\\"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\\\",\\r\\n                    \\\"version\\\": \\\"1.0\\\",\\r\\n                    \\\"title\\\": \\\"ChuckNorrisAPI\\\"\\r\\n                },\\r\\n                \\\"host\\\": \\\"api.chucknorris.io\\\",\\r\\n                \\\"basePath\\\": \\\"/jokes\\\",\\r\\n                \\\"schemes\\\": [\\r\\n                    \\\"https\\\"\\r\\n                ],\\r\\n                \\\"security\\\": [],\\r\\n                \\\"paths\\\": {\\r\\n                    \\\"/random\\\": {\\r\\n                        \\\"get\\\": {\\r\\n                            \\\"summary\\\": \\\"GET\\\",\\r\\n                            \\\"description\\\": \\\"\\\",\\r\\n                            \\\"operationId\\\": \\\"GET\\\",\\r\\n                            \\\"produces\\\": [\\r\\n                                \\\"application/json\\\"\\r\\n                            ],\\r\\n                            \\\"responses\\\": {},\\r\\n                            \\\"enabled\\\": true\\r\\n                        },\\r\\n                        \\\"enabled\\\": true\\r\\n                    }\\r\\n                },\\r\\n                \\\"securityDefinitions\\\": {},\\r\\n                \\\"definitions\\\": {},\\r\\n                \\\"baseUriParameters\\\": [],\\r\\n                \\\"externalDocs\\\": [],\\r\\n                \\\"servers\\\": [\\r\\n                    {\\r\\n                        \\\"url\\\": \\\"https://api.chucknorris.io/jokes\\\"\\r\\n                    }\\r\\n                ],\\r\\n                \\\"components\\\": {\\r\\n                    \\\"schemas\\\": {}\\r\\n                }\\r\\n            },\\r\\n            \\\"nativeEndpoint\\\": [\\r\\n                {\\r\\n                    \\\"passSecurityHeaders\\\": true,\\r\\n                    \\\"uri\\\": \\\"https://api.chucknorris.io/jokes\\\",\\r\\n                    \\\"connectionTimeoutDuration\\\": 0,\\r\\n                    \\\"alias\\\": false\\r\\n                }\\r\\n            ],\\r\\n            \\\"apiName\\\": \\\"ChuckNorris\\\",\\r\\n            \\\"apiVersion\\\": \\\"1.0\\\",\\r\\n            \\\"apiDescription\\\": \\\"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\\\",\\r\\n            \\\"maturityState\\\": \\\"Beta\\\",\\r\\n            \\\"isActive\\\": false,\\r\\n            \\\"type\\\": \\\"REST\\\",\\r\\n            \\\"owner\\\": \\\"Administrator\\\",\\r\\n            \\\"policies\\\": [\\r\\n                \\\"08afbfa9-78e1-4c23-bb19-c0012464047e\\\"\\r\\n            ],\\r\\n            \\\"scopes\\\": [],\\r\\n            \\\"publishedPortals\\\": [],\\r\\n            \\\"creationDate\\\": \\\"2018-09-03 11:56:21 GMT\\\",\\r\\n            \\\"systemVersion\\\": 1,\\r\\n            \\\"id\\\": \\\"badc18e6-446f-4aa3-96cd-33e46bd40fb5\\\"\\r\\n        },\\r\\n        \\\"responseStatus\\\": \\\"SUCCESS\\\",\\r\\n        \\\"versions\\\": [\\r\\n            {\\r\\n                \\\"versionNumber\\\": \\\"1.0\\\",\\r\\n                \\\"apiId\\\": \\\"badc18e6-446f-4aa3-96cd-33e46bd40fb5\\\"\\r\\n            }\\r\\n        ],\\r\\n        \\\"teams\\\": [\\r\\n            {\\r\\n                \\\"id\\\": \\\"Administrators\\\",\\r\\n                \\\"name\\\": \\\"Administrators\\\",\\r\\n                \\\"canDelete\\\": \\\"false\\\"\\r\\n            },\\r\\n            {\\r\\n                \\\"id\\\": \\\"Default\\\",\\r\\n                \\\"name\\\": \\\"Default\\\",\\r\\n                \\\"canDelete\\\": \\\"true\\\"\\r\\n            }\\r\\n        ]   }\\r\\n}\""
                contentMediaType: application/json
              example: "\"{\\r\\n    \\\"apiResponse\\\": {\\r\\n        \\\"api\\\": {\\r\\n            \\\"apiDefinition\\\": {\\r\\n                \\\"type\\\": \\\"rest\\\",\\r\\n                \\\"info\\\": {\\r\\n                    \\\"description\\\": \\\"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\\\",\\r\\n                    \\\"version\\\": \\\"1.0\\\",\\r\\n                    \\\"title\\\": \\\"ChuckNorrisAPI\\\"\\r\\n                },\\r\\n                \\\"host\\\": \\\"api.chucknorris.io\\\",\\r\\n                \\\"basePath\\\": \\\"/jokes\\\",\\r\\n                \\\"schemes\\\": [\\r\\n                    \\\"https\\\"\\r\\n                ],\\r\\n                \\\"security\\\": [],\\r\\n                \\\"paths\\\": {\\r\\n                    \\\"/random\\\": {\\r\\n                        \\\"get\\\": {\\r\\n                            \\\"summary\\\": \\\"GET\\\",\\r\\n                            \\\"description\\\": \\\"\\\",\\r\\n                            \\\"operationId\\\": \\\"GET\\\",\\r\\n                            \\\"produces\\\": [\\r\\n                                \\\"application/json\\\"\\r\\n                            ],\\r\\n                            \\\"responses\\\": {},\\r\\n                            \\\"enabled\\\": true\\r\\n                        },\\r\\n                        \\\"enabled\\\": true\\r\\n                    }\\r\\n                },\\r\\n                \\\"securityDefinitions\\\": {},\\r\\n                \\\"definitions\\\": {},\\r\\n                \\\"baseUriParameters\\\": [],\\r\\n                \\\"externalDocs\\\": [],\\r\\n                \\\"servers\\\": [\\r\\n                    {\\r\\n                        \\\"url\\\": \\\"https://api.chucknorris.io/jokes\\\"\\r\\n                    }\\r\\n                ],\\r\\n                \\\"components\\\": {\\r\\n                    \\\"schemas\\\": {}\\r\\n                }\\r\\n            },\\r\\n            \\\"nativeEndpoint\\\": [\\r\\n                {\\r\\n                    \\\"passSecurityHeaders\\\": true,\\r\\n                    \\\"uri\\\": \\\"https://api.chucknorris.io/jokes\\\",\\r\\n                    \\\"connectionTimeoutDuration\\\": 0,\\r\\n                    \\\"alias\\\": false\\r\\n                }\\r\\n            ],\\r\\n            \\\"apiName\\\": \\\"ChuckNorris\\\",\\r\\n            \\\"apiVersion\\\": \\\"1.0\\\",\\r\\n            \\\"apiDescription\\\": \\\"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\\\",\\r\\n            \\\"maturityState\\\": \\\"Beta\\\",\\r\\n            \\\"isActive\\\": false,\\r\\n            \\\"type\\\": \\\"REST\\\",\\r\\n            \\\"owner\\\": \\\"Administrator\\\",\\r\\n            \\\"policies\\\": [\\r\\n                \\\"08afbfa9-78e1-4c23-bb19-c0012464047e\\\"\\r\\n            ],\\r\\n            \\\"scopes\\\": [],\\r\\n            \\\"publishedPortals\\\": [],\\r\\n            \\\"creationDate\\\": \\\"2018-09-03 11:56:21 GMT\\\",\\r\\n            \\\"systemVersion\\\": 1,\\r\\n            \\\"id\\\": \\\"badc18e6-446f-4aa3-96cd-33e46bd40fb5\\\"\\r\\n        },\\r\\n        \\\"responseStatus\\\": \\\"SUCCESS\\\",\\r\\n        \\\"versions\\\": [\\r\\n            {\\r\\n                \\\"versionNumber\\\": \\\"1.0\\\",\\r\\n                \\\"apiId\\\": \\\"badc18e6-446f-4aa3-96cd-33e46bd40fb5\\\"\\r\\n            }\\r\\n        ],\\r\\n        \\\"teams\\\": [\\r\\n            {\\r\\n                \\\"id\\\": \\\"Administrators\\\",\\r\\n                \\\"name\\\": \\\"Administrators\\\",\\r\\n                \\\"canDelete\\\": \\\"false\\\"\\r\\n            },\\r\\n            {\\r\\n                \\\"id\\\": \\\"Default\\\",\\r\\n                \\\"name\\\": \\\"Default\\\",\\r\\n                \\\"canDelete\\\": \\\"true\\\"\\r\\n            }\\r\\n        ]   }\\r\\n}\""
        '401':
          description: Unauthorized
          headers: {}
          content: {}
        '400':
          description: Bad Request
          headers: {}
          content: {}
      deprecated: false
    put:
      tags:
      - APIs
      summary: Update API
      description: Get the API details by ID using our rest service and update the api with the needed changes.
      operationId: UpdateAPI
      parameters:
      - name: Accept
        in: header
        description: ''
        required: true
        style: simple
        schema:
          type: string
          examples:
          - application/json
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAPIRequest'
        required: true
      responses:
        '401':
          description: Unauthorized
          headers: {}
          content: {}
        '400':
          description: Bad Request
          headers: {}
          content: {}
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: string
                examples:
                - "\"{\\r\\n    \\\"apiResponse\\\": {\\r\\n        \\\"api\\\": {\\r\\n            \\\"apiDefinition\\\": {\\r\\n                \\\"type\\\": \\\"rest\\\",\\r\\n                \\\"info\\\": {\\r\\n                    \\\"description\\\": \\\"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\\\",\\r\\n                    \\\"version\\\": \\\"1.0\\\",\\r\\n                    \\\"title\\\": \\\"ChuckNorrisAPI\\\"\\r\\n                },\\r\\n                \\\"host\\\": \\\"api.chucknorris.io\\\",\\r\\n                \\\"basePath\\\": \\\"/jokes\\\",\\r\\n                \\\"schemes\\\": [\\r\\n                    \\\"https\\\"\\r\\n                ],\\r\\n                \\\"security\\\": [],\\r\\n                \\\"paths\\\": {\\r\\n                    \\\"/random\\\": {\\r\\n                        \\\"get\\\": {\\r\\n                            \\\"summary\\\": \\\"GET\\\",\\r\\n                            \\\"description\\\": \\\"\\\",\\r\\n                            \\\"operationId\\\": \\\"GET\\\",\\r\\n                            \\\"produces\\\": [\\r\\n                                \\\"application/json\\\"\\r\\n                            ],\\r\\n                            \\\"responses\\\": {},\\r\\n                            \\\"enabled\\\": true\\r\\n                        },\\r\\n                        \\\"enabled\\\": true\\r\\n                    }\\r\\n                },\\r\\n                \\\"securityDefinitions\\\": {},\\r\\n                \\\"definitions\\\": {},\\r\\n                \\\"baseUriParameters\\\": [],\\r\\n                \\\"externalDocs\\\": [],\\r\\n                \\\"servers\\\": [\\r\\n                    {\\r\\n                        \\\"url\\\": \\\"https://api.chucknorris.io/jokes\\\"\\r\\n                    }\\r\\n                ],\\r\\n                \\\"components\\\": {\\r\\n                    \\\"schemas\\\": {}\\r\\n                }\\r\\n            },\\r\\n            \\\"nativeEndpoint\\\": [\\r\\n                {\\r\\n                    \\\"passSecurityHeaders\\\": true,\\r\\n                    \\\"uri\\\": \\\"https://api.chucknorris.io/jokes\\\",\\r\\n                    \\\"connectionTimeoutDuration\\\": 0,\\r\\n                    \\\"alias\\\": false\\r\\n                }\\r\\n            ],\\r\\n            \\\"apiName\\\": \\\"ChuckNorris\\\",\\r\\n            \\\"apiVersion\\\": \\\"1.0\\\",\\r\\n            \\\"apiDescription\\\": \\\"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\\\",\\r\\n            \\\"maturityState\\\": \\\"Beta\\\",\\r\\n            \\\"isActive\\\": false,\\r\\n            \\\"type\\\": \\\"REST\\\",\\r\\n            \\\"owner\\\": \\\"Administrator\\\",\\r\\n            \\\"policies\\\": [\\r\\n                \\\"08afbfa9-78e1-4c23-bb19-c0012464047e\\\"\\r\\n            ],\\r\\n            \\\"scopes\\\": [],\\r\\n            \\\"publishedPortals\\\": [],\\r\\n            \\\"creationDate\\\": \\\"2018-09-03 11:56:21 GMT\\\",\\r\\n            \\\"systemVersion\\\": 1,\\r\\n            \\\"id\\\": \\\"badc18e6-446f-4aa3-96cd-33e46bd40fb5\\\"\\r\\n        },\\r\\n        \\\"responseStatus\\\": \\\"SUCCESS\\\",\\r\\n        \\\"versions\\\": [\\r\\n            {\\r\\n                \\\"versionNumber\\\": \\\"1.0\\\",\\r\\n                \\\"apiId\\\": \\\"badc18e6-446f-4aa3-96cd-33e46bd40fb5\\\"\\r\\n            }\\r\\n        ],\\r\\n        \\\"teams\\\": [\\r\\n            {\\r\\n                \\\"id\\\": \\\"Administrators\\\",\\r\\n                \\\"name\\\": \\\"Administrators\\\",\\r\\n                \\\"canDelete\\\": \\\"false\\\"\\r\\n            },\\r\\n            {\\r\\n                \\\"id\\\": \\\"Default\\\",\\r\\n                \\\"name\\\": \\\"Default\\\",\\r\\n                \\\"canDelete\\\": \\\"true\\\"\\r\\n            }\\r\\n        ]   }\\r\\n}\""
                contentMediaType: application/json
              example: "\"{\\r\\n    \\\"apiResponse\\\": {\\r\\n        \\\"api\\\": {\\r\\n            \\\"apiDefinition\\\": {\\r\\n                \\\"type\\\": \\\"rest\\\",\\r\\n                \\\"info\\\": {\\r\\n                    \\\"description\\\": \\\"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\\\",\\r\\n                    \\\"version\\\": \\\"1.0\\\",\\r\\n                    \\\"title\\\": \\\"ChuckNorrisAPI\\\"\\r\\n                },\\r\\n                \\\"host\\\": \\\"api.chucknorris.io\\\",\\r\\n                \\\"basePath\\\": \\\"/jokes\\\",\\r\\n                \\\"schemes\\\": [\\r\\n                    \\\"https\\\"\\r\\n                ],\\r\\n                \\\"security\\\": [],\\r\\n                \\\"paths\\\": {\\r\\n                    \\\"/random\\\": {\\r\\n                        \\\"get\\\": {\\r\\n                            \\\"summary\\\": \\\"GET\\\",\\r\\n                            \\\"description\\\": \\\"\\\",\\r\\n                            \\\"operationId\\\": \\\"GET\\\",\\r\\n                            \\\"produces\\\": [\\r\\n                                \\\"application/json\\\"\\r\\n                            ],\\r\\n                            \\\"responses\\\": {},\\r\\n                            \\\"enabled\\\": true\\r\\n                        },\\r\\n                        \\\"enabled\\\": true\\r\\n                    }\\r\\n                },\\r\\n                \\\"securityDefinitions\\\": {},\\r\\n                \\\"definitions\\\": {},\\r\\n                \\\"baseUriParameters\\\": [],\\r\\n                \\\"externalDocs\\\": [],\\r\\n                \\\"servers\\\": [\\r\\n                    {\\r\\n                        \\\"url\\\": \\\"https://api.chucknorris.io/jokes\\\"\\r\\n                    }\\r\\n                ],\\r\\n                \\\"components\\\": {\\r\\n                    \\\"schemas\\\": {}\\r\\n                }\\r\\n            },\\r\\n            \\\"nativeEndpoint\\\": [\\r\\n                {\\r\\n                    \\\"passSecurityHeaders\\\": true,\\r\\n                    \\\"uri\\\": \\\"https://api.chucknorris.io/jokes\\\",\\r\\n                    \\\"connectionTimeoutDuration\\\": 0,\\r\\n                    \\\"alias\\\": false\\r\\n                }\\r\\n            ],\\r\\n            \\\"apiName\\\": \\\"ChuckNorris\\\",\\r\\n            \\\"apiVersion\\\": \\\"1.0\\\",\\r\\n            \\\"apiDescription\\\": \\\"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\\\",\\r\\n            \\\"maturityState\\\": \\\"Beta\\\",\\r\\n            \\\"isActive\\\": false,\\r\\n            \\\"type\\\": \\\"REST\\\",\\r\\n            \\\"owner\\\": \\\"Administrator\\\",\\r\\n            \\\"policies\\\": [\\r\\n                \\\"08afbfa9-78e1-4c23-bb19-c0012464047e\\\"\\r\\n            ],\\r\\n            \\\"scopes\\\": [],\\r\\n            \\\"publishedPortals\\\": [],\\r\\n            \\\"creationDate\\\": \\\"2018-09-03 11:56:21 GMT\\\",\\r\\n            \\\"systemVersion\\\": 1,\\r\\n            \\\"id\\\": \\\"badc18e6-446f-4aa3-96cd-33e46bd40fb5\\\"\\r\\n        },\\r\\n        \\\"responseStatus\\\": \\\"SUCCESS\\\",\\r\\n        \\\"versions\\\": [\\r\\n            {\\r\\n                \\\"versionNumber\\\": \\\"1.0\\\",\\r\\n                \\\"apiId\\\": \\\"badc18e6-446f-4aa3-96cd-33e46bd40fb5\\\"\\r\\n            }\\r\\n        ],\\r\\n        \\\"teams\\\": [\\r\\n            {\\r\\n                \\\"id\\\": \\\"Administrators\\\",\\r\\n                \\\"name\\\": \\\"Administrators\\\",\\r\\n                \\\"canDelete\\\": \\\"false\\\"\\r\\n            },\\r\\n            {\\r\\n                \\\"id\\\": \\\"Default\\\",\\r\\n                \\\"name\\\": \\\"Default\\\",\\r\\n                \\\"canDelete\\\": \\\"true\\\"\\r\\n            }\\r\\n        ]   }\\r\\n}\""
      deprecated: false
    delete:
      tags:
      - APIs
      summary: Delete APIs
      description: Delete the inactive APIs
      operationId: DeleteAPIs
      parameters:
      - name: apiIds
        in: query
        description: (Required) API Ids for the APIs to be deleted. Multiple API ids combined by comma
        required: true
        style: form
        explode: true
        schema:
          type: string
          examples:
          - 2c843837-cc6c-4ba1-aaf3-b10f8e9adbe0,2c843837-cc6c-4ba1-aaf3-b10f8e9adbe7
      - name: forceDelete
        in: query
        description: Flag for force delete. Required when API is associated with some applications
        required: true
        style: form
        explode: true
        schema:
          type: boolean
          examples:
          - true
      - name: Accept
        in: header
        description: ''
        required: true
        style: simple
        schema:
          type: string
          examples:
          - application/json
      responses:
        '400':
          description: Bad Request
          headers: {}
          content: {}
        '204':
          description: No Content
          headers: {}
          content: {}
        '401':
          description: Unauthorized
          headers: {}
          content: {}
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReturnstheapiIdalongwiththeerrorwhenunsuccessful'
                description: ''
                examples:
                - - id: <string>
                    apiName: <string>
                    apiVersion: <string>
                    type: <string>
                    publishedPortals:
                    - <string>
                    - <string>
                    systemVersion: <integer>
                    teams:
                    - id: <string>
                      name: <string>
                      source: <string>
                    - id: <string>
                      name: <string>
                      source: <string>
                    active: <boolean>
                    apiId: <string>
                    errorReason: <string>
                    responseStatus: <string>
                  - id: <string>
                    apiName: <string>
                    apiVersion: <string>
                    type: <string>
                    publishedPortals:
                    - <string>
                    - <string>
                    systemVersion: <integer>
                    teams:
                    - id: <string>
                      name: <string>
                      source: <string>
                    - id: <string>
                      name: <string>
                      source: <string>
                    active: <boolean>
                    apiId: <string>
                    errorReason: <string>
                    responseStatus: <string>
                contentMediaType: application/json
              example:
              - id: <string>
                apiName: <string>
                apiVersion: <string>
                type: <string>
                publishedPortals:
                - <string>
                - <string>
                systemVersion: <integer>
                teams:
                - id: <string>
                  name: <string>
                  source: <string>
                - id: <string>
                  name: <string>
                  source: <string>
                active: <boolean>
                apiId: <string>
                errorReason: <string>
                responseStatus: <string>
              - id: <string>
                apiName: <string>
                apiVersion: <string>
                type: <string>
                publishedPortals:
                - <string>
                - <string>
                systemVersion: <integer>
                teams:
                - id: <string>
                  name: <string>
                  source: <string>
                - id: <string>
                  name: <string>
                  source: <string>
                active: <boolean>
                apiId: <string>
                errorReason: <string>
                responseStatus: <string>
      deprecated: false
    parameters: []
  /serviceRegistry/unpublish:
    put:
      tags:
      - Service Registry
      summary: Unpublish From Service Registry
      description: >-
        Unpublish one or more APIs from one or more service registries.


        Unpublish one or more APIs using the below payload.



        {
        	"unpublishInfos": [
        		{
        			"serviceRegistryIds": [
        				"EurekaDefault"
        			],
        			"apiId": "2c843837-cc6c-4ba1-aaf3-b10f8e9adbe0"
        		},
        		{
        			"serviceRegistryIds": [
        				"EurekaDefault"
        			],
        			"apiId": "2c843837-cc6c-4ba1-aaf3-b10f8e9adbe0"
        		}
        	]
        }
      operationId: UnpublishFromServiceRegistry
      parameters:
      - name: Accept
        in: header
        description: ''
        required: true
        style: simple
        schema:
          type: string
          examples:
          - application/json
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/UnpublishFromServiceRegistryRequest'
              - examples:
                - unpublishInfo:
                    serviceRegistryIds:
                    - EurekaDefault
                    apiId: 2c843837-cc6c-4ba1-aaf3-b10f8e9adbe0
              contentMediaType: application/json
            example:
              unpublishInfo:
                serviceRegistryIds:
                - EurekaDefault
                apiId: 2c843837-cc6c-4ba1-aaf3-b10f8e9adbe0
        required: true
      responses:
        '401':
          description: Unauthorized
          headers: {}
          content: {}
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: string
                examples:
                - '"{\r\n  \"unpublishResponse\": {\r\n    \"apiId\": \"afe8b72e-e1a5-47c6-9b43-e7f12858c091\",\r\n    \"apiName\": \"CalcService\",\r\n    \"apiVersion\": \"10.3\",\r\n    \"serviceRegistryUnpublishResponses\": [\r\n      {\r\n        \"serviceRegistryId\": \"aec973cd-1e4c-4a93-93a4-950e32d39156\",\r\n        \"serviceRegistryName\": \"MyServiceConsul\",\r\n        \"success\": true,\r\n        \"description\": \" Unpublish successful\"\r\n      }\r\n    ]\r\n  }\r\n}"'
                contentMediaType: application/json
              example: '"{\r\n  \"unpublishResponse\": {\r\n    \"apiId\": \"afe8b72e-e1a5-47c6-9b43-e7f12858c091\",\r\n    \"apiName\": \"CalcService\",\r\n    \"apiVersion\": \"10.3\",\r\n    \"serviceRegistryUnpublishResponses\": [\r\n      {\r\n        \"serviceRegistryId\": \"aec973cd-1e4c-4a93-93a4-950e32d39156\",\r\n        \"serviceRegistryName\": \"MyServiceConsul\",\r\n        \"success\": true,\r\n        \"description\": \" Unpublish successful\"\r\n      }\r\n    ]\r\n  }\r\n}"'
      deprecated: false
    parameters: []
  /serviceRegistry/publish:
    get:
      tags:
      - Service Registry
      summary: Get Service Registry Publish Info
      description: Retrieve the service registry publish information for the API
      operationId: GetServiceRegistryPublishInfo
      parameters:
      - name: apiId
        in: query
        description: (Required) API Id of the API for which ServiceRegistryPublishInfo is to be fetched
        required: true
        style: form
        explode: true
        schema:
          type: string
          examples:
          - 2c843837-cc6c-4ba1-aaf3-b10f8e9adbe0
      - name: Accept
        in: header
        description: ''
        required: true
        style: simple
        schema:
          type: string
          examples:
          - application/json
      responses:
        '401':
          description: Unauthorized
          headers: {}
          content: {}
        '404':
          description: Not Found
          headers: {}
          content: {}
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: string
                examples:
                - '"{\r\n  \"publishInfo\": {\r\n    \"apiId\": \"afe8b72e-e1a5-47c6-9b43-e7f12858c091\",\r\n    \"serviceRegistryPublishInfo\": [\r\n      {\r\n        \"serviceRegistryId\": \"aec973cd-1e4c-4a93-93a4-950e32d39156\",\r\n        \"status\": \"PUBLISHED\",\r\n        \"name\": \"MyServiceConsul\",\r\n        \"gatewayEndpoints\": [\r\n          {\r\n            \"gatewayEndpoint\": \"http://localhost:5555/ws/calc/1\",\r\n            \"status\": \"PUBLISHED\"\r\n          },\r\n          {\r\n            \"gatewayEndpoint\": \"http://localhost:1111/ws/calc/1\",\r\n            \"status\": \"NEW\"\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  }\r\n}"'
                contentMediaType: application/json
              example: '"{\r\n  \"publishInfo\": {\r\n    \"apiId\": \"afe8b72e-e1a5-47c6-9b43-e7f12858c091\",\r\n    \"serviceRegistryPublishInfo\": [\r\n      {\r\n        \"serviceRegistryId\": \"aec973cd-1e4c-4a93-93a4-950e32d39156\",\r\n        \"status\": \"PUBLISHED\",\r\n        \"name\": \"MyServiceConsul\",\r\n        \"gatewayEndpoints\": [\r\n          {\r\n            \"gatewayEndpoint\": \"http://localhost:5555/ws/calc/1\",\r\n            \"status\": \"PUBLISHED\"\r\n          },\r\n          {\r\n            \"gatewayEndpoint\": \"http://localhost:1111/ws/calc/1\",\r\n            \"status\": \"NEW\"\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  }\r\n}"'
      deprecated: false
    put:
      tags:
      - Service Registry
      summary: Publish To Service Registry
      description: >-
        Publish one or more APIs to one or more service registries.


        Publish more than one APIs with the given payload


        {
        	"publishInfos": [
        		{
        			"serviceRegistryPublishInfo": [
        				{
        					"gatewayEndpoints": [],
        					"serviceRegistryId": "EurekaDefault"
        				}
        			],
        			"apiId": "d3371bdb-457a-4248-8034-7887ac8b42de"
        		},
        		{
        			"serviceRegistryPublishInfo": [
        				{
        					"gatewayEndpoints": [],
        					"serviceRegistryId": "EurekaDefault"
        				}
        			],
        			"apiId": "2c843837-cc6c-4ba1-aaf3-b10f8e9adbe0"
        		}
        	]
        }
      operationId: PublishToServiceRegistry
      parameters:
      - name: Accept
        in: header
        description: ''
        required: true
        style: simple
        schema:
          type: string
          examples:
          - application/json
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/PublishToServiceRegistryRequest'
              - examples:
                - publishInfo:
                    serviceRegistryPublishInfo:
                    - gatewayEndpoints:
                      - gatewayEndpoint: http://SAG-1YVHZY2:5555/gateway/Petstore/1.0.5
                      serviceRegistryId: EurekaDefault
                    apiId: 2c843837-cc6c-4ba1-aaf3-b10f8e9adbe0
              contentMediaType: application/json
            example:
              publishInfo:
                serviceRegistryPublishInfo:
                - gatewayEndpoints:
                  - gatewayEndpoint: http://SAG-1YVHZY2:5555/gateway/Petstore/1.0.5
                  serviceRegistryId: EurekaDefault
                apiId: 2c843837-cc6c-4ba1-aaf3-b10f8e9adbe0
        required: true
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: string
                examples:
                - '"{\r\n  \"publishResponse\": {\r\n    \"apiId\": \"afe8b72e-e1a5-47c6-9b43-e7f12858c091\",\r\n    \"apiName\": \"CalcService\",\r\n    \"apiVersion\": \"10.3\",\r\n    \"serviceRegistryPublishResponses\": [\r\n      {\r\n        \"serviceRegistryId\": \"aec973cd-1e4c-4a93-93a4-950e32d39156\",\r\n        \"serviceRegistryName\": \"MyServiceConsul\",\r\n        \"status\": \"PUBLISHED\",\r\n        \"gatewayEndpoints\": [\r\n          {\r\n            \"gatewayEndpoint\": \"http://localhost:5555/ws/calc/1\",\r\n            \"status\": \"PUBLISHED\",\r\n          }\r\n        ],\r\n        \"success\": true,\r\n        \"description\": \"Publish successful\"\r\n      }\r\n    ]\r\n  }\r\n}"'
                contentMediaType: application/json
              example: '"{\r\n  \"publishResponse\": {\r\n    \"apiId\": \"afe8b72e-e1a5-47c6-9b43-e7f12858c091\",\r\n    \"apiName\": \"CalcService\",\r\n    \"apiVersion\": \"10.3\",\r\n    \"serviceRegistryPublishResponses\": [\r\n      {\r\n        \"serviceRegistryId\": \"aec973cd-1e4c-4a93-93a4-950e32d39156\",\r\n        \"serviceRegistryName\": \"MyServiceConsul\",\r\n        \"status\": \"PUBLISHED\",\r\n        \"gatewayEndpoints\": [\r\n          {\r\n            \"gatewayEndpoint\": \"http://localhost:5555/ws/calc/1\",\r\n            \"status\": \"PUBLISHED\",\r\n          }\r\n        ],\r\n        \"success\": true,\r\n        \"description\": \"Publish successful\"\r\n      }\r\n    ]\r\n  }\r\n}"'
        '404':
          description: Not Found
          headers: {}
          content: {}
        '400':
          description: Bad Request
          headers: {}
          content: {}
        '401':
          description: Unauthorized
          headers: {}
          content: {}
      deprecated: false
    parameters: []
  /integrationServer/publish:
    get:
      tags:
      - Integration Server
      summary: Get Integration Server Publish Info
      description: Retrieve the integration server publish information for the API. Only REST and SOAP APIs are supported.
      operationId: GetIntegrationServerPublishInfo
      parameters:
      - name: apiId
        in: query
        description: (Required) API Id of the API for which IntegrationServerPublishInfo is to be fetched
        required: true
        style: form
        explode: true
        schema:
          type: string
          examples:
          - 2c843837-cc6c-4ba1-aaf3-b10f8e9adbe0
      - name: Accept
        in: header
        description: ''
        required: true
        style: simple
        schema:
          type: string
          examples:
          - application/json
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ReturnstheintegrationserverpublishinfofortheAPI'
                - examples:
                  - publishInfo:
                      apiId: <string>
                      serviceRegistryPublishInfo:
                      - serviceRegistryId: <string>
                        status: <string>
                        name: <string>
                        gatewayEndpoints:
                        - gatewayEndpoint: <string>
                          status: <string>
                      - serviceRegistryId: <string>
                        status: <string>
                        name: <string>
                        gatewayEndpoints:
                        - gatewayEndpoint: <string>
                          status: <string>
                      integrationServerPublishInfo:
                      - integrationServerId: <string>
                        packageName: <string>
                        folderName: <string>
                        status: <string>
                        integrationServerName: <string>
                      - integrationServerId: <string>
                        packageName: <string>
                        folderName: <string>
                        status: <string>
                        integrationServerName: <string>
                contentMediaType: application/json
              example:
                publishInfo:
                  apiId: <string>
                  serviceRegistryPublishInfo:
                  - serviceRegistryId: <string>
                    status: <string>
                    name: <string>
                    gatewayEndpoints:
                    - gatewayEndpoint: <string>
                      status: <string>
                  - serviceRegistryId: <string>
                    status: <string>
                    name: <string>
                    gatewayEndpoints:
                    - gatewayEndpoint: <string>
                      status: <string>
                  integrationServerPublishInfo:
                  - integrationServerId: <string>
                    packageName: <string>
                    folderName: <string>
                    status: <string>
                    integrationServerName: <string>
                  - integrationServerId: <string>
                    packageName: <string>
                    folderName: <string>
                    status: <string>
                    integrationServerName: <string>
        '404':
          description: Not Found
          headers: {}
          content: {}
        '401':
          description: Unauthorized
          headers: {}
          content: {}
      deprecated: false
    put:
      tags:
      - Integration Server
      summary: Publish To Integration Server
      description: >-
        Publish one or more APIs to one or more integration servers. Only REST and SOAP APIs are supported.


        Publish multiple apis to Integration Server:

        {
        	"publishInfos": [
        		{
        			"integrationServerPublishInfo": [
        				{
        					"packageAndFolders": [],
        					"integrationServerId": "0ad4ee2e-956b-49e0-b7a4-a6a2ea45b034",
        					"integrationServerName": "gora",
        					"folderName": "test",
        					"packageName": "test",
        					"updateNativeEndpointsOfAPI": true,
        					"importSwaggerBasedOnTags": true,
        					"contentModelComplianceForWSDL": "None",
        					"enableMTOM": false,
        					"enforceWSICompliance": false,
        					"validateSchemaWithXerces": true
        				}
        			],
        			"apiId": "2c843837-cc6c-4ba1-aaf3-b10f8e9adbe0"
        		},
        		{
        			"integrationServerPublishInfo": [
        				{
        					"packageAndFolders": [],
        					"integrationServerId": "0ad4ee2e-956b-49e0-b7a4-a6a2ea45b034",
        					"integrationServerName": "gora",
        					"folderName": "test",
        					"packageName": "test",
        					"updateNativeEndpointsOfAPI": true,
        					"importSwaggerBasedOnTags": true,
        					"contentModelComplianceForWSDL": "None",
        					"enableMTOM": false,
        					"enforceWSICompliance": false,
        					"validateSchemaWithXerces": true
        				}
        			],
        			"apiId": "d3371bdb-457a-4248-8034-7887ac8b42de"
        		}
        	]
        }
      operationId: PublishToIntegrationServer
      parameters:
      - name: Accept
        in: header
        description: ''
        required: true
        style: simple
        schema:
          type: string
          examples:
          - application/json
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/PublishToIntegrationServerRequest'
              - examples:
                - publishInfo:
                    integrationServerPublishInfo:
                    - packageAndFolders: []
                      integrationServerId: 0ad4ee2e-956b-49e0-b7a4-a6a2ea45b034
                      integrationServerName: gora
                      folderName: test
                      packageName: test
                      updateNativeEndpointsOfAPI: true
                      importSwaggerBasedOnTags: true
                      contentModelComplianceForWSDL: None
                      enableMTOM: false
                      enforceWSICompliance: false
                      validateSchemaWithXerces: true
                    apiId: 2c843837-cc6c-4ba1-aaf3-b10f8e9adbe0
              contentMediaType: application/json
            example:
              publishInfo:
                integrationServerPublishInfo:
                - packageAndFolders: []
                  integrationServerId: 0ad4ee2e-956b-49e0-b7a4-a6a2ea45b034
                  integrationServerName: gora
                  folderName: test
                  packageName: test
                  updateNativeEndpointsOfAPI: true
                  importSwaggerBasedOnTags: true
                  contentModelComplianceForWSDL: None
                  enableMTOM: false
                  enforceWSICompliance: false
                  validateSchemaWithXerces: true
                apiId: 2c843837-cc6c-4ba1-aaf3-b10f8e9adbe0
        required: true
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Returnsthestatusofthepublishoperationsgivenintherequest.'
                - examples:
                  - publishResponse:
                      apiId: <string>
                      apiName: <string>
                      apiVersion: <string>
                      serviceRegistryPublishResponses:
                      - serviceRegistryId: <string>
                        serviceRegistryName: <string>
                        status: <string>
                        gatewayEndpoints:
                        - gatewayEndpoint: <string>
                          status: <string>
                        success: <boolean>
                        description: <string>
                        failureReason: <string>
                      - serviceRegistryId: <string>
                        serviceRegistryName: <string>
                        status: <string>
                        gatewayEndpoints:
                        - gatewayEndpoint: <string>
                          status: <string>
                        success: <boolean>
                        description: <string>
                        failureReason: <string>
                      integrationServerPublishResponses:
                      - integrationServerId: <string>
                        integrationServerName: <string>
                        status: <string>
                        success: <boolean>
                        description: <string>
                        failureReason: <string>
                      - integrationServerId: <string>
                        integrationServerName: <string>
                        status: <string>
                        success: <boolean>
                        description: <string>
                        failureReason: <string>
                    publishResponses:
                    - apiId: <string>
                      apiName: <string>
                      apiVersion: <string>
                      serviceRegistryPublishResponses:
                      - serviceRegistryId: <string>
                        serviceRegistryName: <string>
                        status: <string>
                        gatewayEndpoints:
                        - gatewayEndpoint: <string>
                          status: <string>
                        success: <boolean>
                        description: <string>
                        failureReason: <string>
                      - serviceRegistryId: <string>
                        serviceRegistryName: <string>
                        status: <string>
                        gatewayEndpoints:
                        - gatewayEndpoint: <string>
                          status: <string>
                        success: <boolean>
                        description: <string>
                        failureReason: <string>
                      integrationServerPublishResponses:
                      - integrationServerId: <string>
                        integrationServerName: <string>
                        status: <string>
                        success: <boolean>
                        description: <string>
                        failureReason: <string>
                      - integrationServerId: <string>
                        integrationServerName: <string>
                        status: <string>
                        success: <boolean>
                        description: <string>
                        failureReason: <string>
                    - apiId: <string>
                      apiName: <string>
                      apiVersion: <string>
                      serviceRegistryPublishResponses:
                      - serviceRegistryId: <string>
                        serviceRegistryName: <string>
                        status: <string>
                        gatewayEndpoints:
                        - gatewayEndpoint: <string>
                          status: <string>
                        success: <boolean>
                        description: <string>
                        failureReason: <string>
                      - serviceRegistryId: <string>
                        serviceRegistryName: <string>
                        status: <string>
                        gatewayEndpoints:
                        - gatewayEndpoint: <string>
                          status: <string>
                        success: <boolean>
                        description: <string>
                        failureReason: <string>
                      integrationServerPublishResponses:
                      - integrationServerId: <string>
                        integrationServerName: <string>
                        status: <string>
                        success: <boolean>
                        description: <string>
                        failureReason: <string>
                      - integrationServerId: <string>
                        integrationServerName: <string>
                        status: <string>
                        success: <boolean>
                        description: <string>
                        failureReason: <string>
                contentMediaType: application/json
              example:
                publishResponse:
                  apiId: <string>
                  apiName: <string>
                  apiVersion: <string>
                  serviceRegistryPublishResponses:
                  - serviceRegistryId: <string>
                    serviceRegistryName: <string>
                    status: <string>
                    gatewayEndpoints:
                    - gatewayEndpoint: <string>
                      status: <string>
                    success: <boolean>
                    description: <string>
                    failureReason: <string>
                  - serviceRegistryId: <string>
                    serviceRegistryName: <string>
                    status: <string>
                    gatewayEndpoints:
                    - gatewayEndpoint: <string>
                      status: <string>
                    success: <boolean>
                    description: <string>
                    failureReason: <string>
                  integrationServerPublishResponses:
                  - integrationServerId: <string>
                    integrationServerName: <string>
                    status: <string>
                    success: <boolean>
                    description: <string>
                    failureReason: <string>
                  - integrationServerId: <string>
                    integrationServerName: <string>
                    status: <string>
                    success: <boolean>
                    description: <string>
                    failureReason: <string>
                publishResponses:
                - apiId: <string>
                  apiName: <string>
                  apiVersion: <string>
                  serviceRegistryPublishResponses:
                  - serviceRegistryId: <string>
                    serviceRegistryName: <string>
                    status: <string>
                    gatewayEndpoints:
                    - gatewayEndpoint: <string>
                      status: <string>
                    success: <boolean>
                    description: <string>
                    failureReason: <string>
                  - serviceRegistryId: <string>
                    serviceRegistryName: <string>
                    status: <string>
                    gatewayEndpoints:
                    - gatewayEndpoint: <string>
                      status: <string>
                    success: <boolean>
                    description: <string>
                    failureReason: <string>
                  integrationServerPublishResponses:
                  - integrationServerId: <string>
                    integrationServerName: <string>
                    status: <string>
                    success: <boolean>
                    description: <string>
                    failureReason: <string>
                  - integrationServerId: <string>
                    integrationServerName: <string>
                    status: <string>
                    success: <boolean>
                    description: <string>
                    failureReason: <string>
                - apiId: <string>
                  apiName: <string>
                  apiVersion: <string>
                  serviceRegistryPublishResponses:
                  - serviceRegistryId: <string>
                    serviceRegistryName: <string>
                    status: <string>
                    gatewayEndpoints:
                    - gatewayEndpoint: <string>
                      status: <string>
                    success: <boolean>
                    description: <string>
                    failureReason: <string>
                  - serviceRegistryId: <string>
                    serviceRegistryName: <string>
                    status: <string>
                    gatewayEndpoints:
                    - gatewayEndpoint: <string>
                      status: <string>
                    success: <boolean>
                    description: <string>
                    failureReason: <string>
                  integrationServerPublishResponses:
                  - integrationServerId: <string>
                    integrationServerName: <string>
                    status: <string>
                    success: <boolean>
                    description: <string>
                    failureReason: <string>
                  - integrationServerId: <string>
                    integrationServerName: <string>
                    status: <string>
                    success: <boolean>
                    description: <string>
                    failureReason: <string>
        '404':
          description: Not Found
          headers: {}
          content: {}
        '401':
          description: Unauthorized
          headers: {}
          content: {}
        '400':
          description: Bad Request
          headers: {}
          content: {}
      deprecated: false
    parameters: []
components:
  schemas:
    CreateVersionRequest:
      title: CreateVersionRequest
      required:
      - newApiVersion
      - retainApplications
      type: object
      properties:
        newApiVersion:
          type: string
        retainApplications:
          type: string
      examples:
      - newApiVersion: '2.0'
        retainApplications: 'true'
    ReturnstheapiIdalongwiththeerrorwhenunsuccessful:
      title: ReturnstheapiIdalongwiththeerrorwhenunsuccessful
      required:
      - id
      - apiName
      - apiVersion
      - type
      - publishedPortals
      - systemVersion
      - teams
      - active
      - apiId
      - errorReason
      - responseStatus
      type: object
      properties:
        id:
          type: string
        apiName:
          type: string
        apiVersion:
          type: string
        type:
          type: string
        publishedPortals:
          type: array
          items:
            type: string
          description: ''
        systemVersion:
          type: string
        teams:
          type: array
          items:
            $ref: '#/components/schemas/Team'
          description: ''
        active:
          type: string
        apiId:
          type: string
        errorReason:
          type: string
        responseStatus:
          type: string
      examples:
      - id: <string>
        apiName: <string>
        apiVersion: <string>
        type: <string>
        publishedPortals:
        - <string>
        - <string>
        systemVersion: <integer>
        teams:
        - id: <string>
          name: <string>
          source: <string>
        - id: <string>
          name: <string>
          source: <string>
        active: <boolean>
        apiId: <string>
        errorReason: <string>
        responseStatus: <string>
    Team:
      title: Team
      required:
      - id
      - name
      - source
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        source:
          type: string
      examples:
      - id: <string>
        name: <string>
        source: <string>
    PublishAPIRequest:
      title: PublishAPIRequest
      required:
      - communities
      - endpoints
      type: object
      properties:
        communities:
          type: array
          items:
            type: string
          description: ''
        endpoints:
          type: array
          items:
            type: string
          description: ''
      examples:
      - communities:
        - 3bdf8005-5685-3ef5-b132-de4681963fb6
        endpoints:
        - http://SAG-1YVHZY2:5555/gateway/Petstore/1.0.5
    ReturnstheupdatedAPIobject:
      title: ReturnstheupdatedAPIobject
      required:
      - apiId
      - api
      - responseStatus
      - errorReason
      - gatewayEndPoints
      - microgatewayEndPoints
      - reason
      - pubSOAPFlavor
      - restrictViewAsset
      - rootFileLocation
      - teams
      - portalGatewayDataEntries
      type: object
      properties:
        apiId:
          type: string
        api:
          $ref: '#/components/schemas/Api'
        responseStatus:
          type: string
        errorReason:
          type: string
        gatewayEndPoints:
          type: array
          items:
            type: string
          description: ''
        microgatewayEndPoints:
          type: array
          items:
            type: string
          description: ''
        reason:
          type: string
        pubSOAPFlavor:
          type: string
        restrictViewAsset:
          type: string
        rootFileLocation:
          type: string
        teams:
          type: array
          items:
            $ref: '#/components/schemas/Team'
          description: ''
        portalGatewayDataEntries:
          type: string
      examples:
      - apiId: <string>
        api:
          apiDefinition:
            type: <string>
            description: <string>
            title: <string>
            version: <string>
            uri:
            - <string>
            serviceRegistryDisplayName: <string>
          nativeEndpoint:
          - optimizationTechnique: <string>
            passSecurityHeaders: <boolean>
            uri: <string>
            connectionTimeoutDuration: <integer>
            alias: <boolean>
          apiName: <string>
          apiVersion: <string>
          apiEndpointPrefix: <string>
          apiDescription: <string>
          maturityState: <string>
          apiGroups:
          - <string>
          - <string>
          isActive: <boolean>
          type: <string>
          owner: <string>
          policies:
          - <string>
          - <string>
          rootFileName: <string>
          scopes:
          - name: <string>
            description: <string>
            getoAuth2ScopeName: <string>
            policies:
            - <string>
            - <string>
            mashedUpAPI: <boolean>
          - name: <string>
            description: <string>
            getoAuth2ScopeName: <string>
            policies:
            - <string>
            - <string>
            mashedUpAPI: <boolean>
          publishedPortals:
          - <string>
          - <string>
          publishedToRegistry: <boolean>
          creationDate: <string>
          lastModified: <string>
          prevVersion: <string>
          nextVersion: <string>
          systemVersion: <integer>
          provider: <string>
          centraSiteURL: <string>
          mockService:
            enableMock: <boolean>
            runAsUser: <string>
            service: <string>
          apiDocuments:
          - <string>
          - <string>
          id: <string>
          oauth2ScopeName: <string>
        responseStatus: <string>
        errorReason: <string>
        gatewayEndPoints:
        - <string>
        - <string>
        microgatewayEndPoints:
        - <string>
        - <string>
        reason: <object>
        pubSOAPFlavor: <string>
        restrictViewAsset: <boolean>
        rootFileLocation: <string>
        teams:
        - id: <string>
          name: <string>
          source: <string>
        - id: <string>
          name: <string>
          source: <string>
        portalGatewayDataEntries: <object>
    Api:
      title: Api
      required:
      - apiDefinition
      - nativeEndpoint
      - apiName
      - apiVersion
      - apiEndpointPrefix
      - apiDescription
      - maturityState
      - apiGroups
      - isActive
      - type
      - owner
      - policies
      - rootFileName
      - scopes
      - publishedPortals
      - publishedToRegistry
      - creationDate
      - lastModified
      - prevVersion
      - nextVersion
      - systemVersion
      - provider
      - centraSiteURL
      - mockService
      - apiDocuments
      - id
      - oauth2ScopeName
      type: object
      properties:
        apiDefinition:
          $ref: '#/components/schemas/ApiDefinition'
        nativeEndpoint:
          type: array
          items:
            $ref: '#/components/schemas/NativeEndpoint'
          description: ''
        apiName:
          type: string
        apiVersion:
          type: string
        apiEndpointPrefix:
          type: string
        apiDescription:
          type: string
        maturityState:
          type: string
        apiGroups:
          type: array
          items:
            type: string
          description: ''
        isActive:
          type: string
        type:
          type: string
        owner:
          type: string
        policies:
          type: array
          items:
            type: string
          description: ''
        rootFileName:
          type: string
        scopes:
          type: array
          items:
            $ref: '#/components/schemas/Scope'
          description: ''
        publishedPortals:
          type: array
          items:
            type: string
          description: ''
        publishedToRegistry:
          type: string
        creationDate:
          type: string
        lastModified:
          type: string
        prevVersion:
          type: string
        nextVersion:
          type: string
        systemVersion:
          type: string
        provider:
          type: string
        centraSiteURL:
          type: string
        mockService:
          $ref: '#/components/schemas/MockService'
        apiDocuments:
          type: array
          items:
            type: string
          description: ''
        id:
          type: string
        oauth2ScopeName:
          type: string
      examples:
      - apiDefinition:
          type: <string>
          description: <string>
          title: <string>
          version: <string>
          uri:
          - <string>
          serviceRegistryDisplayName: <string>
        nativeEndpoint:
        - optimizationTechnique: <string>
          passSecurityHeaders: <boolean>
          uri: <string>
          connectionTimeoutDuration: <integer>
          alias: <boolean>
        apiName: <string>
        apiVersion: <string>
        apiEndpointPrefix: <string>
        apiDescription: <string>
        maturityState: <string>
        apiGroups:
        - <string>
        - <string>
        isActive: <boolean>
        type: <string>
        owner: <string>
        policies:
        - <string>
        - <string>
        rootFileName: <string>
        scopes:
        - name: <string>
          description: <string>
          getoAuth2ScopeName: <string>
          policies:
          - <string>
          - <string>
          mashedUpAPI: <boolean>
        - name: <string>
          description: <string>
          getoAuth2ScopeName: <string>
          policies:
          - <string>
          - <string>
          mashedUpAPI: <boolean>
        publishedPortals:
        - <string>
        - <string>
        publishedToRegistry: <boolean>
        creationDate: <string>
        lastModified: <string>
        prevVersion: <string>
        nextVersion: <string>
        systemVersion: <integer>
        provider: <string>
        centraSiteURL: <string>
        mockService:
          enableMock: <boolean>
          runAsUser: <string>
          service: <string>
        apiDocuments:
        - <string>
        - <string>
        id: <string>
        oauth2ScopeName: <string>
    ApiDefinition:
      title: ApiDefinition
      required:
      - type
      - description
      - title
      - version
      - uri
      - serviceRegistryDisplayName
      type: object
      properties:
        type:
          type: string
        description:
          type: string
        title:
          type: string
        version:
          type: string
        uri:
          type: array
          items:
            type: string
          description: ''
        serviceRegistryDisplayName:
          type: string
      examples:
      - type: <string>
        description: <string>
        title: <string>
        version: <string>
        uri:
        - <string>
        serviceRegistryDisplayName: <string>
    NativeEndpoint:
      title: NativeEndpoint
      required:
      - optimizationTechnique
      - passSecurityHeaders
      - uri
      - connectionTimeoutDuration
      - alias
      type: object
      properties:
        optimizationTechnique:
          type: string
        passSecurityHeaders:
          type: string
        uri:
          type: string
        connectionTimeoutDuration:
          type: string
        alias:
          type: string
      examples:
      - optimizationTechnique: <string>
        passSecurityHeaders: <boolean>
        uri: <string>
        connectionTimeoutDuration: <integer>
        alias: <boolean>
    Scope:
      title: Scope
      required:
      - name
      - description
      - getoAuth2ScopeName
      - policies
      - mashedUpAPI
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        getoAuth2ScopeName:
          type: string
        policies:
          type: array
          items:
            type: string
          description: ''
        mashedUpAPI:
          type: string
      examples:
      - name: <string>
        description: <string>
        getoAuth2ScopeName: <string>
        policies:
        - <string>
        - <string>
        mashedUpAPI: <boolean>
    MockService:
      title: MockService
      required:
      - enableMock
      - runAsUser
      - service
      type: object
      properties:
        enableMock:
          type: string
        runAsUser:
          type: string
        service:
          type: string
      examples:
      - enableMock: <boolean>
        runAsUser: <string>
        service: <string>
    Iftheformatisswaggerreturnstheswaggercontentinjson.Iftheformatiswsdlreturnsthewsdlcontentinxml.:
      title: Iftheformatisswaggerreturnstheswaggercontentinjson.Iftheformatiswsdlreturnsthewsdlcontentinxml.
      required:
      - versions
      - gatewayEndPoints
      - api
      - apiId
      - errorReason
      - responseStatus
      type: object
      properties:
        versions:
          type: array
          items:
            $ref: '#/components/schemas/Version'
          description: ''
        gatewayEndPoints:
          type: array
          items:
            type: string
          description: ''
        api:
          $ref: '#/components/schemas/Api'
        apiId:
          type: string
        errorReason:
          type: string
        responseStatus:
          type: string
      examples:
      - versions:
        - versionNumber: <string>
          apiId: <string>
        - versionNumber: <string>
          apiId: <string>
        gatewayEndPoints:
        - <string>
        - <string>
        api:
          apiDefinition:
            type: <string>
            description: <string>
            title: <string>
            version: <string>
            uri:
            - <string>
            serviceRegistryDisplayName: <string>
          nativeEndpoint:
          - optimizationTechnique: <string>
            passSecurityHeaders: <boolean>
            uri: <string>
            connectionTimeoutDuration: <integer>
            alias: <boolean>
          apiName: <string>
          apiVersion: <string>
          apiEndpointPrefix: <string>
          apiDescription: <string>
          maturityState: <string>
          apiGroups:
          - <string>
          - <string>
          isActive: <boolean>
          type: <string>
          owner: <string>
          policies:
          - <string>
          - <string>
          rootFileName: <string>
          scopes:
          - name: <string>
            description: <string>
            getoAuth2ScopeName: <string>
            policies:
            - <string>
            - <string>
            mashedUpAPI: <boolean>
          - name: <string>
            description: <string>
            getoAuth2ScopeName: <string>
            policies:
            - <string>
            - <string>
            mashedUpAPI: <boolean>
          publishedPortals:
          - <string>
          - <string>
          publishedToRegistry: <boolean>
          creationDate: <string>
          lastModified: <string>
          prevVersion: <string>
          nextVersion: <string>
          systemVersion: <integer>
          provider: <string>
          centraSiteURL: <string>
          mockService:
            enableMock: <boolean>
            runAsUser: <string>
            service: <string>
          apiDocuments:
          - <string>
          - <string>
          id: <string>
          oauth2ScopeName: <string>
        apiId: <string>
        errorReason: <string>
        responseStatus: <string>
    Version:
      title: Version
      required:
      - versionNumber
      - apiId
      type: object
      properties:
        versionNumber:
          type: string
        apiId:
          type: string
      examples:
      - versionNumber: <string>
        apiId: <string>
    UpdateAPIRequest:
      title: UpdateAPIRequest
      required:
      - apiDefinition
      - nativeEndpoint
      - apiName
      - apiVersion
      - apiDescription
      - maturityState
      - isActive
      - type
      - owner
      - policies
      - scopes
      - publishedPortals
      - creationDate
      - systemVersion
      - id
      type: object
      properties:
        apiDefinition:
          $ref: '#/components/schemas/ApiDefinition2'
        nativeEndpoint:
          type: array
          items:
            $ref: '#/components/schemas/NativeEndpoint2'
          description: ''
        apiName:
          type: string
        apiVersion:
          type: string
        apiDescription:
          type: string
        maturityState:
          type: string
        isActive:
          type: boolean
        type:
          type: string
        owner:
          type: string
        policies:
          type: array
          items:
            type: string
          description: ''
        scopes:
          type: array
          items:
            type: string
          description: ''
        publishedPortals:
          type: array
          items:
            type: string
          description: ''
        creationDate:
          type: string
        systemVersion:
          type: integer
          contentEncoding: int32
        id:
          type: string
    ApiDefinition2:
      title: ApiDefinition2
      required:
      - info
      - host
      - basePath
      - tags
      - schemes
      - security
      - paths
      - securityDefinitions
      - definitions
      - baseUriParameters
      - externalDocs
      - servers
      - components
      - type
      type: object
      properties:
        info:
          $ref: '#/components/schemas/Info'
        host:
          type: string
        basePath:
          type: string
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
          description: ''
        schemes:
          type: array
          items:
            type: string
          description: ''
        security:
          type: array
          items:
            type: string
          description: ''
        paths:
          $ref: '#/components/schemas/Paths'
        securityDefinitions:
          $ref: '#/components/schemas/SecurityDefinitions'
        definitions:
          type: object
        baseUriParameters:
          type: array
          items:
            type: string
          description: ''
        externalDocs:
          type: array
          items:
            $ref: '#/components/schemas/ExternalDocs'
          description: ''
        servers:
          type: array
          items:
            $ref: '#/components/schemas/Server'
          description: ''
        components:
          $ref: '#/components/schemas/Components'
        type:
          type: string
    Info:
      title: Info
      required:
      - description
      - version
      - title
      - termsOfService
      - contact
      - license
      type: object
      properties:
        description:
          type: string
        version:
          type: string
        title:
          type: string
        termsOfService:
          type: string
        contact:
          $ref: '#/components/schemas/Contact'
        license:
          $ref: '#/components/schemas/License'
      examples:
      - description: description flows here
        version: '1.0'
        title: Swagger Petstore
        termsOfService: http://swagger.io/terms/
        contact:
          email: apiteam@swagger.io
        license:
          name: Apache 2.0
          url: http://www.apache.org/licenses/LICENSE-2.0.html
    Contact:
      title: Contact
      required:
      - email
      type: object
      properties:
        email:
          type: string
      examples:
      - email: apiteam@swagger.io
    License:
      title: License
      required:
      - name
      - url
      type: object
      properties:
        name:
          type: string
        url:
          type: string
      examples:
      - name: Apache 2.0
        url: http://www.apache.org/licenses/LICENSE-2.0.html
    Tag:
      title: Tag
      required:
      - name
      - description
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        externalDocs:
          $ref: '#/components/schemas/ExternalDocs'
      examples:
      - name: pet
        description: Everything about your Pets
        externalDocs:
          description: Find out more
          url: http://swagger.io
    ExternalDocs:
      title: ExternalDocs
      required:
      - description
      - url
      type: object
      properties:
        description:
          type: string
        url:
          type: string
      examples:
      - description: Find out more
        url: http://swagger.io
    Paths:
      title: Paths
      required:
      - /pet
      - /pet/findByStatus
      - /pet/findByTags
      - /pet/{petId}
      - /pet/{petId}/uploadImage
      - /store/inventory
      - /store/order
      - /store/order/{orderId}
      - /user
      - /user/createWithArray
      - /user/createWithList
      - /user/login
      - /user/logout
      - /user/{username}
      type: object
      properties:
        /pet:
          $ref: '#/components/schemas/Pet'
        /pet/findByStatus:
          $ref: '#/components/schemas/PetFindByStatus'
        /pet/findByTags:
          $ref: '#/components/schemas/PetFindByTags'
        /pet/{petId}:
          $ref: '#/components/schemas/PetPetId'
        /pet/{petId}/uploadImage:
          $ref: '#/components/schemas/PetPetIdUploadImage'
        /store/inventory:
          $ref: '#/components/schemas/StoreInventory'
        /store/order:
          $ref: '#/components/schemas/StoreOrder'
        /store/order/{orderId}:
          $ref: '#/components/schemas/StoreOrderOrderId'
        /user:
          $ref: '#/components/schemas/User'
        /user/createWithArray:
          $ref: '#/components/schemas/UserCreateWithArray'
        /user/createWithList:
          $ref: '#/components/schemas/UserCreateWithList'
        /user/login:
          $ref: '#/components/schemas/UserLogin'
        /user/logout:
          $ref: '#/components/schemas/UserLogout'
        /user/{username}:
          $ref: '#/components/schemas/UserUsername'
    Pet:
      title: Pet
      required:
      - put
      - post
      - parameters
      - enabled
      type: object
      properties:
        put:
          $ref: '#/components/schemas/Put'
        post:
          $ref: '#/components/schemas/Post'
        parameters:
          type: array
          items:
            type: string
          description: ''
        enabled:
          type: boolean
      examples:
      - put:
          tags:
          - pet
          summary: Update an existing pet
          description: ''
          operationId: updatePet
          consumes:
          - application/json
          - application/xml
          produces:
          - application/json
          - application/xml
          parameters: []
          responses:
            '400':
              description: Invalid ID supplied
            '404':
              description: Pet not found
            '405':
              description: Validation exception
          security:
          - petstore_auth:
            - write:pets
            - read:pets
          enabled: true
          requestBody:
            description: Pet object that needs to be added to the store
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Pet'
              application/xml:
                schema:
                  $ref: '#/components/schemas/Pet'
            required: true
        post:
          tags:
          - pet
          summary: Add a new pet to the store
          description: ''
          operationId: addPet
          consumes:
          - application/json
          - application/xml
          produces:
          - application/json
          - application/xml
          parameters: []
          responses:
            '405':
              description: Invalid input
          security:
          - petstore_auth:
            - write:pets
            - read:pets
          enabled: true
          requestBody:
            description: Pet object that needs to be added to the store
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Pet'
              application/xml:
                schema:
                  $ref: '#/components/schemas/Pet'
            required: true
        parameters: []
        enabled: true
    Put:
      title: Put
      required:
      - tags
      - summary
      - description
      - operationId
      - consumes
      - produces
      - parameters
      - responses
      - security
      - enabled
      - requestBody
      type: object
      properties:
        tags:
          type: array
          items:
            type: string
          description: ''
        summary:
          type: string
        description:
          type: string
        operationId:
          type: string
        consumes:
          type: array
          items:
            type: string
          description: ''
        produces:
          type: array
          items:
            type: string
          description: ''
        parameters:
          type: array
          items:
            type: string
          description: ''
        responses:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/m400'
        security:
          type: array
          items:
            $ref: '#/components/schemas/Security'
          description: ''
        enabled:
          type: boolean
        requestBody:
          $ref: '#/components/schemas/RequestBody'
      examples:
      - tags:
        - pet
        summary: Update an existing pet
        description: ''
        operationId: updatePet
        consumes:
        - application/json
        - application/xml
        produces:
        - application/json
        - application/xml
        parameters: []
        responses:
          '400':
            description: Invalid ID supplied
          '404':
            description: Pet not found
          '405':
            description: Validation exception
        security:
        - petstore_auth:
          - write:pets
          - read:pets
        enabled: true
        requestBody:
          description: Pet object that needs to be added to the store
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
          required: true
    m400:
      title: m400
      required:
      - description
      type: object
      properties:
        description:
          type: string
      examples:
      - description: Invalid ID supplied
    Security:
      title: Security
      required:
      - petstore_auth
      type: object
      properties:
        petstore_auth:
          type: array
          items:
            type: string
          description: ''
      examples:
      - petstore_auth:
        - write:pets
        - read:pets
    RequestBody:
      title: RequestBody
      required:
      - description
      - content
      - required
      type: object
      properties:
        description:
          type: string
        content:
          $ref: '#/components/schemas/Content'
        required:
          type: boolean
      examples:
      - description: Pet object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
          application/xml:
            schema:
              $ref: '#/components/schemas/Pet'
        required: true
    Content:
      title: Content
      required:
      - application/json
      - application/xml
      type: object
      properties:
        application/json:
          $ref: '#/components/schemas/ApplicationJson'
        application/xml:
          $ref: '#/components/schemas/ApplicationXml'
      examples:
      - application/json:
          schema:
            $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pet'
    ApplicationJson:
      title: ApplicationJson
      required:
      - schema
      type: object
      properties:
        schema:
          $ref: '#/components/schemas/Schema'
      examples:
      - schema:
          $ref: '#/components/schemas/Pet'
    Schema:
      title: Schema
      required:
      - $ref
      type: object
      properties:
        $ref:
          type: string
    ApplicationXml:
      title: ApplicationXml
      required:
      - schema
      type: object
      properties:
        schema:
          $ref: '#/components/schemas/Schema'
      examples:
      - schema:
          $ref: '#/components/schemas/Pet'
    Post:
      title: Post
      required:
      - tags
      - summary
      - description
      - operationId
      - consumes
      - produces
      - parameters
      - responses
      - security
      - enabled
      - requestBody
      type: object
      properties:
        tags:
          type: array
          items:
            type: string
          description: ''
        summary:
          type: string
        description:
          type: string
        operationId:
          type: string
        consumes:
          type: array
          items:
            type: string
          description: ''
        produces:
          type: array
          items:
            type: string
          description: ''
        parameters:
          type: array
          items:
            type: string
          description: ''
        responses:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/m400'
        security:
          type: array
          items:
            $ref: '#/components/schemas/Security'
          description: ''
        enabled:
          type: boolean
        requestBody:
          $ref: '#/components/schemas/RequestBody'
      examples:
      - tags:
        - pet
        summary: Add a new pet to the store
        description: ''
        operationId: addPet
        consumes:
        - application/json
        - application/xml
        produces:
        - application/json
        - application/xml
        parameters: []
        responses:
          '405':
            description: Invalid input
        security:
        - petstore_auth:
          - write:pets
          - read:pets
        enabled: true
        requestBody:
          description: Pet object that needs to be added to the store
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
          required: true
    PetFindByStatus:
      title: PetFindByStatus
      required:
      - get
      - parameters
      - enabled
      type: object
      properties:
        get:
          $ref: '#/components/schemas/Get'
        parameters:
          type: array
          items:
            type: string
          description: ''
        enabled:
          type: boolean
    Get:
      title: Get
      required:
      - tags
      - summary
      - description
      - operationId
      - produces
      - parameters
      - responses
      - security
      - enabled
      type: object
      properties:
        tags:
          type: array
          items:
            type: string
          description: ''
        summary:
          type: string
        description:
          type: string
        operationId:
          type: string
        produces:
          type: array
          items:
            type: string
          description: ''
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/Parameter'
          description: ''
        responses:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/m200'
        security:
          type: array
          items:
            $ref: '#/components/schemas/Security'
          description: ''
        enabled:
          type: boolean
    Parameter:
      title: Parameter
      required:
      - description
      - in
      - name
      - parameterSchema
      - required
      type: object
      properties:
        description:
          type: string
        in:
          type: string
        name:
          type: string
        parameterSchema:
          $ref: '#/components/schemas/ParameterSchema'
        required:
          type: boolean
      examples:
      - description: Status values that need to be considered for filter
        in: query
        name: status
        parameterSchema:
          description: Status values that need to be considered for filter
          items:
            default: available
            enum:
            - available
            - pending
            - sold
            type: string
          readOnly: false
          type: array
        required: true
    ParameterSchema:
      title: ParameterSchema
      required:
      - description
      - items
      - readOnly
      - type
      type: object
      properties:
        description:
          type: string
        items:
          $ref: '#/components/schemas/Items'
        readOnly:
          type: boolean
        type:
          type: string
      examples:
      - description: Status values that need to be considered for filter
        items:
          default: available
          enum:
          - available
          - pending
          - sold
          type: string
        readOnly: false
        type: array
    Items:
      title: Items
      required:
      - default
      - enum
      - type
      type: object
      properties:
        default:
          type: string
        enum:
          type: array
          items:
            type: string
          description: ''
        type:
          type: string
      examples:
      - default: available
        enum:
        - available
        - pending
        - sold
        type: string
    m200:
      title: m200
      required:
      - description
      - content
      type: object
      properties:
        description:
          type: string
        content:
          $ref: '#/components/schemas/Content2'
      examples:
      - description: successful operation
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Pet'
          application/xml:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Pet'
    Content2:
      title: Content2
      required:
      - application/json
      - application/xml
      type: object
      properties:
        application/json:
          $ref: '#/components/schemas/ApplicationJson2'
        application/xml:
          $ref: '#/components/schemas/ApplicationXml2'
      examples:
      - application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Pet'
    ApplicationJson2:
      title: ApplicationJson2
      required:
      - schema
      type: object
      properties:
        schema:
          $ref: '#/components/schemas/Schema4'
      examples:
      - schema:
          type: array
          items:
            $ref: '#/components/schemas/Pet'
    Schema4:
      title: Schema4
      required:
      - type
      - items
      type: object
      properties:
        type:
          type: string
        items:
          type: object
      examples:
      - type: array
        items:
          $ref: '#/components/schemas/Pet'
    ApplicationXml2:
      title: ApplicationXml2
      required:
      - schema
      type: object
      properties:
        schema:
          $ref: '#/components/schemas/Schema4'
      examples:
      - schema:
          type: array
          items:
            $ref: '#/components/schemas/Pet'
    PetFindByTags:
      title: PetFindByTags
      required:
      - get
      - parameters
      - enabled
      type: object
      properties:
        get:
          $ref: '#/components/schemas/Get1'
        parameters:
          type: array
          items:
            type: string
          description: ''
        enabled:
          type: boolean
    Get1:
      title: Get1
      required:
      - tags
      - summary
      - description
      - operationId
      - produces
      - parameters
      - responses
      - security
      - deprecated
      - enabled
      type: object
      properties:
        tags:
          type: array
          items:
            type: string
          description: ''
        summary:
          type: string
        description:
          type: string
        operationId:
          type: string
        produces:
          type: array
          items:
            type: string
          description: ''
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/Parameter1'
          description: ''
        responses:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/m200'
        security:
          type: array
          items:
            $ref: '#/components/schemas/Security'
          description: ''
        deprecated:
          type: boolean
        enabled:
          type: boolean
    Parameter1:
      title: Parameter1
      required:
      - description
      - in
      - name
      - parameterSchema
      - required
      type: object
      properties:
        description:
          type: string
        in:
          type: string
        name:
          type: string
        parameterSchema:
          $ref: '#/components/schemas/ParameterSchema1'
        required:
          type: boolean
      examples:
      - description: Tags to filter by
        in: query
        name: tags
        parameterSchema:
          description: Tags to filter by
          items:
            type: string
          readOnly: false
          type: array
        required: true
    ParameterSchema1:
      title: ParameterSchema1
      required:
      - description
      - items
      - readOnly
      - type
      type: object
      properties:
        description:
          type: string
        items:
          $ref: '#/components/schemas/Items1'
        readOnly:
          type: boolean
        type:
          type: string
      examples:
      - description: Tags to filter by
        items:
          type: string
        readOnly: false
        type: array
    Items1:
      title: Items1
      required:
      - type
      type: object
      properties:
        type:
          type: string
      examples:
      - type: string
    PetPetId:
      title: PetPetId
      required:
      - get
      - post
      - delete
      - parameters
      - enabled
      type: object
      properties:
        get:
          $ref: '#/components/schemas/Get2'
        post:
          $ref: '#/components/schemas/Post1'
        delete:
          $ref: '#/components/schemas/Delete'
        parameters:
          type: array
          items:
            type: string
          description: ''
        enabled:
          type: boolean
    Get2:
      title: Get2
      required:
      - tags
      - summary
      - description
      - operationId
      - produces
      - parameters
      - responses
      - security
      - enabled
      type: object
      properties:
        tags:
          type: array
          items:
            type: string
          description: ''
        summary:
          type: string
        description:
          type: string
        operationId:
          type: string
        produces:
          type: array
          items:
            type: string
          description: ''
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/Parameter2'
          description: ''
        responses:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/m2002'
        security:
          type: array
          items:
            $ref: '#/components/schemas/Security4'
          description: ''
        enabled:
          type: boolean
    Parameter2:
      title: Parameter2
      required:
      - description
      - in
      - name
      - parameterSchema
      - required
      type: object
      properties:
        description:
          type: string
        in:
          type: string
        name:
          type: string
        parameterSchema:
          $ref: '#/components/schemas/ParameterSchema2'
        required:
          type: boolean
      examples:
      - description: ID of pet to return
        in: path
        name: petId
        parameterSchema:
          description: ID of pet to return
          format: int64
          readOnly: false
          type: integer
        required: true
    ParameterSchema2:
      title: ParameterSchema2
      required:
      - description
      - format
      - readOnly
      - type
      type: object
      properties:
        description:
          type: string
        format:
          type: string
        readOnly:
          type: boolean
        type:
          type: string
      examples:
      - description: ID of pet to return
        format: int64
        readOnly: false
        type: integer
    m2002:
      title: m2002
      required:
      - description
      - content
      type: object
      properties:
        description:
          type: string
        content:
          $ref: '#/components/schemas/Content'
      examples:
      - description: successful operation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
          application/xml:
            schema:
              $ref: '#/components/schemas/Pet'
    Security4:
      title: Security4
      required:
      - api_key
      type: object
      properties:
        api_key:
          type: array
          items:
            type: string
          description: ''
      examples:
      - api_key: []
    Post1:
      title: Post1
      required:
      - tags
      - summary
      - description
      - operationId
      - consumes
      - produces
      - parameters
      - responses
      - security
      - enabled
      - requestBody
      type: object
      properties:
        tags:
          type: array
          items:
            type: string
          description: ''
        summary:
          type: string
        description:
          type: string
        operationId:
          type: string
        consumes:
          type: array
          items:
            type: string
          description: ''
        produces:
          type: array
          items:
            type: string
          description: ''
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/Parameter2'
          description: ''
        responses:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/m400'
        security:
          type: array
          items:
            $ref: '#/components/schemas/Security'
          description: ''
        enabled:
          type: boolean
        requestBody:
          $ref: '#/components/schemas/RequestBody2'
      examples:
      - tags:
        - pet
        summary: Updates a pet in the store with form data
        description: ''
        operationId: updatePetWithForm
        consumes:
        - application/x-www-form-urlencoded
        produces:
        - application/json
        - application/xml
        parameters:
        - description: ID of pet that needs to be updated
          in: path
          name: petId
          parameterSchema:
            description: ID of pet that needs to be updated
            format: int64
            readOnly: false
            type: integer
          required: true
        responses:
          '405':
            description: Invalid input
        security:
        - petstore_auth:
          - write:pets
          - read:pets
        enabled: true
        requestBody:
          content:
            application/x-www-form-urlencoded:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    description: Updated name of the pet
                    readOnly: false
                  status:
                    type: string
                    description: Updated status of the pet
                    readOnly: false
          required: true
    RequestBody2:
      title: RequestBody2
      required:
      - content
      - required
      type: object
      properties:
        content:
          $ref: '#/components/schemas/Content5'
        required:
          type: boolean
      examples:
      - content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Updated name of the pet
                  readOnly: false
                status:
                  type: string
                  description: Updated status of the pet
                  readOnly: false
        required: true
    Content5:
      title: Content5
      required:
      - application/x-www-form-urlencoded
      type: object
      properties:
        application/x-www-form-urlencoded:
          $ref: '#/components/schemas/ApplicationXWwwFormUrlencoded'
      examples:
      - application/x-www-form-urlencoded:
          schema:
            type: object
            properties:
              name:
                type: string
                description: Updated name of the pet
                readOnly: false
              status:
                type: string
                description: Updated status of the pet
                readOnly: false
    ApplicationXWwwFormUrlencoded:
      title: ApplicationXWwwFormUrlencoded
      required:
      - schema
      type: object
      properties:
        schema:
          $ref: '#/components/schemas/Schema10'
      examples:
      - schema:
          type: object
          properties:
            name:
              type: string
              description: Updated name of the pet
              readOnly: false
            status:
              type: string
              description: Updated status of the pet
              readOnly: false
    Schema10:
      title: Schema10
      required:
      - type
      - properties
      type: object
      properties:
        type:
          type: string
        properties:
          $ref: '#/components/schemas/Properties'
      examples:
      - type: object
        properties:
          name:
            type: string
            description: Updated name of the pet
            readOnly: false
          status:
            type: string
            description: Updated status of the pet
            readOnly: false
    Properties:
      title: Properties
      required:
      - name
      - status
      type: object
      properties:
        name:
          type: object
        status:
          type: object
      examples:
      - name:
          type: string
          description: Updated name of the pet
          readOnly: false
        status:
          type: string
          description: Updated status of the pet
          readOnly: false
    Delete:
      title: Delete
      required:
      - tags
      - summary
      - description
      - operationId
      - produces
      - parameters
      - responses
      - security
      - enabled
      type: object
      properties:
        tags:
          type: array
          items:
            type: string
          description: ''
        summary:
          type: string
        description:
          type: string
        operationId:
          type: string
        produces:
          type: array
          items:
            type: string
          description: ''
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/Parameter4'
          description: ''
        responses:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/m400'
        security:
          type: array
          items:
            $ref: '#/components/schemas/Security'
          description: ''
        enabled:
          type: boolean
      examples:
      - tags:
        - pet
        summary: Deletes a pet
        description: ''
        operationId: deletePet
        produces:
        - application/json
        - application/xml
        parameters:
        - in: header
          name: api_key
          parameterSchema:
            readOnly: false
            type: string
          required: false
        - description: Pet id to delete
          in: path
          name: petId
          parameterSchema:
            description: Pet id to delete
            format: int64
            readOnly: false
            type: integer
          required: true
        responses:
          '400':
            description: Invalid ID supplied
          '404':
            description: Pet not found
        security:
        - petstore_auth:
          - write:pets
          - read:pets
        enabled: true
    Parameter4:
      title: Parameter4
      required:
      - in
      - name
      - parameterSchema
      - required
      type: object
      properties:
        in:
          type: string
        name:
          type: string
        parameterSchema:
          $ref: '#/components/schemas/ParameterSchema4'
        required:
          type: boolean
        description:
          type: string
      examples:
      - in: header
        name: api_key
        parameterSchema:
          readOnly: false
          type: string
        required: false
    ParameterSchema4:
      title: ParameterSchema4
      required:
      - readOnly
      - type
      type: object
      properties:
        readOnly:
          type: boolean
        type:
          type: string
        description:
          type: string
        format:
          type: string
      examples:
      - readOnly: false
        type: string
    PetPetIdUploadImage:
      title: PetPetIdUploadImage
      required:
      - post
      - parameters
      - enabled
      type: object
      properties:
        post:
          $ref: '#/components/schemas/Post2'
        parameters:
          type: array
          items:
            type: string
          description: ''
        enabled:
          type: boolean
      examples:
      - post:
          tags:
          - pet
          summary: uploads an image
          description: ''
          operationId: uploadFile
          consumes:
          - multipart/form-data
          produces:
          - application/json
          parameters:
          - description: ID of pet to update
            in: path
            name: petId
            parameterSchema:
              description: ID of pet to update
              format: int64
              readOnly: false
              type: integer
            required: true
          responses:
            '200':
              description: successful operation
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/ApiResponse'
          security:
          - petstore_auth:
            - write:pets
            - read:pets
          enabled: true
          requestBody:
            content:
              multipart/form-data:
                schema:
                  type: object
                  properties:
                    additionalMetadata:
                      type: string
                      description: Additional data to pass to server
                      readOnly: false
                    file:
                      type: string
                      description: file to upload
                      format: binary
                      readOnly: false
            required: true
        parameters: []
        enabled: true
    Post2:
      title: Post2
      required:
      - tags
      - summary
      - description
      - operationId
      - consumes
      - produces
      - parameters
      - responses
      - security
      - enabled
      - requestBody
      type: object
      properties:
        tags:
          type: array
          items:
            type: string
          description: ''
        summary:
          type: string
        description:
          type: string
        operationId:
          type: string
        consumes:
          type: array
          items:
            type: string
          description: ''
        produces:
          type: array
          items:
            type: string
          description: ''
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/Parameter2'
          description: ''
        responses:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/m2003'
        security:
          type: array
          items:
            $ref: '#/components/schemas/Security'
          description: ''
        enabled:
          type: boolean
        requestBody:
          $ref: '#/components/schemas/RequestBody3'
      examples:
      - tags:
        - pet
        summary: uploads an image
        description: ''
        operationId: uploadFile
        consumes:
        - multipart/form-data
        produces:
        - application/json
        parameters:
        - description: ID of pet to update
          in: path
          name: petId
          parameterSchema:
            description: ID of pet to update
            format: int64
            readOnly: false
            type: integer
          required: true
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiResponse'
        security:
        - petstore_auth:
          - write:pets
          - read:pets
        enabled: true
        requestBody:
          content:
            multipart/form-data:
              schema:
                type: object
                properties:
                  additionalMetadata:
                    type: string
                    description: Additional data to pass to server
                    readOnly: false
                  file:
                    type: string
                    description: file to upload
                    format: binary
                    readOnly: false
          required: true
    m2003:
      title: m2003
      required:
      - description
      - content
      type: object
      properties:
        description:
          type: string
        content:
          $ref: '#/components/schemas/Content6'
      examples:
      - description: successful operation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiResponse'
    Content6:
      title: Content6
      required:
      - application/json
      type: object
      properties:
        application/json:
          $ref: '#/components/schemas/ApplicationJson'
      examples:
      - application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
    RequestBody3:
      title: RequestBody3
      required:
      - content
      - required
      type: object
      properties:
        content:
          $ref: '#/components/schemas/Content7'
        required:
          type: boolean
      examples:
      - content:
          multipart/form-data:
            schema:
              type: object
              properties:
                additionalMetadata:
                  type: string
                  description: Additional data to pass to server
                  readOnly: false
                file:
                  type: string
                  description: file to upload
                  format: binary
                  readOnly: false
        required: true
    Content7:
      title: Content7
      required:
      - multipart/form-data
      type: object
      properties:
        multipart/form-data:
          $ref: '#/components/schemas/MultipartFormData'
      examples:
      - multipart/form-data:
          schema:
            type: object
            properties:
              additionalMetadata:
                type: string
                description: Additional data to pass to server
                readOnly: false
              file:
                type: string
                description: file to upload
                format: binary
                readOnly: false
    MultipartFormData:
      title: MultipartFormData
      required:
      - schema
      type: object
      properties:
        schema:
          $ref: '#/components/schemas/Schema12'
      examples:
      - schema:
          type: object
          properties:
            additionalMetadata:
              type: string
              description: Additional data to pass to server
              readOnly: false
            file:
              type: string
              description: file to upload
              format: binary
              readOnly: false
    Schema12:
      title: Schema12
      required:
      - type
      - properties
      type: object
      properties:
        type:
          type: string
        properties:
          $ref: '#/components/schemas/Properties1'
      examples:
      - type: object
        properties:
          additionalMetadata:
            type: string
            description: Additional data to pass to server
            readOnly: false
          file:
            type: string
            description: file to upload
            format: binary
            readOnly: false
    Properties1:
      title: Properties1
      required:
      - additionalMetadata
      - file
      type: object
      properties:
        additionalMetadata:
          type: object
        file:
          type: object
      examples:
      - additionalMetadata:
          type: string
          description: Additional data to pass to server
          readOnly: false
        file:
          type: string
          description: file to upload
          format: binary
          readOnly: false
    StoreInventory:
      title: StoreInventory
      required:
      - get
      - parameters
      - enabled
      type: object
      properties:
        get:
          $ref: '#/components/schemas/Get3'
        parameters:
          type: array
          items:
            type: string
          description: ''
        enabled:
          type: boolean
      examples:
      - get:
          tags:
          - store
          summary: Returns pet inventories by status
          description: Returns a map of status codes to quantities
          operationId: getInventory
          produces:
          - application/json
          responses:
            '200':
              description: successful operation
              content:
                application/json:
                  schema:
                    type: object
                    additionalProperties:
                      type: integer
                      format: int32
          security:
          - api_key: []
          enabled: true
        parameters: []
        enabled: true
    Get3:
      title: Get3
      required:
      - tags
      - summary
      - description
      - operationId
      - produces
      - responses
      - security
      - enabled
      type: object
      properties:
        tags:
          type: array
          items:
            type: string
          description: ''
        summary:
          type: string
        description:
          type: string
        operationId:
          type: string
        produces:
          type: array
          items:
            type: string
          description: ''
        responses:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/m2004'
        security:
          type: array
          items:
            $ref: '#/components/schemas/Security4'
          description: ''
        enabled:
          type: boolean
      examples:
      - tags:
        - store
        summary: Returns pet inventories by status
        description: Returns a map of status codes to quantities
        operationId: getInventory
        produces:
        - application/json
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  type: object
                  additionalProperties:
                    type: integer
                    format: int32
        security:
        - api_key: []
        enabled: true
    m2004:
      title: m2004
      required:
      - description
      - content
      type: object
      properties:
        description:
          type: string
        content:
          $ref: '#/components/schemas/Content8'
      examples:
      - description: successful operation
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: integer
                format: int32
    Content8:
      title: Content8
      required:
      - application/json
      type: object
      properties:
        application/json:
          $ref: '#/components/schemas/ApplicationJson6'
      examples:
      - application/json:
          schema:
            type: object
            additionalProperties:
              type: integer
              format: int32
    ApplicationJson6:
      title: ApplicationJson6
      required:
      - schema
      type: object
      properties:
        schema:
          $ref: '#/components/schemas/Schema13'
      examples:
      - schema:
          type: object
          additionalProperties:
            type: integer
            format: int32
    Schema13:
      title: Schema13
      required:
      - type
      - additionalProperties
      type: object
      properties:
        type:
          type: string
        additionalProperties:
          type: object
      examples:
      - type: object
        additionalProperties:
          type: integer
          format: int32
    StoreOrder:
      title: StoreOrder
      required:
      - post
      - parameters
      - enabled
      type: object
      properties:
        post:
          $ref: '#/components/schemas/Post3'
        parameters:
          type: array
          items:
            type: string
          description: ''
        enabled:
          type: boolean
    Post3:
      title: Post3
      required:
      - tags
      - summary
      - description
      - operationId
      - consumes
      - produces
      - parameters
      - responses
      - enabled
      - requestBody
      type: object
      properties:
        tags:
          type: array
          items:
            type: string
          description: ''
        summary:
          type: string
        description:
          type: string
        operationId:
          type: string
        consumes:
          type: array
          items:
            type: string
          description: ''
        produces:
          type: array
          items:
            type: string
          description: ''
        parameters:
          type: array
          items:
            type: string
          description: ''
        responses:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/m2002'
        enabled:
          type: boolean
        requestBody:
          $ref: '#/components/schemas/RequestBody4'
    RequestBody4:
      title: RequestBody4
      required:
      - description
      - content
      - required
      type: object
      properties:
        description:
          type: string
        content:
          $ref: '#/components/schemas/Content6'
        required:
          type: boolean
      examples:
      - description: order placed for purchasing the pet
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
    StoreOrderOrderId:
      title: StoreOrderOrderId
      required:
      - get
      - delete
      - parameters
      - enabled
      type: object
      properties:
        get:
          $ref: '#/components/schemas/Get4'
        delete:
          $ref: '#/components/schemas/Delete1'
        parameters:
          type: array
          items:
            type: string
          description: ''
        enabled:
          type: boolean
    Get4:
      title: Get4
      required:
      - tags
      - summary
      - description
      - operationId
      - produces
      - parameters
      - responses
      - enabled
      type: object
      properties:
        tags:
          type: array
          items:
            type: string
          description: ''
        summary:
          type: string
        description:
          type: string
        operationId:
          type: string
        produces:
          type: array
          items:
            type: string
          description: ''
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/Parameter6'
          description: ''
        responses:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/m2002'
        enabled:
          type: boolean
    Parameter6:
      title: Parameter6
      required:
      - description
      - in
      - name
      - parameterSchema
      - required
      type: object
      properties:
        description:
          type: string
        in:
          type: string
        name:
          type: string
        parameterSchema:
          $ref: '#/components/schemas/ParameterSchema6'
        required:
          type: boolean
      examples:
      - description: ID of pet that needs to be fetched
        in: path
        name: orderId
        parameterSchema:
          description: ID of pet that needs to be fetched
          format: int64
          maximum: 10
          minimum: 1
          readOnly: false
          type: integer
        required: true
    ParameterSchema6:
      title: ParameterSchema6
      required:
      - description
      - format
      - maximum
      - minimum
      - readOnly
      - type
      type: object
      properties:
        description:
          type: string
        format:
          type: string
        maximum:
          type: integer
          contentEncoding: int32
        minimum:
          type: integer
          contentEncoding: int32
        readOnly:
          type: boolean
        type:
          type: string
      examples:
      - description: ID of pet that needs to be fetched
        format: int64
        maximum: 10
        minimum: 1
        readOnly: false
        type: integer
    Delete1:
      title: Delete1
      required:
      - tags
      - summary
      - description
      - operationId
      - produces
      - parameters
      - responses
      - enabled
      type: object
      properties:
        tags:
          type: array
          items:
            type: string
          description: ''
        summary:
          type: string
        description:
          type: string
        operationId:
          type: string
        produces:
          type: array
          items:
            type: string
          description: ''
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/Parameter7'
          description: ''
        responses:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/m400'
        enabled:
          type: boolean
      examples:
      - tags:
        - store
        summary: Delete purchase order by ID
        description: For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors
        operationId: deleteOrder
        produces:
        - application/json
        - application/xml
        parameters:
        - description: ID of the order that needs to be deleted
          in: path
          name: orderId
          parameterSchema:
            description: ID of the order that needs to be deleted
            format: int64
            minimum: 1
            readOnly: false
            type: integer
          required: true
        responses:
          '400':
            description: Invalid ID supplied
          '404':
            description: Order not found
        enabled: true
    Parameter7:
      title: Parameter7
      required:
      - description
      - in
      - name
      - parameterSchema
      - required
      type: object
      properties:
        description:
          type: string
        in:
          type: string
        name:
          type: string
        parameterSchema:
          $ref: '#/components/schemas/ParameterSchema7'
        required:
          type: boolean
      examples:
      - description: ID of the order that needs to be deleted
        in: path
        name: orderId
        parameterSchema:
          description: ID of the order that needs to be deleted
          format: int64
          minimum: 1
          readOnly: false
          type: integer
        required: true
    ParameterSchema7:
      title: ParameterSchema7
      required:
      - description
      - format
      - minimum
      - readOnly
      - type
      type: object
      properties:
        description:
          type: string
        format:
          type: string
        minimum:
          type: integer
          contentEncoding: int32
        readOnly:
          type: boolean
        type:
          type: string
      examples:
      - description: ID of the order that needs to be deleted
        format: int64
        minimum: 1
        readOnly: false
        type: integer
    User:
      title: User
      required:
      - post
      - parameters
      - enabled
      type: object
      properties:
        post:
          $ref: '#/components/schemas/Post4'
        parameters:
          type: array
          items:
            type: string
          description: ''
        enabled:
          type: boolean
      examples:
      - post:
          tags:
          - user
          summary: Create user
          description: This can only be done by the logged in user.
          operationId: createUser
          consumes:
          - application/json
          produces:
          - application/json
          - application/xml
          parameters: []
          responses:
            default:
              description: successful operation
          enabled: true
          requestBody:
            description: Created user object
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/User'
            required: true
        parameters: []
        enabled: true
    Post4:
      title: Post4
      required:
      - tags
      - summary
      - description
      - operationId
      - consumes
      - produces
      - parameters
      - responses
      - enabled
      - requestBody
      type: object
      properties:
        tags:
          type: array
          items:
            type: string
          description: ''
        summary:
          type: string
        description:
          type: string
        operationId:
          type: string
        consumes:
          type: array
          items:
            type: string
          description: ''
        produces:
          type: array
          items:
            type: string
          description: ''
        parameters:
          type: array
          items:
            type: string
          description: ''
        responses:
          $ref: '#/components/schemas/Responses'
        enabled:
          type: boolean
        requestBody:
          $ref: '#/components/schemas/RequestBody4'
      examples:
      - tags:
        - user
        summary: Create user
        description: This can only be done by the logged in user.
        operationId: createUser
        consumes:
        - application/json
        produces:
        - application/json
        - application/xml
        parameters: []
        responses:
          default:
            description: successful operation
        enabled: true
        requestBody:
          description: Created user object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          required: true
    Responses:
      title: Responses
      required:
      - default
      type: object
      properties:
        default:
          $ref: '#/components/schemas/Default'
      examples:
      - default:
          description: successful operation
    Default:
      title: Default
      required:
      - description
      type: object
      properties:
        description:
          type: string
      examples:
      - description: successful operation
    UserCreateWithArray:
      title: UserCreateWithArray
      required:
      - post
      - parameters
      - enabled
      type: object
      properties:
        post:
          $ref: '#/components/schemas/Post5'
        parameters:
          type: array
          items:
            type: string
          description: ''
        enabled:
          type: boolean
      examples:
      - post:
          tags:
          - user
          summary: Creates list of users with given input array
          description: ''
          operationId: createUsersWithArrayInput
          consumes:
          - application/json
          produces:
          - application/json
          - application/xml
          parameters: []
          responses:
            default:
              description: successful operation
          enabled: true
          requestBody:
            description: List of user object
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/User'
            required: true
        parameters: []
        enabled: true
    Post5:
      title: Post5
      required:
      - tags
      - summary
      - description
      - operationId
      - consumes
      - produces
      - parameters
      - responses
      - enabled
      - requestBody
      type: object
      properties:
        tags:
          type: array
          items:
            type: string
          description: ''
        summary:
          type: string
        description:
          type: string
        operationId:
          type: string
        consumes:
          type: array
          items:
            type: string
          description: ''
        produces:
          type: array
          items:
            type: string
          description: ''
        parameters:
          type: array
          items:
            type: string
          description: ''
        responses:
          $ref: '#/components/schemas/Responses'
        enabled:
          type: boolean
        requestBody:
          $ref: '#/components/schemas/RequestBody6'
      examples:
      - tags:
        - user
        summary: Creates list of users with given input array
        description: ''
        operationId: createUsersWithArrayInput
        consumes:
        - application/json
        produces:
        - application/json
        - application/xml
        parameters: []
        responses:
          default:
            description: successful operation
        enabled: true
        requestBody:
          description: List of user object
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
          required: true
    RequestBody6:
      title: RequestBody6
      required:
      - description
      - content
      - required
      type: object
      properties:
        description:
          type: string
        content:
          $ref: '#/components/schemas/Content13'
        required:
          type: boolean
      examples:
      - description: List of user object
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
        required: true
    Content13:
      title: Content13
      required:
      - application/json
      type: object
      properties:
        application/json:
          $ref: '#/components/schemas/ApplicationJson11'
      examples:
      - application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
    ApplicationJson11:
      title: ApplicationJson11
      required:
      - schema
      type: object
      properties:
        schema:
          $ref: '#/components/schemas/Schema20'
      examples:
      - schema:
          type: array
          items:
            $ref: '#/components/schemas/User'
    Schema20:
      title: Schema20
      required:
      - type
      - items
      type: object
      properties:
        type:
          type: string
        items:
          $ref: '#/components/schemas/Items2'
      examples:
      - type: array
        items:
          $ref: '#/components/schemas/User'
    Items2:
      title: Items2
      required:
      - $ref
      type: object
      properties:
        $ref:
          type: string
    UserCreateWithList:
      title: UserCreateWithList
      required:
      - post
      - parameters
      - enabled
      type: object
      properties:
        post:
          $ref: '#/components/schemas/Post5'
        parameters:
          type: array
          items:
            type: string
          description: ''
        enabled:
          type: boolean
      examples:
      - post:
          tags:
          - user
          summary: Creates list of users with given input array
          description: ''
          operationId: createUsersWithListInput
          consumes:
          - application/json
          produces:
          - application/json
          - application/xml
          parameters: []
          responses:
            default:
              description: successful operation
          enabled: true
          requestBody:
            description: List of user object
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/User'
            required: true
        parameters: []
        enabled: true
    UserLogin:
      title: UserLogin
      required:
      - get
      - parameters
      - enabled
      type: object
      properties:
        get:
          $ref: '#/components/schemas/Get5'
        parameters:
          type: array
          items:
            type: string
          description: ''
        enabled:
          type: boolean
    Get5:
      title: Get5
      required:
      - tags
      - summary
      - description
      - operationId
      - produces
      - parameters
      - responses
      - enabled
      type: object
      properties:
        tags:
          type: array
          items:
            type: string
          description: ''
        summary:
          type: string
        description:
          type: string
        operationId:
          type: string
        produces:
          type: array
          items:
            type: string
          description: ''
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/Parameter8'
          description: ''
        responses:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/m2007'
        enabled:
          type: boolean
    Parameter8:
      title: Parameter8
      required:
      - description
      - in
      - name
      - parameterSchema
      - required
      type: object
      properties:
        description:
          type: string
        in:
          type: string
        name:
          type: string
        parameterSchema:
          $ref: '#/components/schemas/ParameterSchema8'
        required:
          type: boolean
      examples:
      - description: The user name for login
        in: query
        name: username
        parameterSchema:
          description: The user name for login
          readOnly: false
          type: string
        required: true
    ParameterSchema8:
      title: ParameterSchema8
      required:
      - description
      - readOnly
      - type
      type: object
      properties:
        description:
          type: string
        readOnly:
          type: boolean
        type:
          type: string
      examples:
      - description: The user name for login
        readOnly: false
        type: string
    m2007:
      title: m2007
      required:
      - description
      - headersV3
      - content
      type: object
      properties:
        description:
          type: string
        headersV3:
          $ref: '#/components/schemas/HeadersV3'
        content:
          $ref: '#/components/schemas/Content15'
      examples:
      - description: successful operation
        headersV3:
          X-Expires-After:
            in: header
            description: date in UTC when token expires
            required: false
            parameterSchema:
              type: string
              format: date-time
          X-Rate-Limit:
            in: header
            description: calls per hour allowed by the user
            required: false
            parameterSchema:
              type: integer
              format: int32
        content:
          application/json:
            schema:
              type: string
          application/xml:
            schema:
              type: string
    HeadersV3:
      title: HeadersV3
      required:
      - X-Expires-After
      - X-Rate-Limit
      type: object
      properties:
        X-Expires-After:
          $ref: '#/components/schemas/XExpiresAfter'
        X-Rate-Limit:
          $ref: '#/components/schemas/XRateLimit'
      examples:
      - X-Expires-After:
          in: header
          description: date in UTC when token expires
          required: false
          parameterSchema:
            type: string
            format: date-time
        X-Rate-Limit:
          in: header
          description: calls per hour allowed by the user
          required: false
          parameterSchema:
            type: integer
            format: int32
    XExpiresAfter:
      title: XExpiresAfter
      required:
      - in
      - description
      - required
      - parameterSchema
      type: object
      properties:
        in:
          type: string
        description:
          type: string
        required:
          type: boolean
        parameterSchema:
          $ref: '#/components/schemas/ParameterSchema9'
      examples:
      - in: header
        description: date in UTC when token expires
        required: false
        parameterSchema:
          type: string
          format: date-time
    ParameterSchema9:
      title: ParameterSchema9
      required:
      - type
      - format
      type: object
      properties:
        type:
          type: string
        format:
          type: string
      examples:
      - type: string
        format: date-time
    XRateLimit:
      title: XRateLimit
      required:
      - in
      - description
      - required
      - parameterSchema
      type: object
      properties:
        in:
          type: string
        description:
          type: string
        required:
          type: boolean
        parameterSchema:
          $ref: '#/components/schemas/ParameterSchema9'
      examples:
      - in: header
        description: calls per hour allowed by the user
        required: false
        parameterSchema:
          type: integer
          format: int32
    Content15:
      title: Content15
      required:
      - application/json
      - application/xml
      type: object
      properties:
        application/json:
          $ref: '#/components/schemas/ApplicationJson13'
        application/xml:
          $ref: '#/components/schemas/ApplicationXml7'
      examples:
      - application/json:
          schema:
            type: string
        application/xml:
          schema:
            type: string
    ApplicationJson13:
      title: ApplicationJson13
      required:
      - schema
      type: object
      properties:
        schema:
          $ref: '#/components/schemas/Schema22'
      examples:
      - schema:
          type: string
    Schema22:
      title: Schema22
      required:
      - type
      type: object
      properties:
        type:
          type: string
      examples:
      - type: string
    ApplicationXml7:
      title: ApplicationXml7
      required:
      - schema
      type: object
      properties:
        schema:
          $ref: '#/components/schemas/Schema22'
      examples:
      - schema:
          type: string
    UserLogout:
      title: UserLogout
      required:
      - get
      - parameters
      - enabled
      type: object
      properties:
        get:
          $ref: '#/components/schemas/Get6'
        parameters:
          type: array
          items:
            type: string
          description: ''
        enabled:
          type: boolean
      examples:
      - get:
          tags:
          - user
          summary: Logs out current logged in user session
          description: ''
          operationId: logoutUser
          produces:
          - application/json
          - application/xml
          responses:
            default:
              description: successful operation
          enabled: true
        parameters: []
        enabled: true
    Get6:
      title: Get6
      required:
      - tags
      - summary
      - description
      - operationId
      - produces
      - responses
      - enabled
      type: object
      properties:
        tags:
          type: array
          items:
            type: string
          description: ''
        summary:
          type: string
        description:
          type: string
        operationId:
          type: string
        produces:
          type: array
          items:
            type: string
          description: ''
        responses:
          $ref: '#/components/schemas/Responses'
        enabled:
          type: boolean
      examples:
      - tags:
        - user
        summary: Logs out current logged in user session
        description: ''
        operationId: logoutUser
        produces:
        - application/json
        - application/xml
        responses:
          default:
            description: successful operation
        enabled: true
    UserUsername:
      title: UserUsername
      required:
      - get
      - put
      - delete
      - parameters
      - enabled
      type: object
      properties:
        get:
          $ref: '#/components/schemas/Get7'
        put:
          $ref: '#/components/schemas/Put1'
        delete:
          $ref: '#/components/schemas/Delete2'
        parameters:
          type: array
          items:
            type: string
          description: ''
        enabled:
          type: boolean
    Get7:
      title: Get7
      required:
      - tags
      - summary
      - description
      - operationId
      - produces
      - parameters
      - responses
      - enabled
      type: object
      properties:
        tags:
          type: array
          items:
            type: string
          description: ''
        summary:
          type: string
        description:
          type: string
        operationId:
          type: string
        produces:
          type: array
          items:
            type: string
          description: ''
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/Parameter8'
          description: ''
        responses:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/m2002'
        enabled:
          type: boolean
    Put1:
      title: Put1
      required:
      - tags
      - summary
      - description
      - operationId
      - consumes
      - produces
      - parameters
      - responses
      - enabled
      - requestBody
      type: object
      properties:
        tags:
          type: array
          items:
            type: string
          description: ''
        summary:
          type: string
        description:
          type: string
        operationId:
          type: string
        consumes:
          type: array
          items:
            type: string
          description: ''
        produces:
          type: array
          items:
            type: string
          description: ''
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/Parameter8'
          description: ''
        responses:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/m400'
        enabled:
          type: boolean
        requestBody:
          $ref: '#/components/schemas/RequestBody4'
      examples:
      - tags:
        - user
        summary: Updated user
        description: This can only be done by the logged in user.
        operationId: updateUser
        consumes:
        - application/json
        produces:
        - application/json
        - application/xml
        parameters:
        - description: name that need to be updated
          in: path
          name: username
          parameterSchema:
            description: name that need to be updated
            readOnly: false
            type: string
          required: true
        responses:
          '400':
            description: Invalid user supplied
          '404':
            description: User not found
        enabled: true
        requestBody:
          description: Updated user object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          required: true
    Delete2:
      title: Delete2
      required:
      - tags
      - summary
      - description
      - operationId
      - produces
      - parameters
      - responses
      - enabled
      type: object
      properties:
        tags:
          type: array
          items:
            type: string
          description: ''
        summary:
          type: string
        description:
          type: string
        operationId:
          type: string
        produces:
          type: array
          items:
            type: string
          description: ''
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/Parameter8'
          description: ''
        responses:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/m400'
        enabled:
          type: boolean
      examples:
      - tags:
        - user
        summary: Delete user
        description: This can only be done by the logged in user.
        operationId: deleteUser
        produces:
        - application/json
        - application/xml
        parameters:
        - description: The name that needs to be deleted
          in: path
          name: username
          parameterSchema:
            description: The name that needs to be deleted
            readOnly: false
            type: string
          required: true
        responses:
          '400':
            description: Invalid username supplied
          '404':
            description: User not found
        enabled: true
    SecurityDefinitions:
      title: SecurityDefinitions
      required:
      - api_key
      - petstore_auth
      type: object
      properties:
        api_key:
          $ref: '#/components/schemas/ApiKey'
        petstore_auth:
          $ref: '#/components/schemas/PetstoreAuth'
      examples:
      - api_key:
          in: header
          name: api_key
          type: apiKey
        petstore_auth:
          authorizationUrl: https://petstore.swagger.io/oauth/authorize
          flow: implicit
          scopes:
            read:pets: read your pets
            write:pets: modify pets in your account
          type: oauth2
    ApiKey:
      title: ApiKey
      required:
      - in
      - name
      - type
      type: object
      properties:
        in:
          type: string
        name:
          type: string
        type:
          type: string
      examples:
      - in: header
        name: api_key
        type: apiKey
    PetstoreAuth:
      title: PetstoreAuth
      required:
      - authorizationUrl
      - flow
      - scopes
      - type
      type: object
      properties:
        authorizationUrl:
          type: string
        flow:
          type: string
        scopes:
          $ref: '#/components/schemas/Scopes'
        type:
          type: string
      examples:
      - authorizationUrl: https://petstore.swagger.io/oauth/authorize
        flow: implicit
        scopes:
          read:pets: read your pets
          write:pets: modify pets in your account
        type: oauth2
    Scopes:
      title: Scopes
      required:
      - read:pets
      - write:pets
      type: object
      properties:
        read:pets:
          type: string
        write:pets:
          type: string
      examples:
      - read:pets: read your pets
        write:pets: modify pets in your account
    Server:
      title: Server
      required:
      - url
      type: object
      properties:
        url:
          type: string
      examples:
      - url: https://petstore.swagger.io/v2
    Components:
      title: Components
      required:
      - schemas
      type: object
      properties:
        schemas:
          $ref: '#/components/schemas/Schemas'
      examples:
      - schemas:
          ApiResponse:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              type:
                type: string
          Category:
            type: object
            properties:
              id:
                type: integer
                format: int64
              name:
                type: string
            xml:
              name: Category
          Order:
            type: object
            properties:
              complete:
                type: boolean
              id:
                type: integer
                format: int64
              petId:
                type: integer
                format: int64
              quantity:
                type: integer
                format: int32
              shipDate:
                type: string
                format: date-time
              status:
                type: string
                description: Order Status
                enum:
                - placed
                - approved
                - delivered
            xml:
              name: Order
          Pet:
            required:
            - photoUrls
            - name
            type: object
            properties:
              category:
                $ref: '#/components/schemas/Category'
              id:
                type: integer
                format: int64
              name:
                type: string
                example: doggie
              photoUrls:
                type: array
                xml:
                  wrapped: true
                items:
                  type: string
                  xml:
                    name: photoUrl
              status:
                type: string
                description: pet status in the store
                enum:
                - available
                - pending
                - sold
              tags:
                type: array
                xml:
                  wrapped: true
                items:
                  $ref: '#/components/schemas/Tag'
                  xml:
                    name: tag
            xml:
              name: Pet
          Tag:
            type: object
            properties:
              id:
                type: integer
                format: int64
              name:
                type: string
            xml:
              name: Tag
          User:
            type: object
            properties:
              email:
                type: string
              firstName:
                type: string
              id:
                type: integer
                format: int64
              lastName:
                type: string
              password:
                type: string
              phone:
                type: string
              userStatus:
                type: integer
                description: User Status
                format: int32
              username:
                type: string
            xml:
              name: User
    Schemas:
      title: Schemas
      required:
      - ApiResponse
      - Category
      - Order
      - Pet
      - Tag
      - User
      type: object
      properties:
        ApiResponse:
          $ref: '#/components/schemas/ApiResponse'
        Category:
          $ref: '#/components/schemas/Category'
        Order:
          $ref: '#/components/schemas/Order'
        Pet:
          $ref: '#/components/schemas/Pet1'
        Tag:
          $ref: '#/components/schemas/Tag1'
        User:
          $ref: '#/components/schemas/User1'
      examples:
      - ApiResponse:
          type: object
          properties:
            code:
              type: integer
              format: int32
            message:
              type: string
            type:
              type: string
        Category:
          type: object
          properties:
            id:
              type: integer
              format: int64
            name:
              type: string
          xml:
            name: Category
        Order:
          type: object
          properties:
            complete:
              type: boolean
            id:
              type: integer
              format: int64
            petId:
              type: integer
              format: int64
            quantity:
              type: integer
              format: int32
            shipDate:
              type: string
              format: date-time
            status:
              type: string
              description: Order Status
              enum:
              - placed
              - approved
              - delivered
          xml:
            name: Order
        Pet:
          required:
          - photoUrls
          - name
          type: object
          properties:
            category:
              $ref: '#/components/schemas/Category'
            id:
              type: integer
              format: int64
            name:
              type: string
              example: doggie
            photoUrls:
              type: array
              xml:
                wrapped: true
              items:
                type: string
                xml:
                  name: photoUrl
            status:
              type: string
              description: pet status in the store
              enum:
              - available
              - pending
              - sold
            tags:
              type: array
              xml:
                wrapped: true
              items:
                $ref: '#/components/schemas/Tag'
                xml:
                  name: tag
          xml:
            name: Pet
        Tag:
          type: object
          properties:
            id:
              type: integer
              format: int64
            name:
              type: string
          xml:
            name: Tag
        User:
          type: object
          properties:
            email:
              type: string
            firstName:
              type: string
            id:
              type: integer
              format: int64
            lastName:
              type: string
            password:
              type: string
            phone:
              type: string
            userStatus:
              type: integer
              description: User Status
              format: int32
            username:
              type: string
          xml:
            name: User
    ApiResponse:
      title: ApiResponse
      required:
      - type
      - properties
      type: object
      properties:
        type:
          type: string
        properties:
          $ref: '#/components/schemas/Properties2'
      examples:
      - type: object
        properties:
          code:
            type: integer
            format: int32
          message:
            type: string
          type:
            type: string
    Properties2:
      title: Properties2
      required:
      - code
      - message
      - type
      type: object
      properties:
        code:
          $ref: '#/components/schemas/Code'
        message:
          $ref: '#/components/schemas/Message'
        type:
          $ref: '#/components/schemas/Type'
      examples:
      - code:
          type: integer
          format: int32
        message:
          type: string
        type:
          type: string
    Code:
      title: Code
      required:
      - type
      - format
      type: object
      properties:
        type:
          type: string
        format:
          type: string
      examples:
      - type: integer
        format: int32
    Message:
      title: Message
      required:
      - type
      type: object
      properties:
        type:
          type: string
      examples:
      - type: string
    Type:
      title: Type
      required:
      - type
      type: object
      properties:
        type:
          type: string
      examples:
      - type: string
    Category:
      title: Category
      required:
      - type
      - properties
      - xml
      type: object
      properties:
        type:
          type: string
        properties:
          $ref: '#/components/schemas/Properties3'
        xml:
          $ref: '#/components/schemas/Xml'
      examples:
      - type: object
        properties:
          id:
            type: integer
            format: int64
          name:
            type: string
        xml:
          name: Category
    Properties3:
      title: Properties3
      required:
      - id
      - name
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        name:
          $ref: '#/components/schemas/Name'
      examples:
      - id:
          type: integer
          format: int64
        name:
          type: string
    Id:
      title: Id
      required:
      - type
      - format
      type: object
      properties:
        type:
          type: string
        format:
          type: string
      examples:
      - type: integer
        format: int64
    Name:
      title: Name
      required:
      - type
      type: object
      properties:
        type:
          type: string
      examples:
      - type: string
    Xml:
      title: Xml
      required:
      - name
      type: object
      properties:
        name:
          type: string
      examples:
      - name: Category
    Order:
      title: Order
      required:
      - type
      - properties
      - xml
      type: object
      properties:
        type:
          type: string
        properties:
          $ref: '#/components/schemas/Properties4'
        xml:
          $ref: '#/components/schemas/Xml'
      examples:
      - type: object
        properties:
          complete:
            type: boolean
          id:
            type: integer
            format: int64
          petId:
            type: integer
            format: int64
          quantity:
            type: integer
            format: int32
          shipDate:
            type: string
            format: date-time
          status:
            type: string
            description: Order Status
            enum:
            - placed
            - approved
            - delivered
        xml:
          name: Order
    Properties4:
      title: Properties4
      required:
      - complete
      - id
      - petId
      - quantity
      - shipDate
      - status
      type: object
      properties:
        complete:
          $ref: '#/components/schemas/Complete'
        id:
          $ref: '#/components/schemas/Id'
        petId:
          $ref: '#/components/schemas/PetId'
        quantity:
          $ref: '#/components/schemas/Quantity'
        shipDate:
          $ref: '#/components/schemas/ShipDate'
        status:
          $ref: '#/components/schemas/Status'
      examples:
      - complete:
          type: boolean
        id:
          type: integer
          format: int64
        petId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          enum:
          - placed
          - approved
          - delivered
    Complete:
      title: Complete
      required:
      - type
      type: object
      properties:
        type:
          type: string
      examples:
      - type: boolean
    PetId:
      title: PetId
      required:
      - type
      - format
      type: object
      properties:
        type:
          type: string
        format:
          type: string
      examples:
      - type: integer
        format: int64
    Quantity:
      title: Quantity
      required:
      - type
      - format
      type: object
      properties:
        type:
          type: string
        format:
          type: string
      examples:
      - type: integer
        format: int32
    ShipDate:
      title: ShipDate
      required:
      - type
      - format
      type: object
      properties:
        type:
          type: string
        format:
          type: string
      examples:
      - type: string
        format: date-time
    Status:
      title: Status
      required:
      - type
      - description
      - enum
      type: object
      properties:
        type:
          type: string
        description:
          type: string
        enum:
          type: array
          items:
            type: string
          description: ''
      examples:
      - type: string
        description: Order Status
        enum:
        - placed
        - approved
        - delivered
    Pet1:
      title: Pet1
      required:
      - required
      - type
      - properties
      - xml
      type: object
      properties:
        required:
          type: array
          items:
            type: string
          description: ''
        type:
          type: string
        properties:
          $ref: '#/components/schemas/Properties5'
        xml:
          $ref: '#/components/schemas/Xml'
      examples:
      - required:
        - photoUrls
        - name
        type: object
        properties:
          category:
            $ref: '#/components/schemas/Category'
          id:
            type: integer
            format: int64
          name:
            type: string
            example: doggie
          photoUrls:
            type: array
            xml:
              wrapped: true
            items:
              type: string
              xml:
                name: photoUrl
          status:
            type: string
            description: pet status in the store
            enum:
            - available
            - pending
            - sold
          tags:
            type: array
            xml:
              wrapped: true
            items:
              $ref: '#/components/schemas/Tag'
              xml:
                name: tag
        xml:
          name: Pet
    Properties5:
      title: Properties5
      required:
      - category
      - id
      - name
      - photoUrls
      - status
      - tags
      type: object
      properties:
        category:
          $ref: '#/components/schemas/Category1'
        id:
          $ref: '#/components/schemas/Id'
        name:
          $ref: '#/components/schemas/Name1'
        photoUrls:
          $ref: '#/components/schemas/PhotoUrls'
        status:
          $ref: '#/components/schemas/Status'
        tags:
          $ref: '#/components/schemas/Tags'
      examples:
      - category:
          $ref: '#/components/schemas/Category'
        id:
          type: integer
          format: int64
        name:
          type: string
          example: doggie
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        status:
          type: string
          description: pet status in the store
          enum:
          - available
          - pending
          - sold
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
            xml:
              name: tag
    Category1:
      title: Category1
      required:
      - $ref
      type: object
      properties:
        $ref:
          type: string
    Name1:
      title: Name1
      required:
      - type
      - example
      type: object
      properties:
        type:
          type: string
        example:
          type: string
      examples:
      - type: string
        example: doggie
    PhotoUrls:
      title: PhotoUrls
      required:
      - type
      - xml
      - items
      type: object
      properties:
        type:
          type: string
        xml:
          $ref: '#/components/schemas/Xml2'
        items:
          $ref: '#/components/schemas/Items4'
      examples:
      - type: array
        xml:
          wrapped: true
        items:
          type: string
          xml:
            name: photoUrl
    Xml2:
      title: Xml2
      required:
      - wrapped
      type: object
      properties:
        wrapped:
          type: boolean
      examples:
      - wrapped: true
    Items4:
      title: Items4
      required:
      - type
      - xml
      type: object
      properties:
        type:
          type: string
        xml:
          $ref: '#/components/schemas/Xml'
      examples:
      - type: string
        xml:
          name: photoUrl
    Tags:
      title: Tags
      required:
      - type
      - xml
      - items
      type: object
      properties:
        type:
          type: string
        xml:
          $ref: '#/components/schemas/Xml2'
        items:
          $ref: '#/components/schemas/Items5'
      examples:
      - type: array
        xml:
          wrapped: true
        items:
          $ref: '#/components/schemas/Tag'
          xml:
            name: tag
    Items5:
      title: Items5
      required:
      - $ref
      - xml
      type: object
      properties:
        $ref:
          type: string
        xml:
          $ref: '#/components/schemas/Xml'
    Tag1:
      title: Tag1
      required:
      - type
      - properties
      - xml
      type: object
      properties:
        type:
          type: string
        properties:
          $ref: '#/components/schemas/Properties3'
        xml:
          $ref: '#/components/schemas/Xml'
      examples:
      - type: object
        properties:
          id:
            type: integer
            format: int64
          name:
            type: string
        xml:
          name: Tag
    User1:
      title: User1
      required:
      - type
      - properties
      - xml
      type: object
      properties:
        type:
          type: string
        properties:
          $ref: '#/components/schemas/Properties7'
        xml:
          $ref: '#/components/schemas/Xml'
      examples:
      - type: object
        properties:
          email:
            type: string
          firstName:
            type: string
          id:
            type: integer
            format: int64
          lastName:
            type: string
          password:
            type: string
          phone:
            type: string
          userStatus:
            type: integer
            description: User Status
            format: int32
          username:
            type: string
        xml:
          name: User
    Properties7:
      title: Properties7
      required:
      - email
      - firstName
      - id
      - lastName
      - password
      - phone
      - userStatus
      - username
      type: object
      properties:
        email:
          $ref: '#/components/schemas/Email'
        firstName:
          $ref: '#/components/schemas/FirstName'
        id:
          $ref: '#/components/schemas/Id'
        lastName:
          $ref: '#/components/schemas/LastName'
        password:
          $ref: '#/components/schemas/Password'
        phone:
          $ref: '#/components/schemas/Phone'
        userStatus:
          $ref: '#/components/schemas/UserStatus'
        username:
          $ref: '#/components/schemas/Username'
      examples:
      - email:
          type: string
        firstName:
          type: string
        id:
          type: integer
          format: int64
        lastName:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          description: User Status
          format: int32
        username:
          type: string
    Email:
      title: Email
      required:
      - type
      type: object
      properties:
        type:
          type: string
      examples:
      - type: string
    FirstName:
      title: FirstName
      required:
      - type
      type: object
      properties:
        type:
          type: string
      examples:
      - type: string
    LastName:
      title: LastName
      required:
      - type
      type: object
      properties:
        type:
          type: string
      examples:
      - type: string
    Password:
      title: Password
      required:
      - type
      type: object
      properties:
        type:
          type: string
      examples:
      - type: string
    Phone:
      title: Phone
      required:
      - type
      type: object
      properties:
        type:
          type: string
      examples:
      - type: string
    UserStatus:
      title: UserStatus
      required:
      - type
      - description
      - format
      type: object
      properties:
        type:
          type: string
        description:
          type: string
        format:
          type: string
      examples:
      - type: integer
        description: User Status
        format: int32
    Username:
      title: Username
      required:
      - type
      type: object
      properties:
        type:
          type: string
      examples:
      - type: string
    NativeEndpoint2:
      title: NativeEndpoint2
      required:
      - passSecurityHeaders
      - uri
      - connectionTimeoutDuration
      - alias
      type: object
      properties:
        passSecurityHeaders:
          type: boolean
        uri:
          type: string
        connectionTimeoutDuration:
          type: integer
          contentEncoding: int32
        alias:
          type: boolean
      examples:
      - passSecurityHeaders: true
        uri: http://petstore.swagger.io/v2
        connectionTimeoutDuration: 0
        alias: false
    UnpublishFromServiceRegistryRequest:
      title: UnpublishFromServiceRegistryRequest
      required:
      - unpublishInfo
      type: object
      properties:
        unpublishInfo:
          $ref: '#/components/schemas/UnpublishInfo'
      examples:
      - unpublishInfo:
          serviceRegistryIds:
          - EurekaDefault
          apiId: 2c843837-cc6c-4ba1-aaf3-b10f8e9adbe0
    UnpublishInfo:
      title: UnpublishInfo
      required:
      - serviceRegistryIds
      - apiId
      type: object
      properties:
        serviceRegistryIds:
          type: array
          items:
            type: string
          description: ''
        apiId:
          type: string
      examples:
      - serviceRegistryIds:
        - EurekaDefault
        apiId: 2c843837-cc6c-4ba1-aaf3-b10f8e9adbe0
    PublishToServiceRegistryRequest:
      title: PublishToServiceRegistryRequest
      required:
      - publishInfo
      type: object
      properties:
        publishInfo:
          $ref: '#/components/schemas/PublishInfo'
      examples:
      - publishInfo:
          serviceRegistryPublishInfo:
          - gatewayEndpoints:
            - gatewayEndpoint: http://SAG-1YVHZY2:5555/gateway/Petstore/1.0.5
            serviceRegistryId: EurekaDefault
          apiId: 2c843837-cc6c-4ba1-aaf3-b10f8e9adbe0
    PublishInfo:
      title: PublishInfo
      required:
      - serviceRegistryPublishInfo
      - apiId
      type: object
      properties:
        serviceRegistryPublishInfo:
          type: array
          items:
            $ref: '#/components/schemas/ServiceRegistryPublishInfo'
          description: ''
        apiId:
          type: string
      examples:
      - serviceRegistryPublishInfo:
        - gatewayEndpoints:
          - gatewayEndpoint: http://SAG-1YVHZY2:5555/gateway/Petstore/1.0.5
          serviceRegistryId: EurekaDefault
        apiId: 2c843837-cc6c-4ba1-aaf3-b10f8e9adbe0
    ServiceRegistryPublishInfo:
      title: ServiceRegistryPublishInfo
      required:
      - gatewayEndpoints
      - serviceRegistryId
      type: object
      properties:
        gatewayEndpoints:
          type: array
          items:
            $ref: '#/components/schemas/GatewayEndpoint'
          description: ''
        serviceRegistryId:
          type: string
      examples:
      - gatewayEndpoints:
        - gatewayEndpoint: http://SAG-1YVHZY2:5555/gateway/Petstore/1.0.5
        serviceRegistryId: EurekaDefault
    GatewayEndpoint:
      title: GatewayEndpoint
      required:
      - gatewayEndpoint
      type: object
      properties:
        gatewayEndpoint:
          type: string
      examples:
      - gatewayEndpoint: http://SAG-1YVHZY2:5555/gateway/Petstore/1.0.5
    ReturnstheintegrationserverpublishinfofortheAPI:
      title: ReturnstheintegrationserverpublishinfofortheAPI
      required:
      - publishInfo
      type: object
      properties:
        publishInfo:
          $ref: '#/components/schemas/PublishInfo1'
      examples:
      - publishInfo:
          apiId: <string>
          serviceRegistryPublishInfo:
          - serviceRegistryId: <string>
            status: <string>
            name: <string>
            gatewayEndpoints:
            - gatewayEndpoint: <string>
              status: <string>
          - serviceRegistryId: <string>
            status: <string>
            name: <string>
            gatewayEndpoints:
            - gatewayEndpoint: <string>
              status: <string>
          integrationServerPublishInfo:
          - integrationServerId: <string>
            packageName: <string>
            folderName: <string>
            status: <string>
            integrationServerName: <string>
          - integrationServerId: <string>
            packageName: <string>
            folderName: <string>
            status: <string>
            integrationServerName: <string>
    PublishInfo1:
      title: PublishInfo1
      required:
      - apiId
      - serviceRegistryPublishInfo
      - integrationServerPublishInfo
      type: object
      properties:
        apiId:
          type: string
        serviceRegistryPublishInfo:
          type: array
          items:
            $ref: '#/components/schemas/ServiceRegistryPublishInfo1'
          description: ''
        integrationServerPublishInfo:
          type: array
          items:
            $ref: '#/components/schemas/IntegrationServerPublishInfo'
          description: ''
      examples:
      - apiId: <string>
        serviceRegistryPublishInfo:
        - serviceRegistryId: <string>
          status: <string>
          name: <string>
          gatewayEndpoints:
          - gatewayEndpoint: <string>
            status: <string>
        - serviceRegistryId: <string>
          status: <string>
          name: <string>
          gatewayEndpoints:
          - gatewayEndpoint: <string>
            status: <string>
        integrationServerPublishInfo:
        - integrationServerId: <string>
          packageName: <string>
          folderName: <string>
          status: <string>
          integrationServerName: <string>
        - integrationServerId: <string>
          packageName: <string>
          folderName: <string>
          status: <string>
          integrationServerName: <string>
    ServiceRegistryPublishInfo1:
      title: ServiceRegistryPublishInfo1
      required:
      - serviceRegistryId
      - status
      - name
      - gatewayEndpoints
      type: object
      properties:
        serviceRegistryId:
          type: string
        status:
          type: string
        name:
          type: string
        gatewayEndpoints:
          type: array
          items:
            $ref: '#/components/schemas/GatewayEndpoint1'
          description: ''
      examples:
      - serviceRegistryId: <string>
        status: <string>
        name: <string>
        gatewayEndpoints:
        - gatewayEndpoint: <string>
          status: <string>
    GatewayEndpoint1:
      title: GatewayEndpoint1
      required:
      - gatewayEndpoint
      - status
      type: object
      properties:
        gatewayEndpoint:
          type: string
        status:
          type: string
      examples:
      - gatewayEndpoint: <string>
        status: <string>
    IntegrationServerPublishInfo:
      title: IntegrationServerPublishInfo
      required:
      - integrationServerId
      - packageName
      - folderName
      - status
      - integrationServerName
      type: object
      properties:
        integrationServerId:
          type: string
        packageName:
          type: string
        folderName:
          type: string
        status:
          type: string
        integrationServerName:
          type: string
      examples:
      - integrationServerId: <string>
        packageName: <string>
        folderName: <string>
        status: <string>
        integrationServerName: <string>
    PublishToIntegrationServerRequest:
      title: PublishToIntegrationServerRequest
      required:
      - publishInfo
      type: object
      properties:
        publishInfo:
          $ref: '#/components/schemas/PublishInfo2'
      examples:
      - publishInfo:
          integrationServerPublishInfo:
          - packageAndFolders: []
            integrationServerId: 0ad4ee2e-956b-49e0-b7a4-a6a2ea45b034
            integrationServerName: gora
            folderName: test
            packageName: test
            updateNativeEndpointsOfAPI: true
            importSwaggerBasedOnTags: true
            contentModelComplianceForWSDL: None
            enableMTOM: false
            enforceWSICompliance: false
            validateSchemaWithXerces: true
          apiId: 2c843837-cc6c-4ba1-aaf3-b10f8e9adbe0
    PublishInfo2:
      title: PublishInfo2
      required:
      - integrationServerPublishInfo
      - apiId
      type: object
      properties:
        integrationServerPublishInfo:
          type: array
          items:
            $ref: '#/components/schemas/IntegrationServerPublishInfo1'
          description: ''
        apiId:
          type: string
      examples:
      - integrationServerPublishInfo:
        - packageAndFolders: []
          integrationServerId: 0ad4ee2e-956b-49e0-b7a4-a6a2ea45b034
          integrationServerName: gora
          folderName: test
          packageName: test
          updateNativeEndpointsOfAPI: true
          importSwaggerBasedOnTags: true
          contentModelComplianceForWSDL: None
          enableMTOM: false
          enforceWSICompliance: false
          validateSchemaWithXerces: true
        apiId: 2c843837-cc6c-4ba1-aaf3-b10f8e9adbe0
    IntegrationServerPublishInfo1:
      title: IntegrationServerPublishInfo1
      required:
      - packageAndFolders
      - integrationServerId
      - integrationServerName
      - folderName
      - packageName
      - updateNativeEndpointsOfAPI
      - importSwaggerBasedOnTags
      - contentModelComplianceForWSDL
      - enableMTOM
      - enforceWSICompliance
      - validateSchemaWithXerces
      type: object
      properties:
        packageAndFolders:
          type: array
          items:
            type: string
          description: ''
        integrationServerId:
          type: string
        integrationServerName:
          type: string
        folderName:
          type: string
        packageName:
          type: string
        updateNativeEndpointsOfAPI:
          type: boolean
        importSwaggerBasedOnTags:
          type: boolean
        contentModelComplianceForWSDL:
          type: string
        enableMTOM:
          type: boolean
        enforceWSICompliance:
          type: boolean
        validateSchemaWithXerces:
          type: boolean
      examples:
      - packageAndFolders: []
        integrationServerId: 0ad4ee2e-956b-49e0-b7a4-a6a2ea45b034
        integrationServerName: gora
        folderName: test
        packageName: test
        updateNativeEndpointsOfAPI: true
        importSwaggerBasedOnTags: true
        contentModelComplianceForWSDL: None
        enableMTOM: false
        enforceWSICompliance: false
        validateSchemaWithXerces: true
    Returnsthestatusofthepublishoperationsgivenintherequest.:
      title: Returnsthestatusofthepublishoperationsgivenintherequest.
      required:
      - publishResponse
      - publishResponses
      type: object
      properties:
        publishResponse:
          $ref: '#/components/schemas/PublishResponse'
        publishResponses:
          type: array
          items:
            $ref: '#/components/schemas/PublishResponse'
          description: ''
      examples:
      - publishResponse:
          apiId: <string>
          apiName: <string>
          apiVersion: <string>
          serviceRegistryPublishResponses:
          - serviceRegistryId: <string>
            serviceRegistryName: <string>
            status: <string>
            gatewayEndpoints:
            - gatewayEndpoint: <string>
              status: <string>
            success: <boolean>
            description: <string>
            failureReason: <string>
          - serviceRegistryId: <string>
            serviceRegistryName: <string>
            status: <string>
            gatewayEndpoints:
            - gatewayEndpoint: <string>
              status: <string>
            success: <boolean>
            description: <string>
            failureReason: <string>
          integrationServerPublishResponses:
          - integrationServerId: <string>
            integrationServerName: <string>
            status: <string>
            success: <boolean>
            description: <string>
            failureReason: <string>
          - integrationServerId: <string>
            integrationServerName: <string>
            status: <string>
            success: <boolean>
            description: <string>
            failureReason: <string>
        publishResponses:
        - apiId: <string>
          apiName: <string>
          apiVersion: <string>
          serviceRegistryPublishResponses:
          - serviceRegistryId: <string>
            serviceRegistryName: <string>
            status: <string>
            gatewayEndpoints:
            - gatewayEndpoint: <string>
              status: <string>
            success: <boolean>
            description: <string>
            failureReason: <string>
          - serviceRegistryId: <string>
            serviceRegistryName: <string>
            status: <string>
            gatewayEndpoints:
            - gatewayEndpoint: <string>
              status: <string>
            success: <boolean>
            description: <string>
            failureReason: <string>
          integrationServerPublishResponses:
          - integrationServerId: <string>
            integrationServerName: <string>
            status: <string>
            success: <boolean>
            description: <string>
            failureReason: <string>
          - integrationServerId: <string>
            integrationServerName: <string>
            status: <string>
            success: <boolean>
            description: <string>
            failureReason: <string>
        - apiId: <string>
          apiName: <string>
          apiVersion: <string>
          serviceRegistryPublishResponses:
          - serviceRegistryId: <string>
            serviceRegistryName: <string>
            status: <string>
            gatewayEndpoints:
            - gatewayEndpoint: <string>
              status: <string>
            success: <boolean>
            description: <string>
            failureReason: <string>
          - serviceRegistryId: <string>
            serviceRegistryName: <string>
            status: <string>
            gatewayEndpoints:
            - gatewayEndpoint: <string>
              status: <string>
            success: <boolean>
            description: <string>
            failureReason: <string>
          integrationServerPublishResponses:
          - integrationServerId: <string>
            integrationServerName: <string>
            status: <string>
            success: <boolean>
            description: <string>
            failureReason: <string>
          - integrationServerId: <string>
            integrationServerName: <string>
            status: <string>
            success: <boolean>
            description: <string>
            failureReason: <string>
    PublishResponse:
      title: PublishResponse
      required:
      - apiId
      - apiName
      - apiVersion
      - serviceRegistryPublishResponses
      - integrationServerPublishResponses
      type: object
      properties:
        apiId:
          type: string
        apiName:
          type: string
        apiVersion:
          type: string
        serviceRegistryPublishResponses:
          type: array
          items:
            $ref: '#/components/schemas/ServiceRegistryPublishResponse'
          description: ''
        integrationServerPublishResponses:
          type: array
          items:
            $ref: '#/components/schemas/IntegrationServerPublishResponse'
          description: ''
      examples:
      - apiId: <string>
        apiName: <string>
        apiVersion: <string>
        serviceRegistryPublishResponses:
        - serviceRegistryId: <string>
          serviceRegistryName: <string>
          status: <string>
          gatewayEndpoints:
          - gatewayEndpoint: <string>
            status: <string>
          success: <boolean>
          description: <string>
          failureReason: <string>
        - serviceRegistryId: <string>
          serviceRegistryName: <string>
          status: <string>
          gatewayEndpoints:
          - gatewayEndpoint: <string>
            status: <string>
          success: <boolean>
          description: <string>
          failureReason: <string>
        integrationServerPublishResponses:
        - integrationServerId: <string>
          integrationServerName: <string>
          status: <string>
          success: <boolean>
          description: <string>
          failureReason: <string>
        - integrationServerId: <string>
          integrationServerName: <string>
          status: <string>
          success: <boolean>
          description: <string>
          failureReason: <string>
    ServiceRegistryPublishResponse:
      title: ServiceRegistryPublishResponse
      required:
      - serviceRegistryId
      - serviceRegistryName
      - status
      - gatewayEndpoints
      - success
      - description
      - failureReason
      type: object
      properties:
        serviceRegistryId:
          type: string
        serviceRegistryName:
          type: string
        status:
          type: string
        gatewayEndpoints:
          type: array
          items:
            $ref: '#/components/schemas/GatewayEndpoint1'
          description: ''
        success:
          type: string
        description:
          type: string
        failureReason:
          type: string
      examples:
      - serviceRegistryId: <string>
        serviceRegistryName: <string>
        status: <string>
        gatewayEndpoints:
        - gatewayEndpoint: <string>
          status: <string>
        success: <boolean>
        description: <string>
        failureReason: <string>
    IntegrationServerPublishResponse:
      title: IntegrationServerPublishResponse
      required:
      - integrationServerId
      - integrationServerName
      - status
      - success
      - description
      - failureReason
      type: object
      properties:
        integrationServerId:
          type: string
        integrationServerName:
          type: string
        status:
          type: string
        success:
          type: string
        description:
          type: string
        failureReason:
          type: string
      examples:
      - integrationServerId: <string>
        integrationServerName: <string>
        status: <string>
        success: <boolean>
        description: <string>
        failureReason: <string>
  securitySchemes:
    basic:
      type: http
      scheme: basic
security:
- basic: []
tags:
- name: Versions
- name: Mocking
- name: Scopes
- name: APIs
- name: Service Registry
- name: Integration Server
